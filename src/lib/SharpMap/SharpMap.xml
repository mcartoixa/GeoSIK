<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Utilities.Surrogates">
            <summary>
            Helper class for serializing System.Drawing.Pen and System.Drawing.Brush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.GetSurrogateSelectors">
            <summary>
            Gets the surrogate selecteds for System.Drawing.Pen and System.Drawing.Brush
            </summary>
            <returns>SurrogateSelector</returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.MatrixSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Drawing2D.Matrix
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.MatrixSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.PenSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.Pen
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.PenSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.SolidBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.SolidBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.SolidBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Surrogates.TextureBrushSurrogate">
            <summary>
            Surrogate class used for serializing System.Drawing.TextureBrush
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:SharpMap.Utilities.Surrogates.TextureBrushSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.Providers">
            <summary>
            Provider helper utilities
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.GetProviders">
            <summary>
            Returns a list of available data providers in this assembly
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Providers.MyInterfaceFilter(System.Type,System.Object)">
            <summary>
            Filter method used for searching for objects in an assembly
            </summary>
            <param name="typeObj"></param>
            <param name="criteriaObj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="xmin"></param>
            <param name="ymin"></param>
            <param name="xmax"></param>
            <param name="ymax"></param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.ClipLineString(SharpMap.Geometries.LineString)">
            <summary>
            
            </summary>
            <param name="lineString"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CohenSutherlandLineClipping.ClipLineString(SharpMap.Geometries.MultiLineString)">
            <summary>
            
            </summary>
            <param name="lineStrings"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="T:SharpMap.Layers.TileLayer">
            <summary>
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer">
            <summary>
            Abstract class for common layer properties
            Implement this class instead of the ILayer interface to save a lot of common code.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.ILayer">
            <summary>
            Interface for map layers
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ILayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MinVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.MaxVisible">
            <summary>
            Minimum visible zoom level
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Enabled">
            <summary>
            Specifies whether this layer should be rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LayerName">
            <summary>
            Name of layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor(SharpMap.Styles.Style)">
            <summary>
             Creates an instance of this class using the given Style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToString">
            <summary>
            Returns the name of the layer.
            </summary>
            <returns></returns>
        </member>
        <member name="E:SharpMap.Layers.Layer.LayerRendered">
            <summary>
            Event fired when the layer has been rendered
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.CoordinateTransformation">
            <summary>
            Gets or sets the <see cref="T:ProjNet.CoordinateSystems.Transformations.ICoordinateTransformation"/> applied 
            to this vectorlayer prior to rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.ReverseCoordinateTransformation">
            <summary>
            Certain Transformations cannot be inverted in ProjNet, in those cases use this property to set the reverse <see cref="T:ProjNet.CoordinateSystems.Transformations.ICoordinateTransformation"/> (of CoordinateTransformation) to fetch data from Datasource
            
            If your CoordinateTransformation can be inverted you can leave this property to null
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.Layer.MinVisible">
            <summary>
            Minimum visibility zoom, including this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.MaxVisible">
            <summary>
            Maximum visibility zoom, excluding this value
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Enabled">
            <summary>
            Specified whether the layer is rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Style">
            <summary>
            Gets/sets the Style for this Layer
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Layer.LayerRenderedEventHandler">
            <summary>
            EventHandler for event fired when the layer has been rendered
            </summary>
            <param name="layer">Layer rendered</param>
            <param name="g">Reference to graphics object used for rendering</param>
        </member>
        <member name="M:SharpMap.Layers.TileLayer.#ctor(BruTile.ITileSource,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="tileSource">the source to get the tiles from</param>
            <param name="layerName">name of the layer</param>
        </member>
        <member name="M:SharpMap.Layers.TileLayer.#ctor(BruTile.ITileSource,System.String,System.Drawing.Color,System.Boolean,System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="tileSource">the source to get the tiles from</param>
            <param name="layerName">name of the layer</param>
            <param name="transparentColor">transparent color off</param>
            <param name="showErrorInTile">generate an error tile if it could not be retrieved from source</param>
            <param name="fileCacheDir">If the layer should use a file-cache so store tiles, set this to that directory. Set to null to avoid filecache</param>
            <remarks>If <see cref="!:showErrorInTile"/> is set to false, tile source keeps trying to get the tile in every request</remarks>
        </member>
        <member name="M:SharpMap.Layers.TileLayer.#ctor(BruTile.ITileSource,System.String,System.Drawing.Color,System.Boolean,BruTile.Cache.FileCache,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="tileSource">the source to get the tiles from</param>
            <param name="layerName">name of the layer</param>
            <param name="transparentColor">transparent color off</param>
            <param name="showErrorInTile">generate an error tile if it could not be retrieved from source</param>
            <param name="fileCache">If the layer should use a file-cache so store tiles, set this to a fileCacheProvider. Set to null to avoid filecache</param>
            <param name="imgFormat">Set the format of the tiles to be used</param>
        </member>
        <member name="P:SharpMap.Layers.TileLayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TileLayer.InterpolationMode">
            <summary>
            The algorithm used when images are scaled or rotated 
            </summary>
        </member>
        <member name="E:SharpMap.Layers.TileAsyncLayer.MapNewTileAvaliable">
            <summary>
            EventHandler for event fired when a new Tile is available for rendering
            </summary>
            <param name="ts"></param>
            <param name="bm"></param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.BaseVectorLayer`1">
            <summary>
            Base class for all vector layers using <see cref="T:SharpMap.Rendering.Symbolizer.ISymbolizer`1"/> approach.
            </summary>
            <typeparam name="TGeometry">The geometry type</typeparam>
        </member>
        <member name="T:SharpMap.Layers.ICanQueryLayer">
            <summary>
            Interface for Layers, that can be queried
            </summary>
        </member>
        <member name="M:SharpMap.Layers.ICanQueryLayer.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Bounding box to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.ICanQueryLayer.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.ICanQueryLayer.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, 
            ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE.
            This property currently only applies to WMS and should perhaps be moved to a WMS
            specific class.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.OnRender(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Method called to initialize the rendering process
            </summary>
            <param name="graphics"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.SmoothingMode">
            <summary>
            Gets or sets whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Symbolizer">
            <summary>
            Gets or sets the symbolizer associated with this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.LabelLayer">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.LabelLayer"/> associated with the vector layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Symbolizer.BaseVectorLayer`1.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.SpatialReferencedBoundingBox">
            <summary>
            Spatial referenced boundingbox
            </summary>
            <remarks>
            The spatial referenced boundingbox is used to communicate boundingboxes of WMS layers together 
            with their spatial reference system in which they are specified
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.BoundingBox">
            <summary>
            Bounding box type with double precision
            </summary>
            <remarks>
            The Bounding Box represents a box whose sides are parallel to the two axes of the coordinate system.
            </remarks>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a bounding box
            </summary>
            <remarks>
            In case min values are larger than max values, the parameters will be swapped to ensure correct min/max boundary
            </remarks>
            <param name="minX">left</param>
            <param name="minY">bottom</param>
            <param name="maxX">right</param>
            <param name="maxY">top</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Initializes a bounding box
            </summary>
            <param name="lowerLeft">Lower left corner</param>
            <param name="upperRight">Upper right corner</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.ObjectModel.Collection{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of geometries
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.#ctor(System.Collections.ObjectModel.Collection{SharpMap.Geometries.BoundingBox})">
            <summary>
            Initializes a new Bounding Box based on the bounds from a set of bounding boxes
            </summary>
            <param name="objects">list of objects</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Equals(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.BoundingBox"/> to compare to.</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Offset(SharpMap.Geometries.Point)">
            <summary>
            Moves/translates the <see cref="T:SharpMap.Geometries.BoundingBox"/> along the the specified vector
            </summary>
            <param name="vector">Offset vector</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.CheckMinMax">
            <summary>
            Checks whether min values are actually smaller than max values and in that case swaps them.
            </summary>
            <returns>true if the bounding was changed</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersects(SharpMap.Geometries.BoundingBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this <see cref="T:SharpMap.Geometries.BoundingBox"/> intersects the geometry
            </summary>
            <param name="g">Geometry</param>
            <returns>True if intersects</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns true if this instance touches the <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="r"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this <see cref="T:SharpMap.Geometries.BoundingBox"/> touches the geometry
            </summary>
            <param name="s">Geometry</param>
            <returns>True if touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns true if this instance contains the <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="r"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it contains</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this instance contains the geometry
            </summary>
            <param name="s"><see cref="T:SharpMap.Geometries.BoundingBox"/></param>
            <returns>True it contains</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Touches(SharpMap.Geometries.Point)">
            <summary>
            Returns true if this instance touches the <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
            <param name="p">Geometry</param>
            <returns>True if touches</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetArea">
            <summary>
            Returns the area of the BoundingBox
            </summary>
            <returns>Area of box</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetIntersectingArea(SharpMap.Geometries.BoundingBox)">
            <summary>
            Gets the intersecting area between two boundingboxes
            </summary>
            <param name="r">BoundingBox</param>
            <returns>Area</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox)">
            <summary>
            Computes the joined boundingbox of this instance and another boundingbox
            </summary>
            <param name="box">Boundingbox to join with</param>
            <returns>Boundingbox containing both boundingboxes</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox,SharpMap.Geometries.BoundingBox)">
            <summary>
            Computes the joined boundingbox of two boundingboxes
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Join(SharpMap.Geometries.BoundingBox[])">
            <summary>
            Computes the joined <see cref="T:SharpMap.Geometries.BoundingBox"/> of an array of boundingboxes.
            </summary>
            <param name="boxes">Boxes to join</param>
            <returns>Combined BoundingBox</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Grow(System.Double)">
            <summary>
            Increases the size of the boundingbox by the givent amount in all directions
            </summary>
            <param name="amount">Amount to grow in all directions</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Grow(System.Double,System.Double)">
            <summary>
            Increases the size of the boundingbox by the givent amount in horizontal and vertical directions
            </summary>
            <param name="amountInX">Amount to grow in horizontal direction</param>
            <param name="amountInY">Amount to grow in vertical direction</param>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Contains(SharpMap.Geometries.Point)">
            <summary>
            Checks whether a point lies within the bounding box
            </summary>
            <param name="p">Point</param>
            <returns>true if point is within</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Distance(SharpMap.Geometries.BoundingBox)">
            <summary> 
            Computes the minimum distance between this and another <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            The distance between overlapping bounding boxes is 0.  Otherwise, the
            distance is the Euclidean distance between the closest points.
            </summary>
            <param name="box">Box to calculate distance to</param>
            <returns>The distance between this and another <see cref="T:SharpMap.Geometries.BoundingBox"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Distance(SharpMap.Geometries.Point)">
            <summary>
            Computes the minimum distance between this BoundingBox and a <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
            <param name="p"><see cref="T:SharpMap.Geometries.Point"/> to calculate distance to.</param>
            <returns>Minimum distance.</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetCentroid">
            <summary>
            Returns the center of the bounding box
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Clone">
            <summary>
            Creates a copy of the BoundingBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.ToString">
            <summary>
            Returns a string representation of the boundingbox as LowerLeft + UpperRight formatted as "MinX,MinY MaxX,MaxY"
            </summary>
            <returns>MinX,MinY MaxX,MaxY</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.Intersection(System.Double[])">
            <summary>
            Returns the intersection of this bounding box and a default envelope
            </summary>
            <param name="defaultEnvelope"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.BoundingBox.ToGeometry">
            <summary>
            Creates a geometry (Polygon) that resembles this bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Min">
            <summary>
            Gets or sets the lower left corner.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Max">
            <summary>
            Gets or sets the upper right corner.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Left">
            <summary>
            Gets the left boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Right">
            <summary>
            Gets the right boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Top">
            <summary>
            Gets the top boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Bottom">
            <summary>
            Gets the bottom boundary
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.TopLeft">
            <summary>
            The upper left <see cref="T:SharpMap.Geometries.Point"/> of this bounding box
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.TopRight">
            <summary>
            The upper right <see cref="T:SharpMap.Geometries.Point"/> of this bounding box
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.BottomLeft">
            <summary>
            The lower left <see cref="T:SharpMap.Geometries.Point"/> of this bounding box
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.BottomRight">
            <summary>
            The lower right <see cref="T:SharpMap.Geometries.Point"/> of this bounding box
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Width">
            <summary>
            Returns the width of the bounding box
            </summary>
            <returns>Width of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.Height">
            <summary>
            Returns the height of the bounding box
            </summary>
            <returns>Height of boundingbox</returns>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.LongestAxis">
            <summary>
            Intersection scalar (used for weighting in building the tree) 
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.BoundingBox.IsValid">
            <summary>
            This bounding box only contains valid ordinates
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.SpatialReferencedBoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new SpatialReferencedBoundingBox which stores a boundingbox together with the SRID
            </summary>
            <remarks>This class is used to communicate all the boundingboxes of a WMS server between client.cs and wmslayer.cs</remarks>
            <param name="BoundingBox">BoundingBox</param>
            <param name="SRID">Spatial Reference ID</param>
        </member>
        <member name="P:SharpMap.Web.Wms.SpatialReferencedBoundingBox.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicLineSymbolizer">
            <summary>
            A very basic line symbolizer class without any fuzzy things. It simply draws the
            linestring.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.LineSymbolizer">
            <summary>
            Abstract base class for all line symbolizer classes
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ILineSymbolizer">
            <summary>
            Interface for all classes that render lines
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ISymbolizer`1">
            <summary>
            Generic interface for symbolizers that render symbolize specific geometries
            </summary>
            <typeparam name="TGeometry">The allowed type of geometries to symbolize</typeparam>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ISymbolizer">
            <summary>
            Basic interface for all symbolizers
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.Begin(System.Drawing.Graphics,SharpMap.Map,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer.End(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ISymbolizer`1.Render(SharpMap.Map,`0,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.Render(SharpMap.Map,SharpMap.Geometries.ILineal,System.Drawing.Graphics)">
            <summary>
            Method to render a LineString to the <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="map">The map object</param>
            <param name="lineal">Linestring to symbolize</param>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.OnRenderInternal(SharpMap.Map,SharpMap.Geometries.LineString,System.Drawing.Graphics)">
            <summary>
            Function that actually renders the linestring
            </summary>
            <param name="map">The map</param>
            <param name="lineString">The line string to symbolize.</param>
            <param name="graphics">The graphics</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.LineSymbolizer.LineStringToPath(SharpMap.Geometries.LineString,SharpMap.Map)">
            <returns>A GraphicsPath</returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.LineSymbolizer.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to render the LineString
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset">
            <summary>
            A very basic line symbolizer class without any fuzzy things. It simply draws the
            linestring.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BasicLineSymbolizerWithOffset.Offset">
            <summary>
            Gets or sets the Offset 
            </summary>
        </member>
        <member name="T:SharpMap.Map">
            <summary>
            Map class
            </summary>
            <example>
            Creating a new map instance, adding layers and rendering the map:
            <code lang="C#">
            SharpMap.Map myMap = new SharpMap.Map(picMap.Size);
            myMap.MinimumZoom = 100;
            myMap.BackgroundColor = Color.White;
            
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = "Server=127.0.0.1;Port=5432;User Id=postgres;Password=password;Database=myGisDb;";
            myLayer.DataSource = new SharpMap.Data.Providers.PostGIS(ConnStr, "myTable", "the_geom", 32632);
            myLayer.FillStyle = new SolidBrush(Color.FromArgb(240,240,240)); //Applies to polygon types only
            myLayer.OutlineStyle = new Pen(Color.Blue, 1); //Applies to polygon and linetypes only
            //Setup linestyle (applies to line types only)
            myLayer.Style.Line.Width = 2;
            myLayer.Style.Line.Color = Color.Black;
            myLayer.Style.Line.EndCap = System.Drawing.Drawing2D.LineCap.Round; //Round end
            myLayer.Style.Line.StartCap = layRailroad.LineStyle.EndCap; //Round start
            myLayer.Style.Line.DashPattern = new float[] { 4.0f, 2.0f }; //Dashed linestyle
            myLayer.Style.EnableOutline = true;
            myLayer.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; //Render smooth lines
            myLayer.MaxVisible = 40000;
            
            myMap.Layers.Add(myLayer);
            // [add more layers...]
            
            myMap.Center = new SharpMap.Geometries.Point(725000, 6180000); //Set center of map
            myMap.Zoom = 1200; //Set zoom level
            myMap.Size = new System.Drawing.Size(300,200); //Set output size
            
            System.Drawing.Image imgMap = myMap.GetMap(); //Renders the map
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Map.NumberFormatEnUs">
            <summary>
            Used for converting numbers to/from strings
            </summary>
        </member>
        <member name="F:SharpMap.Map.DisposeLayersOnDispose">
            <summary>
            Specifies wether to trigger a dispose on all layers (and their datasources) contained in this map when the map-object is disposed.
            The default behaviour is true unless the map is a result of a Map.Clone() operation in which case the value is false
            
            If you reuse your datasources or layers between many map-objects you should set this property to false in order for them to keep existing after a map.dispose()
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor">
            <summary>
            Initializes a new map
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new map
            </summary>
            <param name="size">Size of map in pixels</param>
        </member>
        <member name="M:SharpMap.Map._Layers_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Event handler to intercept when a new ITileAsymclayer is added to the Layers List and associate the MapNewTile Handler Event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Map.Dispose">
            <summary>
            Disposes the map object
            </summary>
        </member>
        <member name="M:SharpMap.Map.GetMap">
            <summary>
            Renders the map to an image
            </summary>
            <returns>the map image</returns>
        </member>
        <member name="M:SharpMap.Map.GetMap(System.Int32)">
            <summary>
            Renders the map to an image with the supplied resolution
            </summary>
            <param name="resolution">The resolution of the image</param>
            <returns>The map image</returns>
        </member>
        <member name="M:SharpMap.Map.GetMapAsMetafile">
            <summary>
            Renders the map to a Metafile (Vectorimage).
            </summary>
            <remarks>
            A Metafile can be saved as WMF,EMF etc. or put onto the clipboard for paste in other applications such av Word-processors which will give
            a high quality vector image in that application.
            </remarks>
            <returns>The current map rendered as to a Metafile</returns>
        </member>
        <member name="M:SharpMap.Map.GetMapAsMetafile(System.String)">
            <summary>
            Renders the map to a Metafile (Vectorimage).
            </summary>
            <param name="metafileName">The filename of the metafile. If this is null or empty the metafile is not saved.</param>
            <remarks>
            A Metafile can be saved as WMF,EMF etc. or put onto the clipboard for paste in other applications such av Word-processors which will give
            a high quality vector image in that application.
            </remarks>
            <returns>The current map rendered as to a Metafile</returns>
        </member>
        <member name="M:SharpMap.Map.MapNewTileAvaliableHandler(SharpMap.Layers.TileLayer,SharpMap.Geometries.BoundingBox,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="bbox"></param>
            <param name="bm"></param>
            <param name="sourceWidth"></param>
            <param name="sourceHeight"></param>
            <param name="imageAttributes"></param>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="layerCollectionType">the <see cref="T:SharpMap.Layers.LayerCollectionType"/> to use</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.RenderMap(System.Drawing.Graphics,SharpMap.Layers.LayerCollectionType,System.Boolean)">
            <summary>
            Renders the map using the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="g">the <see cref="T:System.Drawing.Graphics"/> object to use</param>
            <param name="layerCollectionType">the <see cref="T:SharpMap.Layers.LayerCollectionType"/> to use</param>
            <param name="drawMapDecorations">Set wether to draw map decorations on the map (if such are set)</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:System.Drawing.Graphics"/> object is null.</exception>
            <exception cref="T:System.InvalidOperationException">if there are no layers to render.</exception>
        </member>
        <member name="M:SharpMap.Map.Clone">
            <summary>
            Returns a cloned copy of this map-object.
            Layers are not cloned. The same instances are referenced from the cloned copy as from the original.
            The property <see cref="F:SharpMap.Map.DisposeLayersOnDispose"/> is however false on this object (which prevents layers beeing disposed and then not usable from the original map)
            </summary>
            <returns>Instance of <see cref="T:SharpMap.Map"/></returns>
        </member>
        <member name="M:SharpMap.Map.FindLayer(System.String)">
            <summary>
            Returns an enumerable for all layers containing the search parameter in the LayerName property
            </summary>
            <param name="layername">Search parameter</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:SharpMap.Map.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Map.ZoomToExtents">
            <summary>
            Zooms to the extents of all layers
            </summary>
        </member>
        <member name="M:SharpMap.Map.ZoomToBox(SharpMap.Geometries.BoundingBox)">
            <summary>
            Zooms the map to fit a bounding box
            </summary>
            <remarks>
            NOTE: If the aspect ratio of the box and the aspect ratio of the mapsize
            isn't the same, the resulting map-envelope will be adjusted so that it contains
            the bounding box, thus making the resulting envelope larger!
            </remarks>
            <param name="bbox"></param>
        </member>
        <member name="M:SharpMap.Map.WorldToImage(SharpMap.Geometries.Point,System.Boolean)">
            <summary>
            Converts a point from world coordinates to image coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in world coordinates</param>
            <param name="careAboutMapTransform">Indicates whether MapTransform should be taken into account</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.WorldToImage(SharpMap.Geometries.Point)">
            <summary>
            Converts a point from world coordinates to image coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in world coordinates</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.ImageToWorld(System.Drawing.PointF)">
            <summary>
            Converts a point from image coordinates to world coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in image coordinates</param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.ImageToWorld(System.Drawing.PointF,System.Boolean)">
            <summary>
            Converts a point from image coordinates to world coordinates based on the current
            zoom, center and mapsize.
            </summary>
            <param name="p">Point in image coordinates</param>
            <param name="careAboutMapTransform">Indicates whether MapTransform should be taken into account</param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="M:SharpMap.Map.GetExtents">
            <summary>
            Gets the extents of the map based on the extents of all the layers in the layers collection
            </summary>
            <returns>Full map extents</returns>
        </member>
        <member name="E:SharpMap.Map.LayersChanged">
            <summary>
            Event fired when the maps layer list have been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapViewOnChange">
            <summary>
            Event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendering">
            <summary>
            Event fired when all layers are about to be rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapRendered">
            <summary>
            Event fired when all layers have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRendering">
            <summary>
            Event fired when one layer have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRenderedEx">
            <summary>
            Event fired when one layer have been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.LayerRendered">
            <summary>
             Event fired when a layer has been rendered
            </summary>
        </member>
        <member name="E:SharpMap.Map.MapNewTileAvaliable">
            <summary>
            Event fired when a new Tile is available in a TileAsyncLayer
            </summary>
        </member>
        <member name="P:SharpMap.Map.Decorations">
            <summary>
            List of all map decorations
            </summary>
        </member>
        <member name="P:SharpMap.Map.Envelope">
            <summary>
            Gets the extents of the current map based on the current zoom, center and mapsize
            </summary>
        </member>
        <member name="P:SharpMap.Map.MapTransform">
            <summary>
            Using the <see cref="P:SharpMap.Map.MapTransform"/> you can alter the coordinate system of the map rendering.
            This makes it possible to rotate or rescale the image, for instance to have another direction than north upwards.
            </summary>
            <example>
            Rotate the map output 45 degrees around its center:
            <code lang="C#">
            System.Drawing.Drawing2D.Matrix maptransform = new System.Drawing.Drawing2D.Matrix(); //Create transformation matrix
            maptransform.RotateAt(45,new PointF(myMap.Size.Width/2,myMap.Size.Height/2)); //Apply 45 degrees rotation around the center of the map
            myMap.MapTransform = maptransform; //Apply transformation to map
            </code>
            </example>
        </member>
        <member name="P:SharpMap.Map.Layers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackgroundLayer">
            <summary>
            Collection of background Layers
            </summary>
        </member>
        <member name="P:SharpMap.Map.VariableLayers">
            <summary>
            A collection of layers. The first layer in the list is drawn first, the last one on top.
            </summary>
        </member>
        <member name="P:SharpMap.Map.BackColor">
            <summary>
            Map background color (defaults to transparent)
            </summary>
        </member>
        <member name="P:SharpMap.Map.Center">
            <summary>
            Center of map in WCS
            </summary>
        </member>
        <member name="P:SharpMap.Map.Zoom">
            <summary>
            Gets or sets the zoom level of map.
            </summary>
            <remarks>
            <para>The zoom level corresponds to the width of the map in WCS units.</para>
            <para>A zoomlevel of 0 will result in an empty map being rendered, but will not throw an exception</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Map.PixelSize">
            <summary>
            Returns the size of a pixel in world coordinate units
            </summary>
        </member>
        <member name="P:SharpMap.Map.PixelWidth">
            <summary>
            Returns the width of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/>.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelHeight">
            <summary>
            Returns the height of a pixel in world coordinate units.
            </summary>
            <remarks>The value returned is the same as <see cref="P:SharpMap.Map.PixelSize"/> unless <see cref="P:SharpMap.Map.PixelAspectRatio"/> is different from 1.</remarks>
        </member>
        <member name="P:SharpMap.Map.PixelAspectRatio">
            <summary>
            Gets or sets the aspect-ratio of the pixel scales. A value less than 
            1 will make the map streach upwards, and larger than 1 will make it smaller.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an argument exception when value is 0 or less.</exception>
        </member>
        <member name="P:SharpMap.Map.MapHeight">
            <summary>
            Height of map in world units
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Map.Size">
            <summary>
            Size of output map
            </summary>
        </member>
        <member name="P:SharpMap.Map.MinimumZoom">
            <summary>
            Minimum zoom amount allowed
            </summary>
        </member>
        <member name="P:SharpMap.Map.MaximumZoom">
            <summary>
            Maximum zoom amount allowed
            </summary>
        </member>
        <member name="P:SharpMap.Map.Disclaimer">
            <summary>
            Copyright notice to be placed on the map
            </summary>
        </member>
        <member name="P:SharpMap.Map.DisclaimerFont">
            <summary>
            Font to use for the Disclaimer
            </summary>
        </member>
        <member name="P:SharpMap.Map.DisclaimerLocation">
            <summary>
            Location for the disclaimer
            2|1
            -+-
            3|0
            </summary>
        </member>
        <member name="T:SharpMap.Map.LayersChangedEventHandler">
            <summary>
            EventHandler for event fired when the maps layer list has been changed
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderedEventHandler">
            <summary>
            EventHandler for event fired when all layers have been rendered
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapRenderingEventHandler">
            <summary>
            EventHandler for event fired when all layers are about to be rendered
            </summary>
        </member>
        <member name="T:SharpMap.Map.MapViewChangedHandler">
            <summary>
            EventHandler for event fired when the zoomlevel or the center point has been changed
            </summary>
        </member>
        <member name="T:SharpMap.LayerRenderingEventArgs">
            <summary>
            Layer rendering event argumens class
            </summary>
        </member>
        <member name="F:SharpMap.LayerRenderingEventArgs.Layer">
            <summary>
            The layer that is being or has been rendered
            </summary>
        </member>
        <member name="F:SharpMap.LayerRenderingEventArgs.LayerCollectionType">
            <summary>
            The layer collection type the layer belongs to.
            </summary>
        </member>
        <member name="M:SharpMap.LayerRenderingEventArgs.#ctor(SharpMap.Layers.ILayer,SharpMap.Layers.LayerCollectionType)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layer">The layer that is being or has been rendered</param>
            <param name="layerCollectionType">The layer collection type the layer belongs to.</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.SpatialReference">
            <summary>
            Converts spatial reference IDs to a Well-Known Text representation.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.SpatialReference.SridToWkt(System.Int32)">
            <summary>
            Converts a Spatial Reference ID to a Well-known Text representation
            </summary>
            <param name="srid">Spatial Reference ID</param>
            <returns>Well-known text</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsException">
            <summary>
            Class for throwing WMS exceptions to client
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsException.WmsExceptionCode">
            <summary>
            WMS Exception codes
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidFormat">
            <summary>
            Request contains a Format not offered by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidCRS">
            <summary>
            Request contains a CRS not offered by the server for one or more of the
            Layers in the request.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.LayerNotDefined">
            <summary>
            GetMap request is for a Layer not offered by the server, or GetFeatureInfo
            request is for a Layer not shown on the map.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.StyleNotDefined">
            <summary>
            Request is for a Layer in a Style not offered by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.LayerNotQueryable">
            <summary>
            GetFeatureInfo request is applied to a Layer which is not declared queryable.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidPoint">
            <summary>
            GetFeatureInfo request contains invalid X or Y value.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.CurrentUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            equal to current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidUpdateSequence">
            <summary>
            Value of (optional) UpdateSequence parameter in GetCapabilities request is
            greater than current value of service metadata update sequence number.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.MissingDimensionValue">
            <summary>
            Request does not include a sample dimension value, and the server did not
            declare a default value for that dimension.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.InvalidDimensionValue">
            <summary>
            Request contains an invalid sample dimension value.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.OperationNotSupported">
            <summary>
            Request is for an optional operation that is not supported by the server.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.WmsException.WmsExceptionCode.NotApplicable">
            <summary>
            No error code
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources">
            <summary>
            This class provides text resources specific for WFS 1.1.0.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOGCPREFIX">
            <summary>
            Prefix used for OGC namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOGC">
            <summary>
            OGC namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSXLINKPREFIX">
            <summary>
            Prefix used for XLink namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSXLINK">
            <summary>
            XLink namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSFEATURETYPEPREFIX">
            <summary>
            Prefix used for feature namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSWFSPREFIX">
            <summary>
            Prefix used for WFS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSWFS">
            <summary>
            WFS namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSGMLPREFIX">
            <summary>
            Prefix used for GML namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSGML">
            <summary>
            GML namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOWSPREFIX">
            <summary>
            Prefix used for OWS namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSOWS">
            <summary>
            OWS namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSSCHEMAPREFIX">
            <summary>
            Prefix used for XML schema namespace
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.NSSCHEMA">
            <summary>
            XML schema namespace URI 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_TARGETNS">
            <summary>
            Gets an XPath string addressing the target namespace in 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRYELEMENT_BYTYPEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing an element with a 'gml'-prefixed type-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype in the most simple manner.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_NAMEATTRIBUTEQUERY">
            <summary>
            Gets an XPath string addressing a name-attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_TYPEATTRIBUTEQUERY">
            <summary>
             Gets an XPath string addressing a type-attribute.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRYELEMENTCOMPLEXTYPE_BYELEMREFQUERY">
            <summary>
            Gets an XPath string addressing a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            This for querying the geometry element of a featuretype. 
            Step1: Finding the complex type with a geometry element from GML specification. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY">
            <summary>
            Gets an XPath string addressing the name of an element having a type-attribute referencing 
            a complex type hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2: Finding the name of the featuretype's element with a named complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GEOMNAMEQUERY_ANONYMOUSTYPE">
            <summary>
            Gets an XPath string addressing the name of an element described by an anonymous complex type 
            hosting an element with a 'gml'-prefixed ref-attribute in 'DescribeFeatureType'.
            Step2Alt: Finding the name of the featuretype's element with an anonymous complex type hosting the GML geometry.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_XPathTextResourcesBase.XPATH_GEOMETRY_ELEMREF_GMLELEMENTQUERY">
            <summary>
            Gets an XPath string addressing the 'gml'-prefixed  ref-attribute of an element.
            This is for querying the name of the GML geometry element.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_SRS">
            <summary>
            Gets an XPath string addressing the SRID of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BBOX">
            <summary>
            Gets an XPath string addressing the bounding box of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_GETFEATURERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'GetFeature'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_DESCRIBEFEATURETYPERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'DescribeFeatureType'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMINX">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'minx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMINY">
            <summary>
            Gets an XPath string addressing the lower corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'miny'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMAXX">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxx'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_1_0_XPathTextResources.XPATH_BOUNDINGBOXMAXY">
            <summary>
            Gets an XPath string addressing the upper corner of a featuretype's bounding box in 'GetCapabilities'
            for extracting 'maxy'.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Transform">
            <summary>
            Class for transforming between world and image coordinate
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Transform.WorldtoMap(SharpMap.Geometries.Point,SharpMap.Map)">
            <summary>
            Transforms from world coordinate system (WCS) to image coordinates
            NOTE: This method DOES NOT take the MapTransform property into account (use SharpMap.Map.MapToWorld instead)
            </summary>
            <param name="p">Point in WCS</param>
            <param name="map">Map reference</param>
            <returns>Point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Utilities.Transform.MapToWorld(System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Transforms from image coordinates to world coordinate system (WCS).
            NOTE: This method DOES NOT take the MapTransform property into account (use SharpMap.Map.MapToWorld instead)
            </summary>
            <param name="p">Point in image coordinate system</param>
            <param name="map">Map reference</param>
            <returns>Point in WCS</returns>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2">
            <summary>
            The BinaryTree class are used for indexing values to enhance the speed of queries
            </summary>
            <typeparam name="T">Value type to be indexed</typeparam>
            <typeparam name="U">Value ID type</typeparam>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.#ctor">
            <summary>
            Initializes a new instance of the generic binary tree.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue[])">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.BinaryTree{`0,`1}.ItemValue)">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Add(SharpMap.Utilities.Indexing.Node{`0,`1},SharpMap.Utilities.Indexing.Node{`0,`1})">
            <summary>
            Inserts a node into the tree
            </summary>
            <param name="newNode"></param>
            <param name="root"></param>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.TraceTree">
            <summary>
            This is the classic computer science binary tree iteration 
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Between(`0,`0)">
            <summary>
            Gets and enumerator for the values between min and max in ascending order
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.StartsWith(System.String)">
            <summary>
            Enumerates the objects whose string-representation starts with 'str'
            </summary>
            <param name="str"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.Find(`0)">
            <summary>
            Enumerates all objects with the specified value
            </summary>
            <param name="value">Value to search for</param>
            <returns>Enumerator</returns>
        </member>
        <member name="P:SharpMap.Utilities.Indexing.BinaryTree`2.InOrder">
            <summary>
            Gets an enumerator for all the values in the tree in ascending order
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue">
            <summary>
            A value in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Id">
            <summary>
            Identifier for the value
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Indexing.BinaryTree`2.ItemValue.#ctor(`0,`1)">
            <summary>
            Creates an instance of an item in a <see cref="T:SharpMap.Utilities.Indexing.BinaryTree`2"/>.
            </summary>
            <param name="value">Value</param>
            <param name="id">Identifier for the value</param>
        </member>
        <member name="T:SharpMap.Geometries.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are surfaces. The interiors of any
            two surfaces in a MultiSurface may not intersect. The boundaries of any two elements in a MultiSurface may
            intersect at most at a finite number of points.
            </summary>
            <remarks>
            MultiSurface is a non-instantiable class in this specification, it defines a set of methods for its subclasses and
            is included for reasons of extensibility. The instantiable subclass of MultiSurface is MultiPolygon,
            corresponding to a collection of Polygons.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
            <remarks>
            All the elements in a GeometryCollection must be in the same Spatial Reference. This is also the Spatial
            Reference for the GeometryCollection.<br/>
            GeometryCollection places no other constraints on its elements. Subclasses of GeometryCollection may
            restrict membership based on dimension and may also place other constraints on the degree of spatial overlap
            between elements.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.Geometry">
            <summary>
            <see cref="T:SharpMap.Geometries.Geometry"/> is the root class of the Geometry Object Model hierarchy.
            <see cref="T:SharpMap.Geometries.Geometry"/> is an abstract (non-instantiable) class.
            </summary>
            <remarks>
            <para>The instantiable subclasses of <see cref="T:SharpMap.Geometries.Geometry"/> defined in the specification are restricted to 0, 1 and twodimensional
            geometric objects that exist in two-dimensional coordinate space (R^2).</para>
            <para>All instantiable geometry classes described in this specification are defined so that valid instances of a
            geometry class are topologically closed (i.e. all defined geometries include their boundary).</para>
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.IGeometry">
            <summary>
            Defines basic interface for a Geometry
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.IGeometryClassifier">
            <summary>
            Interface for all classes that define
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.IGeometryClassifier.GeometryType">
            <summary>
            
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Envelope">
            <summary>
            The minimum bounding box for this Geometry, returned as a <see cref="T:SharpMap.Geometries.Geometry"/>. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.GetBoundingBox">
            <summary>
            The minimum <see cref="T:SharpMap.Geometries.BoundingBox"/> for this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <returns><see cref="T:SharpMap.Geometries.BoundingBox"/> for this <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsText">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known text representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.AsBinary">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known binary representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ToString">
            <summary>
            Returns a WellKnownText representation of the <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsEmpty">
            <summary>
            If true, then this <see cref="T:SharpMap.Geometries.Geometry"/> represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.IsSimple">
            <summary>
             Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the <see cref="T:SharpMap.Geometries.Geometry"/> is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/>. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is spatially related to another <see cref="T:SharpMap.Geometries.Geometry"/>, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.Geometry"/> to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially equal' to another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially disjoint' from another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially intersects' another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially touches' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially crosses' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is 'spatially within' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially contains' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially overlaps' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Buffer(System.Double)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents all points whose distance from this <see cref="T:SharpMap.Geometries.Geometry"/>
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.ConvexHull">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the convex hull of this <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set intersection of this <see cref="T:SharpMap.Geometries.Geometry"/>
            with another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to intersect with</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set intersection of this <see cref="T:SharpMap.Geometries.Geometry"/> with another <see cref="T:SharpMap.Geometries.Geometry"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set union of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned <see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a <see cref="T:SharpMap.Geometries.Geometry"/> that represents the point set difference of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to compare to</param>
            <returns><see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.IGeometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this <see cref="T:SharpMap.Geometries.Geometry"/> with anotherGeometry.
            </summary>
            <param name="geom"><see cref="T:SharpMap.Geometries.Geometry"/> to compare to</param>
            <returns><see cref="T:SharpMap.Geometries.Geometry"/></returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.SpatialReference">
            <summary>
            Gets or sets the spatial reference system associated with the <see cref="T:SharpMap.Geometries.Geometry"/>.
            A <see cref="T:SharpMap.Geometries.Geometry"/> may not have had a spatial reference system defined for
            it, in which case *spatialRef will be NULL.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.IGeometry.Dimension">
            <summary>
             The inherent dimension of this <see cref="T:SharpMap.Geometries.Geometry"/> object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Equals(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is 'spatially equal' to anotherGeometry
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Envelope">
            <summary>
            The minimum bounding box for this <see cref="T:SharpMap.Geometries.Geometry"/>, returned as a <see cref="T:SharpMap.Geometries.Geometry"/>. The
            polygon is defined by the corner points of the bounding box ((MINX, MINY), (MAXX, MINY), (MAXX,
            MAXY), (MINX, MAXY), (MINX, MINY)).
            </summary>
            <remarks>The envelope is actually the <see cref="T:SharpMap.Geometries.BoundingBox"/> converted into a polygon.</remarks>
            <seealso cref="M:SharpMap.Geometries.Geometry.GetBoundingBox"/>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GetBoundingBox">
            <summary>
            The minimum bounding box for this <see cref="T:SharpMap.Geometries.Geometry"/>, returned as a <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsText">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known text representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.AsBinary">
            <summary>
            Exports this <see cref="T:SharpMap.Geometries.Geometry"/> to a specific well-known binary representation of <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ToString">
            <summary>
            Returns a WellKnownText representation of the <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <returns>Well-known text</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsEmpty">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is the empty geometry . If true, then this
            <see cref="T:SharpMap.Geometries.Geometry"/> represents the empty point set, Ø, for the coordinate space. 
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this <see cref="T:SharpMap.Geometries.Geometry"/>. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromText(System.String)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on a WellKnownText string
            </summary>
            <param name="WKT">Well-known Text</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GeomFromWKB(System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on a WellKnownBinary byte array
            </summary>
            <param name="WKB">Well-known Binary</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Disjoint(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this Geometry is ‘spatially disjoint’ from another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersects(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially intersects’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially touches’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Crosses(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially crosses’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Within(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is ‘spatially within’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> ‘spatially contains’ another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Overlaps(SharpMap.Geometries.Geometry)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> 'spatially overlaps' another <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Relate(SharpMap.Geometries.Geometry,System.String)">
            <summary>
            Returns 'true' if this <see cref="T:SharpMap.Geometries.Geometry"/> is spatially related to another <see cref="T:SharpMap.Geometries.Geometry"/>, by testing
            for intersections between the Interior, Boundary and Exterior of the two geometries
            as specified by the values in the intersectionPatternMatrix
            </summary>
            <param name="other"><see cref="T:SharpMap.Geometries.Geometry"/> to relate to</param>
            <param name="intersectionPattern">Intersection Pattern</param>
            <returns>True if spatially related</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false</returns>
        </member>
        <member name="M:SharpMap.Geometries.Geometry.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Geometry.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Geometry.GetHashCode"/>.</returns>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.SpatialReference">
            <summary>
            Gets or sets the spatial reference system associated with the <see cref="T:SharpMap.Geometries.Geometry"/>.
            A <see cref="T:SharpMap.Geometries.Geometry"/> may not have had a spatial reference system defined for
            it, in which case *spatialRef will be NULL.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.Dimension">
            <summary>
             The inherent dimension of this <see cref="T:SharpMap.Geometries.Geometry"/> object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.UserData">
            <summary>
            User Data Associated with the geometry object
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Geometry.GeometryType">
            <summary>
            Gets the geometry type of this class
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.IGeometryCollection">
            <summary>
            Interface for a GeometryCollection. A GeometryCollection is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.IGeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.IGeometryCollection.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.#ctor">
            <summary>
            Initializes a new GeometryCollection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsEmpty">
            <summary>
            Returns empty of all the geometries are empty or the collection is empty
            </summary>
            <returns>true of collection is empty</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry, returned as a BoundingBox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Equals(SharpMap.Geometries.GeometryCollection)">
            <summary>
            Determines whether this GeometryCollection is spatially equal to the GeometryCollection 'g'
            </summary>
            <param name="g"></param>
            <returns>True if the GeometryCollections are equals</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.GeometryCollection.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.GeometryCollection.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.GeometryCollection.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Collection">
            <summary>
            Gets or sets the GeometryCollection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.NumGeometries">
            <summary>
            Gets the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.GeometryCollection.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension.
            </summary>
            <remarks>This specification is restricted to geometries in two-dimensional coordinate space.</remarks>
        </member>
        <member name="T:SharpMap.Geometries.IPolygonal">
            <summary>
            Interface for all classes that represent polygonal geometries, e.g. Point, Point3D and MultiPoint
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiSurface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.ILineal">
            <summary>
            Interface for all classes that represent lineal geometries, e.g. Point, Point3D and MultiPoint
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiCurve.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.IsClosed">
            <summary>
            Returns true if this MultiCurve is closed (StartPoint=EndPoint for each curve in this MultiCurve)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.Length">
            <summary>
            The Length of this MultiCurve which is equal to the sum of the lengths of the element Curves.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiCurve.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.GeometryType2">
            <summary>
            Enumeration of Simple Features Geometry types
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Geometry">
            <summary>
            Geometry is the root class of the hierarchy. Geometry is an abstract (non-instantiable) class.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in coordinate space.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Curve">
            <summary>
            A curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.LineString">
            <summary>
            A LineString is a curve with linear interpolation between points. Each consecutive
            pair of points defines a line segment.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.Polygon">
            <summary>
            A Polygon is a planar surface, defined by 1 exterior boundary and 0 or more interior
            boundaries. Each interior boundary defines a hole in the polygon.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a collection of 1 or more geometries.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint
            are restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection whose elements are Curves.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric collection whose elements are
            surfaces. The interiors of any two surfaces in a MultiSurface may not intersect.
            The boundaries of any two elements in a MultiSurface may intersect at most at a
            finite number of points.
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.GeometryType2.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.TokenType">
            <summary>
            Represents the type of token created by the StreamTokenizer class.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Word">
            <summary>
            Indicates that the token is a word.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Number">
            <summary>
            Indicates that the token is a number. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eol">
            <summary>
            Indicates that the end of line has been read. The field can only have this value if the eolIsSignificant method has been called with the argument true. 
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Eof">
            <summary>
            Indicates that the end of the input stream has been reached.
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Whitespace">
            <summary>
            Indictaes that the token is white space (space, tab, newline).
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownText.TokenType.Symbol">
            <summary>
            Characters that are not whitespace, numbers, etc...
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WKBGeometryType">
            <summary>
            Enumeration to determine geometrytype in Well-known Binary
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryToWKB">
            <summary>
            Converts a <see cref="T:SharpMap.Geometries.Geometry"/> instance to a Well-known Binary string representation.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:SharpMap.Geometries.Geometry"/> value as a contiguous stream of bytes. It permits <see cref="T:SharpMap.Geometries.Geometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> is obtained by serializing a <see cref="T:SharpMap.Geometries.Geometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(SharpMap.Geometries.Geometry)">
            <summary>
            Writes a geometry to a byte array using little endian byte encoding
            </summary>
            <param name="g">The geometry to write</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.Write(SharpMap.Geometries.Geometry,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometry to a byte array using the specified encoding.
            </summary>
            <param name="g">The geometry to write</param>
            <param name="wkbByteOrder">Byte order</param>
            <returns>WKB representation of the geometry</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteUInt32(System.UInt32,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes an unsigned integer to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteDouble(System.Double,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a double to the binarywriter using the specified encoding
            </summary>
            <param name="value">Value to write</param>
            <param name="writer">Binary Writer</param>
            <param name="byteOrder">byteorder</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteType(SharpMap.Geometries.Geometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the type number for this geometry.
            </summary>
            <param name="geometry">The geometry to determine the type of.</param>
            <param name="bWriter">Binary Writer</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometry(SharpMap.Geometries.Geometry,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes the geometry to the binary writer.
            </summary>
            <param name="geometry">The geometry to be written.</param>
            <param name="bWriter"></param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePoint(SharpMap.Geometries.Point,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a point.
            </summary>
            <param name="point">The point to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteLineString(SharpMap.Geometries.LineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a linestring.
            </summary>
            <param name="ls">The linestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WritePolygon(SharpMap.Geometries.Polygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a polygon.
            </summary>
            <param name="poly">The polygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPoint(SharpMap.Geometries.MultiPoint,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipoint.
            </summary>
            <param name="mp">The multipoint to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiLineString(SharpMap.Geometries.MultiLineString,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multilinestring.
            </summary>
            <param name="mls">The multilinestring to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteMultiPolygon(SharpMap.Geometries.MultiPolygon,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a multipolygon.
            </summary>
            <param name="mp">The mulitpolygon to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryToWKB.WriteGeometryCollection(SharpMap.Geometries.GeometryCollection,System.IO.BinaryWriter,SharpMap.Converters.WellKnownBinary.WkbByteOrder)">
            <summary>
            Writes a geometrycollection.
            </summary>
            <param name="gc">The geometrycollection to be written.</param>
            <param name="bWriter">Stream to write to.</param>
            <param name="byteorder">Byte order</param>
        </member>
        <member name="T:SharpMap.Web.Wms.Client">
            <summary>
            Class for requesting and parsing a WMS servers capabilities
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.GetRemoteXml">
            <summary>
            Downloads servicedescription from WMS service  
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapabilities">
            <summary>
            Parses a servicedescription and stores the data in the ServiceDescription property
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseServiceDescription(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlServiceDescription"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseCapability(System.Xml.XmlNode)">
            <summary>
            Parses capability node
            </summary>
            <param name="xnCapability"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseExceptions(System.Xml.XmlNode)">
            <summary>
            Parses valid exceptions
            </summary>
            <param name="xnlExceptionNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseRequest(System.Xml.XmlNode)">
            <summary>
            Parses request node
            </summary>
            <param name="xmlRequestNode"></param>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseRequestTypeBlock(System.Xml.XmlNode,SharpMap.Web.Wms.Client.WmsOnlineResource[]@,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            Parses GetMap request nodes
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseLayer(System.Xml.XmlNode)">
            <summary>
            Iterates through the layer nodes recursively
            </summary>
            <param name="xmlLayer"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ValidateXml">
            <summary>
            </summary>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Client.ParseVersion">
            <summary>
            Just parse the version number and add to the version property
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Credentials">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ServiceDescription">
            <summary>
            Gets the service description
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Version">
            <summary>
            Gets the version of the WMS server (ex. "1.3.0")
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.WmsVersion">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetCapabilitiesRequests">
            <summary>
            Gets the available GetMap request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetCapabilitiesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetFeatureInfoRequests">
            <summary>
            Gets the available GetFeatureInfo request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetFeatureInfoOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.DescribeLayerRequests">
            <summary>
            Gets the available DescribeLayer request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.DescribeLayerOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetLegendGraphicRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetLegendGraphicOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetStylesRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetStylesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.PutStylesRequests">
            <summary>
            Gets the available GetLegendGraphic request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.PutStylesOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapOutputFormats">
            <summary>
            Gets a list of available image mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.ExceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilitie's VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetMapRequests">
            <summary>
            Gets the available GetMap request methods and Online Resource URI
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Layer">
            <summary>
            Gets the hiarchial layer structure
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wms.Client.XmlDoc">
            <summary>
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsLayerStyle">
            <summary>
            Structure for storing information about a WMS Layer Style
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.LegendUrl">
            <summary>
            Legend
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.StyleSheetUrl">
            <summary>
            Style Sheet Url
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsLayerStyle.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsOnlineResource">
            <summary>
            Structure for storing info on an Online Resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.OnlineResource">
            <summary>
            URI of online resource
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsOnlineResource.Type">
            <summary>
            Type of online resource (Ex. request method 'Get' or 'Post')
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsServerLayer">
            <summary>
            Structure for holding information about a WMS Layer 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Abstract">
            <summary>
            Abstract
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.ChildLayers">
            <summary>
            Collection of child layers
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.CRS">
            <summary>
            Coordinate Reference Systems supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.LatLonBoundingBox">
            <summary>
            Latitudal/longitudal extent of this layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.SRIDBoundingBoxes">
            <summary>
            Extent of this layer in spatial reference system
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Name">
            <summary>
            Unique name of this layer used for requesting layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Queryable">
            <summary>
            Specifies whether this layer is queryable using GetFeatureInfo requests
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Style">
            <summary>
            List of styles supported by layer
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsServerLayer.Title">
            <summary>
            Layer title
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Client.WmsStyleLegend">
            <summary>
            Structure for storing WMS Legend information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.OnlineResource">
            <summary>
            Online resource for legend style 
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Client.WmsStyleLegend.Size">
            <summary>
            Size of legend
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Version">
            <summary>
            Version information helper class
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Version.GetCurrentVersion">
            <summary>
            Returns the current build version of SharpMap
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.Heuristic">
            <summary>
            Heuristics used for tree generation
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.maxdepth">
            <summary>
            Maximum tree depth
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.minerror">
            <summary>
            Minimum Error metric – the volume of a box + a unit cube.
            The unit cube in the metric prevents big boxes that happen to be flat having a zero result and muddling things up.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.mintricnt">
            <summary>
            Minimum object count at node
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.Heuristic.tartricnt">
            <summary>
            Target object count at node
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree">
            <summary>
            Constructs a Quad-tree node from a object list and creates its children recursively
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.SplitRatio">
            <summary>
            This means areas overlap by 5%
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._depth">
            <summary>
            Nodes depth in a tree
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree._ID">
            <summary>
            Node ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(System.Collections.Generic.List{SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects},System.UInt32,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Creates a node and either splits the objects recursively into sub-nodes, or stores them at the node depending on the heuristics.
            Tree is built top->down
            </summary>
            <param name="objList">Geometries to index</param>
            <param name="depth">Current depth of tree</param>
            <param name="heurdata">Heuristics data</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.AddNode(SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects,SharpMap.Utilities.SpatialIndexing.Heuristic)">
            <summary>
            Adds a new <see cref="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects"/> to this node.
            </summary>
            <param name="o">The boxed object</param>
            <param name="h">The child node creation heuristic</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor">
            <summary>
            This instantiator is used internally for loading a tree from a file
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.#ctor(SharpMap.Geometries.BoundingBox,System.UInt32)">
            <summary>
            This instantiator is used internally for linear creation of quadtrees
            </summary>
            <param name="box">The initial bounding box</param>
            <param name="depth">The depth</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.FromFile(System.String)">
            <summary>
            Loads a quadtree from a file
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ReadNode(System.UInt32,System.IO.BinaryReader)">
            <summary>
            Reads a node from a stream recursively
            </summary>
            <param name="depth">Current depth</param>
            <param name="br">Binary reader reference</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveIndex(System.String)">
            <summary>
            Saves the Quadtree to a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.SaveNode(SharpMap.Utilities.SpatialIndexing.QuadTree,System.IO.BinaryWriter)">
            <summary>
            Saves a node to a stream recursively
            </summary>
            <param name="node">Node to save</param>
            <param name="sw">Reference to BinaryWriter</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.CreateRootNode(SharpMap.Geometries.BoundingBox)">
            <summary>
            Creates a quadtree root node.
            </summary>
            <param name="b">The root bounding box</param>
            <returns>The root node for the quadtree</returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Dispose">
            <summary>
            Disposes the node
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ErrorMetric(SharpMap.Geometries.BoundingBox)">
            <summary>
            Calculate the floating point error metric 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.Search(SharpMap.Geometries.BoundingBox)">
            <summary>
            Searches the tree and looks for intersections with the boundingbox 'bbox'
            </summary>
            <param name="box">Boundingbox to intersect with</param>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.IntersectTreeRecursive(SharpMap.Geometries.BoundingBox,SharpMap.Utilities.SpatialIndexing.QuadTree,System.Collections.ObjectModel.Collection{System.UInt32}@)">
            <summary>
            Recursive function that traverses the tree and looks for intersections with a boundingbox
            </summary>
            <param name="box">Boundingbox to intersect with</param>
            <param name="node">Node to search from</param>
            <param name="list">List of found intersections</param>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.NodeCount">
            <summary>
            Gets the number of Nodes
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsPrunable">
            <summary>
            Gets a value indicating whether this branch is prunable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.IsLeaf">
            <summary>
            Determines whether the node is a leaf (if data is stored at the node, we assume the node is a leaf)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Box">
            <summary>
            Gets/sets the Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child0">
            <summary>
            Gets/sets the left child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Child1">
            <summary>
            Gets/sets the right child node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.SpatialIndexing.QuadTree.Depth">
            <summary>
            Gets the depth of the current node in the tree
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SpatialIndexing.QuadTree.ObsoleteFileFormatException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects">
            <summary>
            BoundingBox and Feature ID structure used for storing in the quadtree 
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.Box">
            <summary>
            Boundingbox
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.SpatialIndexing.QuadTree.BoxObjects.ID">
            <summary>
            Feature ID
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Algorithms.IsCCW(SharpMap.Geometries.LinearRing)">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <param name="ring">Ring to test.</param>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.NorthArrow">
            <summary>
            North arrow map decoration
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecoration">
            <summary>
            Abstract base class for all map decorations.
            <para>
            Handles framing and positioning of the decoration
            </para>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.GetLocation(SharpMap.Map)">
            <summary>
            Returns the left-top location of the Map decoration
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.InternalSize(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Function to compute the required size for rendering the map decoration object
            <para>This is just the size of the decoration object, border settings are excluded</para>
            </summary>
            <param name="g"></param>
            <param name="map"></param>
            <returns>The</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRender(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Function to render the actual map decoration
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendering(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Function to render the actual map decoration
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.MapDecoration.OnRendered(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Function to render the actual map decoration
            </summary>
            <param name="g"></param>
            <param name="map"></param>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Enabled">
            <summary>
            Gets or sets enabled status
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Anchor">
            <summary>
            The anchor of the map Decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Location">
            <summary>
            The point that defines the location
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Padding">
            <summary>
            Gets or sets the Padding of the map decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BackgroundColor">
            <summary>
            Gets or sets the background color for the map decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.Opacity">
            <summary>
            Gets or sets the opacity of map decoration
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderMargin">
            <summary>
            The margin between decoration and border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderColor">
            <summary>
            Gets or sets the color of the border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.BorderWidth">
            <summary>
            Gets or sets the width of the border
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.MapDecoration.RoundedEdges">
            <summary>
            Gets or sets whether the border should be rendered with rounded edges
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.NorthArrow.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.NorthArrowImage">
            <summary>
            Gets or sets the NorthArrowImage
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.Size">
            <summary>
            Gets or sets the size of the North arrow Bitmap
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.NorthArrow.ForeColor">
            <summary>
            Gets or sets the fore color
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Point3D">
            <summary>
            A Point3D is a 0-dimensional geometry and represents a single location in 3D coordinate space. A Point3D has a x coordinate
            value, a y-coordinate value and a z-coordinate value. The boundary of a Point3D is the empty set.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents a single location in 2D coordinate space. A Point has a x coordinate
            value and a y-coordinate value. The boundary of a Point is the empty set.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.IPuntal">
            <summary>
            Interface for all classes that represent puntal geometries, e.g. Point, Point3D and MultiPoint
            </summary>
        </member>
        <member name="F:SharpMap.Geometries.Point.NullOrdinate">
            <summary>
            Null ordinate value
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor">
            <summary>
            Initializes a new empty Point
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point.#ctor(System.Double[])">
            <summary>
            Create a new point by a douuble[] array
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SharpMap.Geometries.Point.CompareTo(SharpMap.Geometries.Point)">
            <summary>
            Comparator used for ordering point first by ascending X, then by ascending Y.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.ToDoubleArray">
            <summary>
            exports a point into a 2-dimensional double array
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.FromDMS(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns a point based on degrees, minutes and seconds notation.
            For western or southern coordinates, add minus '-' in front of all longitude and/or latitude values
            </summary>
            <param name="longDegrees">Longitude degrees</param>
            <param name="longMinutes">Longitude minutes</param>
            <param name="longSeconds">Longitude seconds</param>
            <param name="latDegrees">Latitude degrees</param>
            <param name="latMinutes">Latitude minutes</param>
            <param name="latSeconds">Latitude seconds</param>
            <returns>Point</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.AsPoint">
            <summary>
            Returns a 2D <see cref="T:SharpMap.Geometries.Point"/> instance from this <see cref="T:SharpMap.Geometries.Point3D"/>
            </summary>
            <returns><see cref="T:SharpMap.Geometries.Point"/></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the point to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>point in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Addition(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector + Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Subtraction(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Vector - Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.op_Multiply(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Vector * Scalar
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Equals(SharpMap.Geometries.Point)">
            <summary>
            Checks whether this instance is spatially equal to the Point 'o'
            </summary>
            <param name="p">Point to compare to</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Point.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Point.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.IsSimple">
            <summary>
            Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Boundary">
            <summary>
            The boundary of a point is the empty set.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the distance between this geometry instance and another geometry, as
            measured in the spatial reference system of this instance.
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Distance(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns the distance between this point and a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Touches(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether this point touches a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box">box</param>
            <returns>true if they touch</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Touches(SharpMap.Geometries.Geometry)">
            <summary>
            Checks whether this point touches another <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
            <param name="geom">Geometry</param>
            <returns>true if they touch</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Intersects(SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks whether this point intersects a <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="box">Box</param>
            <returns>True if they intersect</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point.Contains(SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if this instance contains 'geom'
            </summary>
            <param name="geom">Geometry</param>
            <returns>True if geom is contained by this instance</returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.SetIsEmpty">
            <summary>
            Sets whether this object is empty
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.X">
            <summary>
            Gets or sets the X coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Y">
            <summary>
            Gets or sets the Y coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Item(System.UInt32)">
            <summary>
            Returns part of coordinate. Index 0 = X, Index 1 = Y
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point.NumOrdinates">
            <summary>
            Returns the number of ordinates for this point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor(SharpMap.Geometries.Point,System.Double)">
            <summary>
            Initializes a new Point
            </summary>
            <param name="p">2D Point</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor">
            <summary>
            Initializes a new Point at (0,0)
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.#ctor(System.Double[])">
            <summary>
            Create a new point by a douuble[] array
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Addition(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Vector + Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Subtraction(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Vector - Vector
            </summary>
            <param name="v1">Vector</param>
            <param name="v2">Vector</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.op_Multiply(SharpMap.Geometries.Point3D,System.Double)">
            <summary>
            Vector * Scalar
            </summary>
            <param name="m">Vector</param>
            <param name="d">Scalar (double)</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Equals(SharpMap.Geometries.Point3D)">
            <summary>
            Checks whether this instance is spatially equal to the Point 'o'
            </summary>
            <param name="p">Point to compare to</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Point3D.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Point3D.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the distance between this geometry instance and another geometry, as
            measured in the spatial reference system of this instance.
            </summary>
            <param name="geom"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.ToDoubleArray">
            <summary>
            exports a point into a 3-dimensional double array
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Clone">
            <summary>
            This method must be overridden using 'public new [derived_data_type] Clone()'
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.Equals(SharpMap.Geometries.Point3D,SharpMap.Geometries.Point3D)">
            <summary>
            Checks whether the two points are spatially equal
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <returns>true if the points a spatially equal</returns>
        </member>
        <member name="M:SharpMap.Geometries.Point3D.CompareTo(SharpMap.Geometries.Point3D)">
            <summary>
            Comparator used for ordering point first by ascending X, then by ascending Y and then by ascending Z.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.Z">
            <summary>
            Gets or sets the Z coordinate of the point
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.Item(System.UInt32)">
            <summary>
            Returns part of coordinate. Index 0 = X, Index 1 = Y, , Index 2 = Z
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Point3D.NumOrdinates">
            <summary>
            Returns the number of ordinates for this point
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.LinearRing">
            <summary>
            A LinearRing is a LineString that is both closed and simple.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.LineString">
            <summary>
            A LineString is a Curve with linear interpolation between points. Each consecutive pair of points defines a
            line segment.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Curve">
            <summary>
            A Curve is a one-dimensional geometric object usually stored as a sequence of points,
            with the subtype of Curve specifying the form of the interpolation between points.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Curve.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.Length">
            <summary>
            The length of this Curve in its associated spatial reference.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.StartPoint">
            <summary>
            The start point of this Curve.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.EndPoint">
            <summary>
            The end point of this Curve.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsClosed">
            <summary>
            Returns true if this Curve is closed (StartPoint = EndPoint).
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Curve.IsRing">
            <summary>
            true if this Curve is closed (StartPoint = EndPoint) and
            this Curve is simple (does not pass through the same point more than once).
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor(System.Collections.Generic.IList{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LineString from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor">
            <summary>
            Initializes an instance of a LineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LineString.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes an instance of a LineString
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Point(System.Int32)">
            <summary>
            Returns the specified point N in this Linestring.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the linestring to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Linestring in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Value(System.Double)">
            <summary>
            The position of a point on the line, parameterised by length.
            </summary>
            <param name="t">Distance down the line</param>
            <returns>Point at line at distance t from StartPoint</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns>BoundingBox for this geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Equals(SharpMap.Geometries.LineString)">
            <summary>
            Checks whether this instance is spatially equal to the LineString 'l'
            </summary>
            <param name="l">LineString to compare to</param>
            <returns>true of the objects are spatially equal</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.LineString.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.LineString.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Vertices">
            <summary>
            Gets or sets the collection of vertices in this Geometry
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.StartPoint">
            <summary>
            Returns the vertice where this Geometry begins
            </summary>
            <returns>First vertice in LineString</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.EndPoint">
            <summary>
            Gets the vertice where this Geometry ends
            </summary>
            <returns>Last vertice in LineString</returns>
        </member>
        <member name="P:SharpMap.Geometries.LineString.IsRing">
            <summary>
            Returns true if this LineString is closed and simple
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.Length">
            <summary>
            The length of this LineString, as measured in the spatial reference system of this LineString.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.LineString.NumPoints">
            <summary>
            The number of points in this LineString.
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor(System.Collections.Generic.IList{SharpMap.Geometries.Point})">
            <summary>
            Initializes an instance of a LinearRing from a set of vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor">
            <summary>
            Initializes an instance of a LinearRing
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes an instance of a LinearRing
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.IsCCW">
            <summary>
            Tests whether a ring is oriented counter-clockwise.
            </summary>
            <returns>Returns true if ring is oriented counter-clockwise.</returns>
        </member>
        <member name="M:SharpMap.Geometries.LinearRing.IsPointWithin(SharpMap.Geometries.Point)">
            <summary>
            Returns true of the Point 'p' is within the instance of this ring
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.LinearRing.Area">
            <summary>
            Returns the area of the LinearRing
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS">
             <summary>
             WFS dataprovider
             This provider can be used to obtain data from an OGC Web Feature Service.
             It performs the following requests: 'GetCapabilities', 'DescribeFeatureType' and 'GetFeature'.
             This class is optimized for performing requests to GeoServer (http://geoserver.org).
             Supported geometries are:
             - PointPropertyType
             - LineStringPropertyType
             - PolygonPropertyType
             - CurvePropertyType
             - SurfacePropertyType
             - MultiPointPropertyType
             - MultiLineStringPropertyType
             - MultiPolygonPropertyType
             - MultiCurvePropertyType
             - MultiSurfacePropertyType
             </summary>
             <example>
             <code lang="C#">
            SharpMap.Map demoMap;
            
            const string getCapabilitiesURI = "http://localhost:8080/geoserver/wfs";
            const string serviceURI = "http://localhost:8080/geoserver/wfs";
            
            demoMap = new SharpMap.Map(new Size(600, 600));
            demoMap.MinimumZoom = 0.005;
            demoMap.BackColor = Color.White;
            
            SharpMap.Layers.VectorLayer layer1 = new SharpMap.Layers.VectorLayer("States");
            SharpMap.Layers.VectorLayer layer2 = new SharpMap.Layers.VectorLayer("SelectedStatesAndHousholds");
            SharpMap.Layers.VectorLayer layer3 = new SharpMap.Layers.VectorLayer("New Jersey");
            SharpMap.Layers.VectorLayer layer4 = new SharpMap.Layers.VectorLayer("Roads");
            SharpMap.Layers.VectorLayer layer5 = new SharpMap.Layers.VectorLayer("Landmarks");
            SharpMap.Layers.VectorLayer layer6 = new SharpMap.Layers.VectorLayer("Poi");
                
             // Demo data from Geoserver 1.5.3 and Geoserver 1.6.0 
                
            WFS prov1 = new WFS(getCapabilitiesURI, "topp", "states", WFS.WFSVersionEnum.WFS1_0_0);
                
             // Bypass 'GetCapabilities' and 'DescribeFeatureType', if you know all necessary metadata.
            WfsFeatureTypeInfo featureTypeInfo = new WfsFeatureTypeInfo(serviceURI, "topp", null, "states", "the_geom");
             // 'WFS.WFSVersionEnum.WFS1_1_0' supported by Geoserver 1.6.x
            WFS prov2 = new SharpMap.Data.Providers.WFS(featureTypeInfo, WFS.WFSVersionEnum.WFS1_1_0);
             // Bypass 'GetCapabilities' and 'DescribeFeatureType' again...
             // It's possible to specify the geometry type, if 'DescribeFeatureType' does not...(.e.g 'GeometryAssociationType')
             // This helps to accelerate the initialization process in case of unprecise geometry information.
            WFS prov3 = new WFS(serviceURI, "topp", "http://www.openplans.org/topp", "states", "the_geom", GeometryTypeEnum.MultiSurfacePropertyType, WFS.WFSVersionEnum.WFS1_1_0);
            
             // Get data-filled FeatureTypeInfo after initialization of dataprovider (useful in Web Applications for caching metadata.
            WfsFeatureTypeInfo info = prov1.FeatureTypeInfo;
            
             // Use cached 'GetCapabilities' response of prov1 (featuretype hosted by same service).
             // Compiled XPath expressions are re-used automatically!
             // If you use a cached 'GetCapabilities' response make sure the data provider uses the same version of WFS as the one providing the cache!!!
            WFS prov4 = new WFS(prov1.GetCapabilitiesCache, "tiger", "tiger_roads", WFS.WFSVersionEnum.WFS1_0_0);
            WFS prov5 = new WFS(prov1.GetCapabilitiesCache, "tiger", "poly_landmarks", WFS.WFSVersionEnum.WFS1_0_0);
            WFS prov6 = new WFS(prov1.GetCapabilitiesCache, "tiger", "poi", WFS.WFSVersionEnum.WFS1_0_0);
             // Clear cache of prov1 - data providers do not have any cache, if they use the one of another data provider  
            prov1.GetCapabilitiesCache = null;
            
             //Filters
            IFilter filter1 = new PropertyIsEqualToFilter_FE1_1_0("STATE_NAME", "California");
            IFilter filter2 = new PropertyIsEqualToFilter_FE1_1_0("STATE_NAME", "Vermont");
            IFilter filter3 = new PropertyIsBetweenFilter_FE1_1_0("HOUSHOLD", "600000", "4000000");
            IFilter filter4 = new PropertyIsLikeFilter_FE1_1_0("STATE_NAME", "New*");
            
             // SelectedStatesAndHousholds: Green
            OGCFilterCollection filterCollection1 = new OGCFilterCollection();
            filterCollection1.AddFilter(filter1);
            filterCollection1.AddFilter(filter2);
            OGCFilterCollection filterCollection2 = new OGCFilterCollection();
            filterCollection2.AddFilter(filter3);
            filterCollection1.AddFilterCollection(filterCollection2);
            filterCollection1.Junctor = OGCFilterCollection.JunctorEnum.Or;
            prov2.OGCFilter = filterCollection1;
            
             // Like-Filter('New*'): Bisque
            prov3.OGCFilter = filter4;
            
             // Layer Style
            layer1.Style.Fill = new SolidBrush(Color.IndianRed);    // States
            layer2.Style.Fill = new SolidBrush(Color.Green); // SelectedStatesAndHousholds
            layer3.Style.Fill = new SolidBrush(Color.Bisque); // e.g. New York, New Jersey,...
            layer5.Style.Fill = new SolidBrush(Color.LightBlue);
            
             // Labels
             // Labels are collected when parsing the geometry. So there's just one 'GetFeature' call necessary.
             // Otherwise (when calling twice for retrieving labels) there may be an inconsistent read...
             // If a label property is set, the quick geometry option is automatically set to 'false'.
            prov3.Label = "STATE_NAME";
            SharpMap.Layers.LabelLayer layLabel = new SharpMap.Layers.LabelLayer("labels");
            layLabel.DataSource = prov3;
            layLabel.Enabled = true;
            layLabel.LabelColumn = prov3.Label;
            layLabel.Style = new SharpMap.Styles.LabelStyle();
            layLabel.Style.CollisionDetection = false;
            layLabel.Style.CollisionBuffer = new SizeF(5, 5);
            layLabel.Style.ForeColor = Color.Black;
            layLabel.Style.Font = new Font(FontFamily.GenericSerif, 10);
            layLabel.MaxVisible = 90;
            layLabel.Style.HorizontalAlignment = SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center;
             // Options 
             // Defaults: MultiGeometries: true, QuickGeometries: false, GetFeatureGETRequest: false
             // Render with validation...
            prov1.QuickGeometries = false;
             // Important when connecting to an UMN MapServer
            prov1.GetFeatureGETRequest = true;
             // Ignore multi-geometries...
            prov1.MultiGeometries = false;
            
             // Quick geometries
             // We need this option for prov2 since we have not passed a featuretype namespace
            prov2.QuickGeometries = true;
            prov4.QuickGeometries = true;
            prov5.QuickGeometries = true;
            prov6.QuickGeometries = true;
            
            layer1.DataSource = prov1;
            layer2.DataSource = prov2;
            layer3.DataSource = prov3;
            layer4.DataSource = prov4;
            layer5.DataSource = prov5;
            layer6.DataSource = prov6;
            
            demoMap.Layers.Add(layer1);
            demoMap.Layers.Add(layer2);
            demoMap.Layers.Add(layer3);
            demoMap.Layers.Add(layer4);
            demoMap.Layers.Add(layer5);
            demoMap.Layers.Add(layer6);
            demoMap.Layers.Add(layLabel);
            
            demoMap.Center = new SharpMap.Geometries.Point(-74.0, 40.7);
            demoMap.Zoom = 10;
             // Alternatively zoom closer
             // demoMap.Zoom = 0.2;
             // Render map
            this.mapImage1.Image = demoMap.GetMap();
             </code> 
            </example>
        </member>
        <member name="T:SharpMap.Data.Providers.IProvider">
            <summary>
            Interface for data providers
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Gets the features within the specified <see cref="T:SharpMap.Geometries.BoundingBox"/>
            </summary>
            <param name="bbox"></param>
            <returns>Features within the specified <see cref="T:SharpMap.Geometries.BoundingBox"/></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns all objects whose <see cref="T:SharpMap.Geometries.BoundingBox"/> intersects 'bbox'.
            </summary>
            <remarks>
            This method is usually much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplifed by their <see cref="T:SharpMap.Geometries.BoundingBox"/>, and using the Spatial Index
            </remarks>
            <param name="bbox">Box that objects should intersect</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetFeature(System.UInt32)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.FeatureDataRow"/> based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.GetExtents">
            <summary>
            <see cref="T:SharpMap.Geometries.BoundingBox"/> of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.IProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            <para>The ConnectionID should be unique to the datasource (for instance the filename or the
            connectionstring), and is meant to be used for connection pooling.</para>
            <para>If connection pooling doesn't apply to this datasource, the ConnectionID should return String.Empty</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.IProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all necessary
            parameters to gather metadata from 'GetCapabilities' contract.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process, 
            if the geometry type in 'DescribeFeatureType is unprecise.   
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all necessary
            parameters to gather metadata from 'GetCapabilities' contract.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with a 
            <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> object, 
            so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all mandatory
            metadata for retrieving a featuretype, so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process.   
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
            <summary>
            Use this constructor for initializing this dataprovider with all mandatory
            metadata for retrieving a featuretype, so that 'GetCapabilities' and 'DescribeFeatureType' can be bypassed.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
             <summary>
             Use this constructor for initializing this dataprovider with all necessary
             parameters to gather metadata from 'GetCapabilities' contract.
             </summary>
             <param name="getCapabilitiesCache">
             This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
             helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </param>
             <param name="nsPrefix">
             Use an empty string or 'null', if there is no prefix for the featuretype.
             </param>
             <param name="geometryType">
             Specifying the geometry type helps to accelerate the rendering process, 
             if the geometry type in 'DescribeFeatureType is unprecise.   
             </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager,System.String,System.String,SharpMap.Data.Providers.WFS.WFSVersionEnum)">
             <summary>
             Use this constructor for initializing this dataprovider with all necessary
             parameters to gather metadata from 'GetCapabilities' contract.
             </summary>
             <param name="getCapabilitiesCache">
             This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
             helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </param>
             <param name="nsPrefix">
             Use an empty string or 'null', if there is no prefix for the featuretype.
             </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.GetFeatureTypeInfo">
            <summary>
            This method gets metadata about the featuretype to query from 'GetCapabilities' and 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.GetCapabilitiesCache">
            <summary>
            This cache (obtained from an already instantiated dataprovider that retrieves a featuretype hosted by the same service) 
            helps to speed up gathering metadata. It caches the 'GetCapabilities' response. 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.FeatureTypeInfo">
            <summary>
            Gets feature metadata 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.QuickGeometries">
            <summary>
            Gets or sets a value indicating whether extracting geometry information 
            from 'GetFeature' response shall be done quickly without paying attention to
            context validation, polygon boundaries and multi-geometries.
            This option accelerates the geometry parsing process, 
            but in scarce cases can lead to errors. 
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.MultiGeometries">
            <summary>
            Gets or sets a value indicating whether the 'GetFeature' parser
            should ignore multi-geometries (MultiPoint, MultiLineString, MultiCurve, MultiPolygon, MultiSurface). 
            By default it does not. Ignoring multi-geometries can lead to a better performance.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.GetFeatureGETRequest">
            <summary>
            Gets or sets a value indicating whether the 'GetFeature' request
            should be done with HTTP GET. This option can be important when obtaining
            data from a WFS provided by an UMN MapServer.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.OGCFilter">
            <summary>
            Gets or sets an OGC Filter.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.Label">
            <summary>
            Gets or sets the property of the featuretype responsible for labels
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.Credentials">
            <summary>
            Gets or sets the network credentials used for authenticating the request with the Internet resource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.WFS.ConnectionID">
            <summary>
            Gets the service-qualified name of the featuretype.
            The service-qualified name enables the differentiation between featuretypes 
            from different services with an equal qualified name and therefore can be
            regarded as an ID for the featuretype.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS.WFSVersionEnum">
            <summary>
            This enumeration consists of expressions denoting WFS versions.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator">
            <summary>
            This class configures a <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> class 
            for requests to a Web Feature Service.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.#ctor(SharpMap.Utilities.Wfs.IWFS_TextResources)">
             <summary>
             Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator"/> class.
             An instance of this class can be used to configure a <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> object.
             </summary>
             <param name="wfsTextResources">
             An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/> 
             for getting version-specific text resources for WFS request configuration.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsGetCapabilitiesRequest(SharpMap.Utilities.Wfs.HttpClientUtil,System.String)">
            <summary>
            Configures for WFS 'GetCapabilities' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsDescribeFeatureTypeRequest(SharpMap.Utilities.Wfs.HttpClientUtil,System.String,System.String)">
            <summary>
            Configures for WFS 'DescribeFeatureType' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.WFS.WFSClientHTTPConfigurator.configureForWfsGetFeatureRequest(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,SharpMap.Geometries.BoundingBox,SharpMap.Utilities.Wfs.IFilter,System.Boolean)">
            <summary>
            Configures for WFS 'GetFeature' request using an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IWFS_TextResources"/>.
            The <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance is returned for immediate usage. 
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServerSpatialObjectType">
            <summary>
            Possible spatial object types on SqlServer
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServerSpatialObjectType.Geometry">
            <summary>
            Geometry
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.SqlServerSpatialObjectType.Geography">
            <summary>
            Geography
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.SqlServer2008">
            <summary>   
            SQL Server 2008 data provider   
            </summary>   
            <remarks>   
            <para>This provider was developed against the SQL Server 2008 November CTP. The platform may change significantly before release.</para>   
            <example>   
            Adding a datasource to a layer:   
            <code lang="C#">   
            Layers.VectorLayer myLayer = new Layers.VectorLayer("My layer");   
            string ConnStr = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=myDB;Data Source=myServer\myInstance";   
            myLayer.DataSource = new Data.Providers.Katmai(ConnStr, "myTable", "GeomColumn", "OidColumn");   
            </code>   
            </example>   
            <para>SQL Server 2008 provider by Bill Dollins (dollins.bill@gmail.com). Based on the Oracle provider written by Humberto Ferreira.</para>   
            </remarks>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="geometryColumnName">Name of geometry column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="geometryColumnName">Name of geometry column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">The type of the spatial object to use for spatial queries</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType,System.Boolean)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="geometryColumnName">Name of geometry column</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
            <param name="spatialObjectType">The type of the spatial object to use for spatial queries</param>
            <param name="useSpatialIndexExtentAsExtent">If true, the bounds of the spatial index is used for the GetExtents() method which heavily increases performance instead of reading through all features in the table</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.#ctor(System.String,System.String,System.String,SharpMap.Data.Providers.SqlServerSpatialObjectType)">
            <summary>   
            Initializes a new connection to SQL Server   
            </summary>   
            <param name="connectionStr">Connectionstring</param>   
            <param name="tablename">Name of data table</param>   
            <param name="oidColumnName">Name of column with unique identifier</param>
            <param name="spatialObjectType">The type of the spatial object to use for spatial queries</param>
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.Open">
            <summary>   
            Opens the datasource   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.Close">
            <summary>   
            Closes the datasource   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.Dispose">
            <summary>   
            Disposes the object   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.Finalize">
            <summary>   
            Finalizer   
            </summary>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>   
            Returns geometries within the specified bounding box   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetGeometryByID(System.UInt32)">
            <summary>   
            Returns the geometry corresponding to the Object ID   
            </summary>   
            <param name="oid">Object ID</param>   
            <returns>geometry</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>   
            Returns geometry Object IDs whose bounding box intersects 'bbox'   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetBoxFilterStr(SharpMap.Geometries.BoundingBox)">
            <summary>   
            Returns the box filter string needed in SQL query   
            </summary>   
            <param name="bbox"></param>   
            <returns></returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>   
            Returns the features that intersects with 'geom'   
            </summary>   
            <param name="geom"></param>   
            <param name="ds">FeatureDataSet to fill data into</param>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetFeatureCount">
            <summary>   
            Returns the number of features in the dataset   
            </summary>   
            <returns>number of features</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetFeature(System.UInt32)">
            <summary>   
            Returns a datarow based on a RowID   
            </summary>   
            <param name="rowId"></param>   
            <returns>datarow</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.GetExtents">
            <summary>   
            Boundingbox of dataset   
            </summary>   
            <returns>boundingbox</returns>   
        </member>
        <member name="M:SharpMap.Data.Providers.SqlServer2008.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>   
            Returns all features with the view box   
            </summary>   
            <param name="bbox">view box</param>   
            <param name="ds">FeatureDataSet to fill data into</param>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.IsOpen">
            <summary>   
            Returns true if the datasource is currently open   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ConnectionString">
            <summary>   
            Connectionstring   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.Table">
            <summary>   
            Data table name   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.GeometryColumn">
            <summary>   
            Name of geometry column   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ObjectIdColumn">
            <summary>   
            Name of column that contains the Object ID   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ValidateGeometries">
            <summary>
            Gets/Sets whether all <see cref="N:SharpMap.Geometries"/> passed to SqlServer2008 should me made valid using this function.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.SpatialObjectType">
            <summary>
            Spatial object type for  
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.DefinitionQuery">
            <summary>   
            Definition query used for limiting dataset   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.Columns">
            <summary>   
            Gets a collection of columns in the dataset   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.SRID">
            <summary>   
            Spacial Reference ID   
            </summary>   
        </member>
        <member name="P:SharpMap.Data.Providers.SqlServer2008.ConnectionID">
            <summary>   
            Gets the connection ID of the datasource   
            </summary>   
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryFeatureProvider">
            <summary>
            Datasource for storing a limited set of geometries.
            </summary>
            <remarks>
            <para>The GeometryProvider doesn’t utilize performance optimizations of spatial indexing,
            and thus is primarily meant for rendering a limited set of Geometries.</para>
            <para>A common use of the GeometryProvider is for highlighting a set of selected features.</para>
            <example>
            The following example gets data within a BoundingBox of another datasource and adds it to the map.
            <code lang="C#">
            List&#60;Geometry&#62; geometries = myMap.Layers[0].DataSource.GetGeometriesInView(myBox);
            VectorLayer laySelected = new VectorLayer("Selected Features");
            laySelected.DataSource = new GeometryFeatureProvider(geometries);
            laySelected.Style.Outline = new Pen(Color.Magenta, 3f);
            laySelected.Style.EnableOutline = true;
            myMap.Layers.Add(laySelected);
            </code>
            </example>
            <example>
            Adding points of interest to the map. This is useful for vehicle tracking etc.
            <code lang="C#">
            List&#60;SharpMap.Geometries.Geometry&#62; geometries = new List&#60;SharpMap.Geometries.Geometry&#62;();
            //Add two points
            geometries.Add(new SharpMap.Geometries.Point(23.345,64.325));
            geometries.Add(new SharpMap.Geometries.Point(23.879,64.194));
            SharpMap.Layers.VectorLayer layerVehicles = new SharpMap.Layers.VectorLayer("Vechicles");
            layerVehicles.DataSource = new SharpMap.Data.Providers.GeometryFeatureProvider(geometries);
            layerVehicles.Style.Symbol = Bitmap.FromFile(@"C:\data\car.gif");
            myMap.Layers.Add(layerVehicles);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometries">Set of geometries that this datasource should contain</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="features">Features to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.#ctor(SharpMap.Geometries.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometry">Geometry to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns all objects whose boundingbox intersects 'bbox'.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="box"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetFeature(System.UInt32)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryFeatureProvider.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.Features">
            <summary>
            Access to underlying <see cref="T:SharpMap.Data.FeatureDataTable"/>
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The ConnectionID is meant for Connection Pooling which doesn't apply to this datasource. Instead
            <c>String.Empty</c> is returned.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryFeatureProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.IO.StreamTokenizer">
            <summary>
            The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment style
            </summary>
            <remarks>
            This is a crude c# implementation of Java's <a href="http://java.sun.com/products/jdk/1.2/docs/api/java/io/StreamTokenizer.html">StreamTokenizer</a> class.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamTokenizer class.
            </summary>
            <param name="reader">A TextReader with some text to read.</param>
            <param name="ignoreWhitespace">Flag indicating whether whitespace should be ignored.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetNumericValue">
            <summary>
            If the current token is a number, this field contains the value of that number. 
            </summary>
            <remarks>
            If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER.
            </remarks>
            <exception cref="T:System.FormatException">Current token is not a number in a valid format.</exception>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetStringValue">
            <summary>
            If the current token is a word token, this field contains a string giving the characters of the word token. 
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetTokenType">
            <summary>
            Gets the token type of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken(System.Boolean)">
            <summary>
            Returns the next token.
            </summary>
            <param name="ignoreWhitespace">Determines is whitespace is ignored. True if whitespace is to be ignored.</param>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextToken">
            <summary>
            Returns the next token.
            </summary>
            <returns>The TokenType of the next token.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.GetType(System.Char)">
            <summary>
            Determines a characters type (e.g. number, symbols, character).
            </summary>
            <param name="character">The character to determine.</param>
            <returns>The TokenType the character is.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.NextNonWhitespaceToken">
            <summary>
            Returns next token that is not whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.LineNumber">
            <summary>
            The current line number of the stream being read.
            </summary>
        </member>
        <member name="P:SharpMap.Converters.WellKnownText.IO.StreamTokenizer.Column">
            <summary>
            The current column number of the stream being read.
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wfs.Client">
            <summary>
            Class for requesting and parsing a WMS servers capabilities
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Client._serviceIdentification">
            <summary>
            Gets the service description
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wfs.Client._exceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.GetRemoteXml">
            <summary>
            Downloads servicedescription from WMS service  
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseCapabilities">
            <summary>
            Parses a servicedescription and stores the data in the ServiceIdentification property
            </summary>
            <param name="doc">XmlDocument containing a valid Service Description</param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseService(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlService"></param>
        </member>
        <member name="M:SharpMap.Web.Wfs.Client.ParseServiceIdentification(System.Xml.XmlNode)">
            <summary>
            Parses service description node
            </summary>
            <param name="xnlServiceId"></param>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilitie's VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Credentials">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wfs.Client.Version">
            <summary>
            Gets the version of the WMS server (ex. "1.3.0")
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator">
            <summary>
            This class should be the base class of all decorators for classes
            implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="xPathQueryManager">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> to operate on</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.AddNamespace(System.String,System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="prefix">A namespace prefix</param>
            <param name="ns">A namespace URI</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.Compile(System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">An XPath string</param>
            <returns>A compiled XPath expression</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.Clone">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetIterator(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetIterator(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValueFromNode(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValueFromNode(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValuesFromNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetValuesFromNodes(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetContextOfNextNode">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.GetContextOfNode(System.UInt32)">
            <summary>
            This method must be implemented specifically in each decorator.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.ResetNamespaces">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.ResetNavigator">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.IO.Stream)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.Byte[])">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_Decorator.SetDocumentToParse(System.String)">
            <summary>
            This method invokes the corresponding method of the inherent <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> instance.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpPathToPath">
            <summary>
            Class that warps one path to another path, e.g. a pattern to a linestring
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.Warp(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Single)">
            <summary>
            Warps one path to the flattened (<see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten"/>) version of another path.
            This comes in handy for
            <list type="Bullet">
            <item>Linestyles that cannot be created with available <see cref="T:System.Drawing.Pen"/>-properties</item>
            <item>Warping Text to curves</item>
            <item>...</item>
            </list>
            </summary>
            <param name="pathToWarpTo">The path to warp to. This path is flattened before being used, so there is no need to call <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten"/> prior to this function call.</param>
            <param name="pathToWarp">The path to warp</param>
            <param name="isPattern">Defines whether <see cref="!:pathToWarp"/> is a pattern or not. If <see cref="!:pathToWarp"/> is a pattern, it is repeated until it has the total length of <see paramref="pathToWarpTo"/></param>
            <param name="interval">The interval in which the pattern should be repeated</param>
            <returns>Warped <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></returns>
            <exception cref="T:System.ArgumentNullException">If either pathToWarpTo or pathToWarp is null</exception>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.GetPathLength(System.Drawing.Drawing2D.GraphicsPath,System.Collections.Generic.SortedList{System.Single,SharpMap.Rendering.Symbolizer.WarpPathToPath.GraphSegment}@)">
            <summary>
            Calculates the length of all segments in the Path, visible or not
            </summary>
            <param name="path">A flattened <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></param>
            <param name="edges">A <see cref="T:System.Collections.Generic.SortedList`2"/> containing edges of the path. </param>
            <returns>the length</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.PrepareTextPathToWarp(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Boolean,System.Drawing.StringFormat)">
            <summary>
            Prepares a text path to be warped to a path
            <para>This operation performs the following tasks</para>
            <list type="Bullet">
            <item>Check if the <paramref name="path"/> length is less than <paramref name="totalPathLength"/> or <paramref name="ignoreLength"/> is set to <c>true</c></item></list>
            <item>Translate <paramref name="path"/> according to horizontal alignment</item>
            </summary>
            <param name="path">The text path</param>
            <param name="totalPathLength">The total length of the path to warp to</param>
            <param name="ignoreLength">value indicating if the text path should only be handled if the path fits the total length</param>
            <param name="format">The string format</param>
            <returns>The prepared text path</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.PreparePathToWarp(System.Drawing.Drawing2D.GraphicsPath,System.Boolean,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="isPattern"></param>
            <param name="totalPathLength"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.ClipPath(System.Drawing.Drawing2D.GraphicsPath,System.Single)">
            <summary>
            Clip the path to a provided length. This is tricky
            </summary>
            <param name="patternPath">the path to be clipped</param>
            <param name="totalPathLength">the maximum length of the path</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.BorderIntersectionPoint(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            
            </summary>
            <param name="lastPoint"></param>
            <param name="pathPoint"></param>
            <param name="totalPathLength"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpPathToPath.DrawString(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Brush,System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.StringFormat,System.Boolean,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Renders text along the path
            </summary>
            <param name="self">The graphics object</param>
            <param name="halo">The pen to render the halo outline</param>
            <param name="fill">The brush to fill the text</param>
            <param name="text">The text to render</param>
            <param name="fontFamily">The font family to use</param>
            <param name="style">The style</param>
            <param name="emSize">The size</param>
            <param name="format">The format</param>
            <param name="ignoreLength"></param>
            <param name="path"></param>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ITheme">
            <summary>
            Interface for rendering a thematic layer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a feature
            </summary>
            <param name="attribute">Set of attribute values to calculate the <see cref="T:SharpMap.Styles.IStyle"/> from</param>
            <returns>The style</returns>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecorationAnchor">
            <summary>
            Anchor relative postion
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.Default">
            <summary>
            Default anchor position, <see cref="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightBottom"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftTop">
            <summary>
            Left top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftCenter">
            <summary>
            Left center
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.LeftBottom">
            <summary>
            Left bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightTop">
            <summary>
            Right top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightBottom">
            <summary>
            Right bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.RightCenter">
            <summary>
            Right center
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.CenterTop">
            <summary>
            Center top
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.CenterBottom">
            <summary>
            Right bottom
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchor.Center">
            <summary>
            Right center
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.GoogleMapsDisclaimer">
            <summary>
            Displays Disclaimer-information as on maps.google.com
            
            To be used when using Google Maps as BaseMap via for example BruTile
            Calls ViewPortInfo Service at maps.google.com to get information about DisclaimerText
            
            Supports Async-Mode (use special .ctor)
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.GoogleMapsDisclaimer.#ctor(ProjNet.CoordinateSystems.Transformations.MathTransform,SharpMap.Rendering.Decoration.GoogleMapsDisclaimer.MapType,System.EventHandler,System.Boolean)">
            <summary>
            Initialize with custom parameters
            
            IMPORTANT: In Async mode you need to use UpdateBoundingBox when the MapBox/MapImage center or ZoomLevel changes, else the text will be wrong
            </summary>
            <param name="mapToWgs84Transform">Transformation to transform MapCoordinates to WGS84</param>
            <param name="mapType">Type of Map Displayed</param>
            <param name="disclaimerDownloaded">Optional EventHandler that is called after Disclaimer Async Download (to be used to refresh map)</param>
            <param name="downloadAsync">wether to download disclaimer information async (non blocking operation)</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.GoogleMapsDisclaimer.#ctor">
            <summary>
            New instance of Google Maps Disclaimer
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.WktStreamTokenizer">
            <summary>
            Reads a stream of Well Known Text (wkt) string and returns a stream of tokens.
            </summary>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the WktStreamTokenizer class.
            </summary>
            <remarks>The WktStreamTokenizer class ais in reading WKT streams.</remarks>
            <param name="reader">A TextReader that contains </param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadToken(System.String)">
            <summary>
            Reads a token and checks it is what is expected.
            </summary>
            <param name="expectedToken">The expected token.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadDoubleQuotedWord">
            <summary>
            Reads a string inside double quotes.
            </summary>
            <remarks>
            White space inside quotes is preserved.
            </remarks>
            <returns>The string inside the double quotes.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.WktStreamTokenizer.ReadAuthority(System.String@,System.Int64@)">
            <summary>
            Reads the authority and authority code.
            </summary>
            <param name="authority">String to place the authority in.</param>
            <param name="authorityCode">String to place the authority code in.</param>
        </member>
        <member name="T:SharpMap.Web.Caching">
            <summary>
            Class for storing rendered images in the httpcache
            </summary>
        </member>
        <member name="M:SharpMap.Web.Caching.InsertIntoCache(System.Int32,System.Drawing.Image)">
            <summary>
            Inserts an image into the HttpCache and returns the cache identifier.
            </summary>
            <remarks>
            Image can after insertion into the cache be requested by calling getmap.aspx?ID=[identifier]<br/>
            This requires you to add the following to web.config:
            <code escaped="true">
            <httpHandlers>
               <add verb="*" path="GetMap.aspx" type="SharpMap.Web.HttpHandler,SharpMap"/>
            </httpHandlers>
            </code>
            <example>
            Inserting the map into the cache and setting the ImageUrl:
            <code>
            string imgID = SharpMap.Web.Caching.CacheMap(5, myMap.GetMap(), Session.SessionID, Context);
            imgMap.ImageUrl = "getmap.aspx?ID=" + HttpUtility.UrlEncode(imgID);
            </code>
            </example>
            </remarks>
            <param name="minutes">Number of minutes to cache the map</param>
            <param name="map">Map reference</param>
            <returns>Image identifier</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator">
            <summary>
            This class is a decorator for classes implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/>.
            It stores compiled XPath expressions for re-use.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IXPathQueryManager">
            <summary>
            XPathQueryManager interface
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.#ctor(SharpMap.Utilities.Wfs.IXPathQueryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> class.
            </summary>
            <param name="xPathQueryManager">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IXPathQueryManager"/> to operate on</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.Compile(System.String)" -->
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.Clone">
            <summary>
            This method returns a clone of the current instance.
            The cloned instance operates on the same (read-only) XPathDocument instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetContextOfNextNode">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            to the context of the next node a previously handed over XPath expression addresses.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator.GetContextOfNode(System.UInt32)">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager_CompiledExpressionsDecorator"/> 
            to the context of node[index] of current position.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer">
            <summary>
             
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PointSymbolizer">
            <summary>
            Base class for all possible Point symbolizers
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.IPointSymbolizer">
            <summary>
            Interface for all classes that can symbolize Points
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.IPointSymbolizer.Scale">
            <summary>
            Gets or sets the scale 
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.RenderPoint(SharpMap.Map,SharpMap.Geometries.Point,System.Drawing.Graphics)">
            <summary>
            Function to render the symbol
            </summary>
            <param name="map">The map</param>
            <param name="point">The point to symbolize</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.Render(SharpMap.Map,SharpMap.Geometries.MultiPoint,System.Drawing.Graphics)">
            <summary>
            Method to render the <see cref="T:SharpMap.Geometries.MultiPoint"/> to the <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="map">The map object</param>
            <param name="points">Locations where to render the Symbol</param>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.OnRenderInternal(System.Drawing.PointF,System.Drawing.Graphics)">
            <summary>
            Function that does the actual rendering
            </summary>
            <param name="pt">The point</param>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PointSymbolizer.ToRasterPointSymbolizer">
            <summary>
            Utility function to transform any <see cref="T:SharpMap.Rendering.Symbolizer.IPointSymbolizer"/> into an unscaled <see cref="T:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer"/>. This may bring performance benefits.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size">
            <summary>
            Gets or sets the Size of the symbol
            <para>
            Implementations may ignore the setter, the getter must return a <see cref="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Size"/> with positive width and height values.
            </para>
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PointSymbolizer.Scale">
            <summary>
            Gets or sets the scale 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Symbol">
            <summary>
            Gets or sets the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ImageAttributes">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.ImageAttributes"/> for rendering the <see cref="P:SharpMap.Rendering.Symbolizer.RasterPointSymbolizer.Symbol"/>
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Exceptions.RenderException">
            <summary>
            Exception thrown when a layer rendering fails
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SharpMap.Rendering.Exceptions.RenderException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when layer rendering has failed
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.PolygonalVectorLayer">
            <summary>
            A vector layer class that can symbolize polygonal geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layers's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layers's name</param>
            <param name="dataSource">The layers's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PolygonalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{SharpMap.Geometries.IPolygonal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer">
            <summary>
            Vector layer class than can symbolize any type of geometry
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="datasource">The layers's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.AnyGeometryVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.GeometrySymbolizer)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="datasource">The layers's datasource</param>
            <param name="symbolizer">The layers's symbolizer</param>
        </member>
        <member name="T:SharpMap.Layers.LayerGroup">
            <summary>
            Class for holding a group of layers.
            </summary>
            <remarks>
            The Group layer is useful for grouping a set of layers,
            for instance a set of image tiles, and expose them as a single layer
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.#ctor(System.String)">
            <summary>
            Initializes a new group layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Layers">
            <summary>
            Sublayers in the group
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.ConnectorPool">
            <summary>
            The ConnectorPool class implements the functionality for 
            the administration of the connectors. Controls pooling and
            sharing of connectors.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.ConnectorPoolManager">
            <summary>Unique static instance of the connector pool manager.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.PooledConnectors">
            <summary>List of unused, pooled connectors avaliable to the next RequestConnector() call.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.ConnectorPool.SharedConnectors">
            <summary>List of shared, in use connectors.</summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.#ctor">
            <summary>
            Default constructor, creates a new connector pool object.
            Should only be used once in an application, since more 
            than one connector pool does not make much sense..
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.ConnectorPool.RequestConnector(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Searches the shared and pooled connector lists for a
            matching connector object or creates a new one.
            </summary>
            <param name="provider">Provider requested to connect to the database server</param>
            <param name="Shared">Allows multiple connections on a single connector. </param>
            <returns>A pooled connector object.</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.Pooling.Connector">
            <summary>
            The Connector class implements the logic for the Connection 
            Objects to access the physical connection to the data source, and 
            isolate the application developer from connection pooling 
            internals.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InstanceCounter">
            <summary>Instance Counting</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._ShareCount">
            <summary>Counts the numbers of Connections that share
            this Connector. Used in Release() to decide wether this
            connector is to be moved to the PooledConnectors list.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector._Shared">
            <summary>Buffer for the public Shared property</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.InUse">
            <summary>True if the physical connection is in used 
            by a Connection Object. That is, if the connector is
            not contained in the PooledConnectors List.</summary>
        </member>
        <member name="F:SharpMap.Data.Providers.Pooling.Connector.Pooled">
            <summary>Buffer for the public Pooled property</summary>
            <remarks>Pooled will be ignored if Shared is set!</remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.#ctor(SharpMap.Data.Providers.IProvider,System.Boolean)">
            <summary>
            Construcor, initializes the Connector object.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.Pooling.Connector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Shared">
            <summary>Controls the physical connection sharing.</summary>
            <remarks>Can only be set via ConnectorPool.Request().</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.ShareCount">
            <summary>Share count, read only</summary>
            <remarks>!!! for debugging only</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.Pooling.Connector.Provider">
            <summary>
            Used to connect to the data source. 
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryProvider">
            <summary>
            Datasource for storing a limited set of geometries.
            </summary>
            <remarks>
            <para>The GeometryProvider doesn’t utilize performance optimizations of spatial indexing,
            and thus is primarily meant for rendering a limited set of Geometries.</para>
            <para>A common use of the GeometryProvider is for highlighting a set of selected features.</para>
            <example>
            The following example gets data within a BoundingBox of another datasource and adds it to the map.
            <code lang="C#">
            List&#60;Geometry&#62; geometries = myMap.Layers[0].DataSource.GetGeometriesInView(myBox);
            VectorLayer laySelected = new VectorLayer("Selected Features");
            laySelected.DataSource = new GeometryProvider(geometries);
            laySelected.Style.Outline = new Pen(Color.Magenta, 3f);
            laySelected.Style.EnableOutline = true;
            myMap.Layers.Add(laySelected);
            </code>
            </example>
            <example>
            Adding points of interest to the map. This is useful for vehicle tracking etc.
            <code lang="C#">
            List&#60;SharpMap.Geometries.Geometry&#62; geometries = new List&#60;SharpMap.Geometries.Geometry&#62;();
            //Add two points
            geometries.Add(new SharpMap.Geometries.Point(23.345,64.325));
            geometries.Add(new SharpMap.Geometries.Point(23.879,64.194));
            SharpMap.Layers.VectorLayer layerVehicles = new SharpMap.Layers.VectorLayer("Vechicles");
            layerVehicles.DataSource = new SharpMap.Data.Providers.GeometryProvider(geometries);
            layerVehicles.Style.Symbol = Bitmap.FromFile(@"C:\data\car.gif");
            myMap.Layers.Add(layerVehicles);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Collections.Generic.IList{SharpMap.Geometries.Geometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometries">Set of geometries that this datasource should contain</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="feature">Feature to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="features">Features to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Geometries.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="geometry">Geometry to be in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownBinaryGeometry"><see cref="T:SharpMap.Geometries.Geometry"/> as Well-known Binary to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownTextGeometry"><see cref="T:SharpMap.Geometries.Geometry"/> as Well-known Text to be included in this datasource</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns features within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns all objects whose boundingbox intersects 'bbox'.
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="box"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeature(System.UInt32)">
            <summary>
            Throws an NotSupportedException. Attribute data is not supported by this datasource
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.Geometries">
            <summary>
            Gets or sets the geometries this datasource contains
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The ConnectionID is meant for Connection Pooling which doesn't apply to this datasource. Instead
            <c>String.Empty</c> is returned.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wcs.Client._exceptionFormats">
            <summary>
            Gets a list of available exception mime type formats
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor">
            <summary>
            Just instantiate, no parameters
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32)">
            <summary>
            This Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="credentials">Credentials for autenticating against remote WMS-server</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.String,System.Net.IWebProxy,System.Int32,System.Net.ICredentials,System.String)">
            <summary>
            Initalizes WMS server and parses the Capabilities request
            </summary>
            <param name="url">URL of wms server</param>
            <param name="proxy">Proxy to use</param>
            <param name="timeOut">Web request timeout</param>
            <param name="version"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.#ctor(System.Byte[])">
            <summary>
            Hydrates Client object based on byte array version of XML document
            </summary>
            <param name="byteXml">byte array version of capabilities document</param>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.CreateCapabilitiesUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ParseCapabilities">
            <summary>
            Parses a GetCapabilities request from an XMLDoc
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.GetRemoteXml">
            <summary>
            Downloads servicedescription from WMS service  
            </summary>
            <returns>XmlDocument from Url. Null if Url is empty or inproper XmlDocument</returns>
        </member>
        <member name="M:SharpMap.Web.Wcs.Client.ParseExceptions(System.Xml.XmlNode)">
            <summary>
            Parses valid exceptions
            </summary>
            <param name="xnlExceptionNode"></param>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.VendorSpecificCapabilities">
            <summary>
            Exposes the capabilitie's VendorSpecificCapabilities as XmlNode object. External modules 
            could use this to parse the vendor specific capabilities for their specific purpose.
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Credentials">
            <summary>
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.BaseUrl">
            <summary>
            Gets or sets the base URL for the server without any OGC specific name=value pairs
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.CapabilitiesUrl">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.GetXmlAsText">
            <summary>
            Gets the entire XML document as text
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.GetXmlAsByteArray">
            <summary>
            Gets the entire XML document as byte[]
            </summary>
        </member>
        <member name="P:SharpMap.Web.Wcs.Client.Version">
            <summary>
            Gets the version of the WMS server (ex. "1.3.0")
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText">
            <summary>
            Scale bar label text
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.NoText">
            <summary>
            No text
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.JustUnits">
            <summary>
            Just units
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarLabelText.RepresentativeFraction">
            <summary>
            Representative fraction
            </summary>
        </member>
        <member name="T:SharpMap.Layers.TiledWmsLayer">
            <summary>
            Client layer for WMS-C service
            </summary>
            <remarks>
            Initialize the TiledWmsLayer with the url to the capabilities documtent
            and it will set the remaining BoundingBox property and proper requests that changes between the requests.
            See the example below.
            </remarks>
            <example>
            The following example creates a map with a TiledWmsLayer the metacarta tile server
            <code lang="C#">
            map = new SharpMap.Map(mapImage1.Size);
            string url = "http://labs.metacarta.com/wms-c/tilecache.py?version=1.1.1&amp;request=GetCapabilities&amp;service=wms-c";
            TiledWmsLayer tiledWmsLayer = new TiledWmsLayer("Metacarta", url);
            tiledWmsLayer.TileSetsActive.Add(tiledWmsLayer.TileSets["satellite"].Name);
            map.Layers.Add(tiledWmsLayer);
            map.ZoomToBox(new SharpMap.Geometries.BoundingBox(-180.0, -90.0, 180.0, 90.0));
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilties</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilties</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.Net.WebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilties</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.WebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server's Capabilties</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpMap.Layers.TiledWmsLayer.Render(System.Drawing.Graphics,SharpMap.Map)" -->
        <member name="M:SharpMap.Layers.TiledWmsLayer.AddCustomParameter(System.String,System.String)">
            <summary>
            Appends a custom parameter name-value pair to the WMS request
            </summary>
            <param name="name">Name of custom parameter</param>
            <param name="value">Value of custom parameter</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.RemoveCustomParameter(System.String)">
            <summary>
            Removes a custom paramter name-value pair from the WMS request
            </summary>
            <param name="name">Name of the custom parameter to remove</param>
        </member>
        <member name="M:SharpMap.Layers.TiledWmsLayer.RemoveAllCustomParameters">
            <summary>
            Removes all custom parameter from the WMS request
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Credentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Proxy">
            <summary>
            Gets or sets the proxy used for requesting a webresource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.TileSets">
            <summary>
            Gets the collection of TileSets that will be rendered
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip rendering the layer. 
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.OutputFormats">
            <summary>
            Gets the list of available formats
            </summary>
        </member>
        <member name="P:SharpMap.Layers.TiledWmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.LinealVectorLayer">
            <summary>
            A vector layer class that can symbolize lineal geometries
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.LinealVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{SharpMap.Geometries.ILineal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's datasource</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Geometries.SpatialRelations">
            <summary>
            Class defining a set of named spatial relationship operators for geometric shape objects.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Contains(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is wholly contained within the source geometry. This is the same as
            reversing the primary and comparison shapes of the Within operation.
            </summary>
            <param name="sourceGeometry"></param>
            <param name="otherGeometry"></param>
            <returns>True if otherGeometry is wholly contained within the source geometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Crosses(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the intersection of the two geometries results in a geometry whose dimension is less than
            the maximum dimension of the two geometries and the intersection geometry is not equal to either.
            geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Disjoint(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is disjoint from the source geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Equals(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if otherGeometry is of the same type and defines the same point set as the source geometry.
            </summary>
            <param name="g1">source geometry</param>
            <param name="g2">other Geometry</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Intersects(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if there is any intersection between the two geometries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Overlaps(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the intersection of the two geometries results in an object of the same dimension as the
            input geometries and the intersection geometry is not equal to either geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Touches(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the only points in common between the two geometries lie in the union of their boundaries.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.SpatialRelations.Within(SharpMap.Geometries.Geometry,SharpMap.Geometries.Geometry)">
            <summary>
            Returns true if the primary geometry is wholly contained within the comparison geometry.
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Data.Providers.OleDbPoint">
            <summary>
            The OleDbPoint provider is used for rendering point data from an OleDb compatible datasource.
            </summary>
            <remarks>
            <para>The data source will need to have two double-type columns, xColumn and yColumn that contains the coordinates of the point,
            and an integer-type column containing a unique identifier for each row.</para>
            <para>To get good performance, make sure you have applied indexes on ID, xColumn and yColumns in your datasource table.</para>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the OleDbPoint provider
            </summary>
            <param name="ConnectionStr"></param>
            <param name="tablename"></param>
            <param name="OID_ColumnName"></param>
            <param name="xColumn"></param>
            <param name="yColumn"></param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Throws NotSupportedException. 
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>Total number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.OleDbPoint.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.XColumn">
            <summary>
            Name of column that contains X coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.YColumn">
            <summary>
            Name of column that contains Y coordinate
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.OleDbPoint.SRID">
            <summary>
            The spatial reference ID (CRS)
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.MsSqlSpatial">
            <summary>
            Microsoft SQL Server 2005 / MsSqlSpatial dataprovider
            </summary>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = @"Data Source=localhost\sqlexpress;Initial Catalog=myGisDb;Integrated Security=SSPI;";
            myLayer.DataSource = new SharpMap.Data.Providers.MsSqlSpatial(ConnStr, "myTable", "myId");
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MsSqlSpatial
            </summary>
            <param name="connectionString">Connectionstring</param>
            <param name="tableName">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
            /// <param name="identifierColumnName">Name of column with unique identifier</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MsSqlSpatial
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
            <param name="OID_ColumnName">Name of column with unique identifier</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the features that intersects with 'geom'
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.QueryFeatures(SharpMap.Geometries.Geometry,System.Double)">
            <summary>
            Returns all objects within a distance of a geometry
            </summary>
            <param name="geom"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetGeometryColumn">
            <summary>
            Queries the MsSqlSpatial database to get the name of the Geometry Column. This is used if the columnname isn't specified in the constructor
            </summary>
            <remarks></remarks>
            <returns>Name of column containing geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSqlSpatial.GetFeaturesInView(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.GeometryColumn">
            <summary>
            Name of geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.GeometryExpression">
            <summary>
            Expression template for geometry column evaluation.
            </summary>
            <example>
            You could, for instance, simplify your geometries before they're displayed.
            Simplification helps to speed the rendering of big geometries.
            Here's a sample code to simplify geometries using 100 meters of threshold.
            <code>
            datasource.GeometryExpression = "ST.Simplify({0}, 100)";
            </code>
            Also you could draw a 20 meters buffer around those little points:
            <code>
            datasource.GeometryExpression = "ST.Buffer({0}, 20)";
            </code>
            </example>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.FeatureColumns">
            <summary>
            List of columns or T-SQL expressions separated by comma.
            Using "*" (the value by default), all columns are selected.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset (WHERE clause)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.OrderQuery">
            <summary>
            Columns or T-SQL expressions for sorting (ORDER BY clause)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.TargetSRID">
            <summary>
            The target spatial reference ID (SRID). 
            It allows on-the-fly transformations in the server-side.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.SRID">
            <summary>
            Spacial Reference ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSqlSpatial.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Tiling.TileCacheFileStorage">
            <summary>
            Very simple implemenation of ITileCache to demonstrate its functionality. It dumps all tiles als png's in a single directory.
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.#ctor(System.String)">
            <summary>
            This constructor creates the storage directory if it does not exist.
            </summary>
            <param name="directory">Directory where the tiles will be stored</param>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileCacheFileStorage.GenerateDirectoryPath(System.String,System.String)">
            <summary>
            Helper for convenience. Generates a directory path the Application Data directory 
            which could be used to store tiles.
            </summary>
            <param name="layerName">Name of the SharpMap layer</param>
            <param name="tileSetName">Name of the TileSet</param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Web.Wfs.Capabilities">
            <summary>
            Class for generating the WmsCapabilities Xml
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle">
            <summary>
            Defines a style used for rendering labels
            </summary>
        </member>
        <member name="T:SharpMap.Styles.Style">
            <summary>
            Defines a style used for for defining layer styles
            </summary>
        </member>
        <member name="T:SharpMap.Styles.IStyle">
            <summary>
            Defines an interface for defining layer styles
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.Enabled">
            <summary>
            Gets or sets whether objects in this style is rendered or not
            </summary>
        </member>
        <member name="M:SharpMap.Styles.Style.#ctor">
            <summary>
            Initializes a style as sets Min=0, Max=double.MaxValue and Visible=true
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.Enabled">
            <summary>
            Specified whether style is rendered or not
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new LabelStyle
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.GetStringFormat">
            <summary>
            Function to get a <see cref="T:System.Drawing.StringFormat"/> with <see cref="P:System.Drawing.StringFormat.Alignment"/> and <see cref="P:System.Drawing.StringFormat.LineAlignment"/> properties according to 
            <see cref="P:SharpMap.Styles.LabelStyle.HorizontalAlignment"/> and <see cref="P:SharpMap.Styles.LabelStyle.VerticalAlignment"/>
            </summary>
            <returns>A <see cref="T:System.Drawing.StringFormat"/></returns>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Font">
            <summary>
            Label Font
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.ForeColor">
            <summary>
            Font color
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.BackColor">
            <summary>
            The background color of the label. Set to transparent brush or null if background isn't needed
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Halo">
            <summary>
            Creates a halo around the text
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Offset">
            <summary>
            Specifies relative position of labels with respect to objects label point
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetection">
            <summary>
            Gets or sets whether Collision Detection is enabled for the labels.
            If set to true, label collision will be tested.
            </summary>
            <remarks>Just setting this property in a <see cref="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.FeatureDataRow)"/> method does not lead to the desired result. You must set it to for the whole layer using the default Style.</remarks>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionBuffer">
            <summary>
            Distance around label where collision buffer is active
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.HorizontalAlignment">
            <summary>
            The horisontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.VerticalAlignment">
            <summary>
            The horizontal alignment of the text in relation to the labelpoint
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Rotation">
            <summary>
            The Rotation of the text
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.IgnoreLength">
            <summary>
            Gets or sets if length of linestring should be ignored
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Left">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Right">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Bottom">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Top">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LabelStyle.VerticalAlignmentEnum.Middle">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer">
            <summary>
            Label layer class
            </summary>
            <example>
            Creates a new label layer and sets the label text to the "Name" column in the FeatureDataTable of the datasource
            <code lang="C#">
            //Set up a label layer
            SharpMap.Layers.LabelLayer layLabel = new SharpMap.Layers.LabelLayer("Country labels");
            layLabel.DataSource = layCountries.DataSource;
            layLabel.Enabled = true;
            layLabel.LabelColumn = "Name";
            layLabel.Style = new SharpMap.Styles.LabelStyle();
            layLabel.Style.CollisionDetection = true;
            layLabel.Style.CollisionBuffer = new SizeF(20, 20);
            layLabel.Style.ForeColor = Color.White;
            layLabel.Style.Font = new Font(FontFamily.GenericSerif, 8);
            layLabel.MaxVisible = 90;
            layLabel.Style.HorizontalAlignment = SharpMap.Styles.LabelStyle.HorizontalAlignmentEnum.Center;
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._labelColumn">
            <summary>
            Name of the column that holds the value for the label.
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._labelFilter">
            <summary>
            Delegate for custom Label Collision Detection
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._priority">
            <summary>
            A value indication the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer._priorityColumn">
            <summary>
            Name of the column that contains the value indicating the priority of the label in case of label-collision detection
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.#ctor(System.String)">
            <summary>
            Creates a new instance of a LabelLayer
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.PositiveLineString(SharpMap.Geometries.LineString,System.Boolean)">
            <summary>
            Very basic test to check for positve direction of Linestring
            </summary>
            <param name="line">The linestring to test</param>
            <param name="isRightToLeft">Value indicating whether labels are to be printed right to left</param>
            <returns>The positively directed linestring</returns>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.LineStringToPath(SharpMap.Geometries.LineString,SharpMap.Map)">
            <returns>A GraphicsPath</returns>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviour">
            <summary>
            Gets or sets labelling behavior on multipart geometries
            </summary>
            <remarks>Default value is <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All"/></remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelFilter">
            <summary>
            Filtermethod delegate for performing filtering
            </summary>
            <remarks>
            Default method is <see cref="M:SharpMap.Rendering.LabelCollisionDetection.SimpleCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})"/>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.TextRenderingHint">
            <summary>
            Specifies the quality of text rendering
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Style">
            <summary>
            Gets or sets the rendering style of the label layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelColumn">
            <summary>
            Data column or expression where label text is extracted from.
            </summary>
            <remarks>
            This property is overriden by the <see cref="P:SharpMap.Layers.LabelLayer.LabelStringDelegate"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelStringDelegate">
            <summary>
            Gets or sets the method for creating a custom label string based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the <see cref="P:SharpMap.Layers.LabelLayer.LabelColumn"/> value.</para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return a string.</para>
            <example>
            Creating a label-text by combining attributes "ROADNAME" and "STATE" into one string, using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.LabelStringDelegate = delegate(SharpMap.Data.FeatureDataRow fdr)
            			{ return fdr["ROADNAME"].ToString() + ", " + fdr["STATE"].ToString(); };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.LabelPositionDelegate">
            <summary>
            Gets or sets the method for creating a custom position based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the position based on the centroid of the boundingbox of the feature </para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return a SharpMap.Geometries.Point.</para>
            <para>If the delegate returns a null, the centroid of the feature will be used</para>
            <example>
            Creating a custom position by using X and Y values from the FeatureDataRow attributes "LabelX" and "LabelY", using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.LabelPositionDelegate = delegate(SharpMap.Data.FeatureDataRow fdr)
            			{ return new SharpMap.Geometries.Point(Convert.ToDouble(fdr["LabelX"]), Convert.ToDouble(fdr["LabelY"]));};
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.PriorityDelegate">
            <summary>
            Gets or sets the method for calculating the render priority of a label based on a feature.
            </summary>
            <remarks>
            <para>If this method is not null, it will override the <see cref="P:SharpMap.Layers.LabelLayer.PriorityColumn"/> value.</para>
            <para>The label delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an Int32.</para>
            <example>
            Creating a priority by combining attributes "capital" and "population" into one value, using
            an anonymous delegate:
            <code lang="C#">
            myLabelLayer.PriorityDelegate = delegate(SharpMap.Data.FeatureDataRow fdr) 
                { 
                    Int32 retVal = 100000000 * (Int32)( (String)fdr["capital"] == "Y" ? 1 : 0 );
                    return  retVal + Convert.ToInt32(fdr["population"]);
                };
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.RotationColumn">
            <summary>
            Data column from where the label rotation is derived.
            If this is empty, rotation will be zero, or aligned to a linestring.
            Rotation are in degrees (positive = clockwise).
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Priority">
            <summary>
            A value indication the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.PriorityColumn">
            <summary>
            Name of the column that holds the value indicating the priority of the label in cases of label-collision detection
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Envelope">
            <summary>
            Gets the boundingbox of the entire layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetLabelMethod">
            <summary>
            Delegate method for creating advanced label texts
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to build the label for</param>
            <returns>the label</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetPriorityMethod">
            <summary>
            Delegate method for calculating the priority of label rendering
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to compute the priority value from</param>
            <returns>the priority value</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GetLocationMethod">
            <summary>
            Delegate method for advanced placement of the label position
            </summary>
            <param name="fdr">the <see cref="T:SharpMap.Data.FeatureDataRow"/> to compute the label position from</param>
            <returns>the priority value</returns>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum">
            <summary>
            Labelling behaviour for Multipart geometry collections
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.All">
            <summary>
            Place label on all parts (default)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.Largest">
            <summary>
            Place label on object which the greatest length or area.
            </summary>
            <remarks>
            Multipoint geometries will default to <see cref="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First"/>
            </remarks>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.CommonCenter">
            <summary>
            The center of the combined geometries
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LabelLayer.MultipartGeometryBehaviourEnum.First">
            <summary>
            Center of the first geometry in the collection (fastest method)
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.Polygon">
            <summary>
            A Polygon is a planar Surface, defined by 1 exterior boundary and 0 or more interior boundaries. Each
            interior boundary defines a hole in the Polygon.
            </summary>
            <remarks>
            Vertices of rings defining holes in polygons are in the opposite direction of the exterior ring.
            </remarks>
        </member>
        <member name="T:SharpMap.Geometries.Surface">
            <summary>
            A Surface is a two-dimensional geometric object.
            </summary>
            <remarks>
            The OpenGIS Abstract Specification defines a simple Surface as consisting of a single ‘patch’ that is
            associated with one ‘exterior boundary’ and 0 or more ‘interior’ boundaries. Simple surfaces in threedimensional
            space are isomorphic to planar surfaces. Polyhedral surfaces are formed by ‘stitching’ together
            simple surfaces along their boundaries, polyhedral surfaces in three-dimensional space may not be planar as
            a whole.
            </remarks>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Surface.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal
             to the coordinate dimension. This specification is restricted to geometries in two-dimensional coordinate
             space.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing,System.Collections.Generic.IList{SharpMap.Geometries.LinearRing})">
            <summary>
            Instatiates a polygon based on one extorier ring and a collection of interior rings.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
            <param name="interiorRings">Interior rings</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor(SharpMap.Geometries.LinearRing)">
            <summary>
            Instatiates a polygon based on one extorier ring.
            </summary>
            <param name="exteriorRing">Exterior ring</param>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.#ctor">
            <summary>
            Instatiates a polygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.InteriorRing(System.Int32)">
            <summary>
            Returns the Nth interior ring for this Polygon as a LineString
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.TransformToImage(SharpMap.Map)">
            <summary>
            Transforms the polygon to image coordinates, based on the map
            </summary>
            <param name="map">Map to base coordinates on</param>
            <returns>Polygon in image coordinates</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Equals(SharpMap.Geometries.Polygon)">
            <summary>
            Determines if this Polygon and the specified Polygon object has the same values
            </summary>
            <param name="p">Polygon to compare with</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:SharpMap.Geometries.Polygon.GetHashCode"/> is suitable for use 
            in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="M:SharpMap.Geometries.Polygon.GetHashCode"/>.</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.IsSimple">
            <summary>
            Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.Polygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.ExteriorRing">
            <summary>
            Gets or sets the exterior ring of this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.InteriorRings">
            <summary>
            Gets or sets the interior rings of this Polygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.NumInteriorRing">
            <summary>
            Returns the number of interior rings in this Polygon
            </summary>
            <remarks>This method is supplied as part of the OpenGIS Simple Features Specification</remarks>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Area">
            <summary>
            The area of this Surface, as measured in the spatial reference system of this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.Centroid">
            <summary>
            The mathematical centroid for this Surface as a Point.
            The result is not guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.Polygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.IUndefined">
            <summary>
            Interface for all classes that represent geometries
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeType">
            <summary>
            Shapefile geometry type.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Null">
            <summary>
            Null shape with no geometric data
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Point">
            <summary>
            A point consists of a pair of double-precision coordinates.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLine">
            <summary>
            PolyLine is an ordered set of vertices that consists of one or more parts. A part is a
            connected sequence of two or more points. Parts may or may not be connected to one
            another. Parts may or may not intersect one another.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Polygon">
            <summary>
            A polygon consists of one or more rings. A ring is a connected sequence of four or more
            points that form a closed, non-self-intersecting loop. A polygon may contain multiple
            outer rings. The order of vertices or orientation for a ring indicates which side of the ring
            is the interior of the polygon. The neighborhood to the right of an observer walking along
            the ring in vertex order is the neighborhood inside the polygon. Vertices of rings defining
            holes in polygons are in a counterclockwise direction. Vertices for a single, ringed
            polygon are, therefore, always in clockwise order. The rings of a polygon are referred to
            as its parts.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.Multipoint">
            <summary>
            A MultiPoint represents a set of points.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointZ">
            <summary>
            A PointZ consists of a triplet of double-precision coordinates plus a measure.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineZ">
            <summary>
            A PolyLineZ consists of one or more parts. A part is a connected sequence of two or
            more points. Parts may or may not be connected to one another. Parts may or may not
            intersect one another.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonZ">
            <summary>
            A PolygonZ consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            A PolygonZ may contain multiple outer rings. The rings of a PolygonZ are referred to as
            its parts.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointZ">
            <summary>
            A MultiPointZ represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointZ"/>s.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PointM">
            <summary>
            A PointM consists of a pair of double-precision coordinates in the order X, Y, plus a measure M.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.Point"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolyLineM">
            <summary>
            A shapefile PolyLineM consists of one or more parts. A part is a connected sequence of
            two or more points. Parts may or may not be connected to one another. Parts may or may
            not intersect one another.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.LineString"/> or <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.PolygonM">
            <summary>
            A PolygonM consists of a number of rings. A ring is a closed, non-self-intersecting loop.
            SharpMap interpretes this as either <see cref="T:SharpMap.Geometries.Polygon"/> or <see cref="T:SharpMap.Geometries.MultiPolygon"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPointM">
            <summary>
            A MultiPointM represents a set of <see cref="F:SharpMap.Data.Providers.ShapeType.PointM"/>s.
            SharpMap interpretes this as <see cref="T:SharpMap.Geometries.MultiPoint"/>
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeType.MultiPatch">
            <summary>
            A MultiPatch consists of a number of surface patches. Each surface patch describes a
            surface. The surface patches of a MultiPatch are referred to as its parts, and the type of
            part controls how the order of vertices of an MultiPatch part is interpreted.
            SharpMap doesn't support this feature type.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile">
            <summary>
            Shapefile dataprovider
            </summary>
            <remarks>
            <para>The ShapeFile provider is used for accessing ESRI ShapeFiles. The ShapeFile should at least contain the
            [filename].shp, [filename].idx, and if feature-data is to be used, also [filename].dbf file.</para>
            <para>The first time the ShapeFile is accessed, SharpMap will automatically create a spatial index
            of the shp-file, and save it as [filename].shp.sidx. If you change or update the contents of the .shp file,
            delete the .sidx file to force SharpMap to rebuilt it. In web applications, the index will automatically
            be cached to memory for faster access, so to reload the index, you will need to restart the web application
            as well.</para>
            <para>
            M and Z values in a shapefile is ignored by SharpMap.
            </para>
            </remarks>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            myLayer.DataSource = new SharpMap.Data.Providers.ShapeFile(@"C:\data\MyShapeData.shp");
            </code>
            </example>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile._tree">
            <summary>
            Tree used for fast query of data
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String)">
            <summary>
            Initializes a ShapeFile DataProvider without a file-based spatial index.
            </summary>
            <param name="filename">Path to shape file</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CleanInternalCache(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Cleans the internal memory cached, expurging the objects that are not in the viewarea anymore
            </summary>
            <param name="objectlist">OID of the objects in the current viewarea</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a ShapeFile DataProvider.
            </summary>
            <remarks>
            <para>If FileBasedIndex is true, the spatial index will be read from a local copy. If it doesn't exist,
            it will be generated and saved to [filename] + '.sidx'.</para>
            <para>Using a file-based index is especially recommended for ASP.NET applications which will speed up
            start-up time when the cache has been emptied.
            </para>
            </remarks>
            <param name="filename">Path to shape file</param>
            <param name="fileBasedIndex">Use file-based spatial index</param>
            <param name="useMemoryCache">Use the memory cache. BEWARE in case of large shapefiles</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Finalize">
            <summary>
            Finalizes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries whose bounding box intersects 'bbox'
            </summary>
            <remarks>
            <para>Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.</para>
            <para>This method is much faster than the QueryFeatures method, because intersection tests
            are performed on objects simplifed by their boundingbox, and using the Spatial Index.</para>
            </remarks>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all objects whose boundingbox intersects bbox.
            </summary>
            <remarks>
            <para>
            Please note that this method doesn't guarantee that the geometries returned actually intersect 'bbox', but only
            that their boundingbox intersects 'bbox'.
            </para>
            </remarks>
            <param name="bbox"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'.
            Please note that the ShapeFile provider currently doesn't fully support geometryintersection
            and thus only BoundingBox/BoundingBox querying are performed. The results are NOT
            guaranteed to lie withing 'geom'.
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeatureCount">
            <summary>
            Returns the total number of features in the datasource (without any filter applied)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32)">
            <summary>
            Gets a datarow from the datasource at the specified index
            </summary>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetExtents">
            <summary>
            Returns the extents of the datasource
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseHeader">
            <summary>
            Reads and parses the header of the .shp index file
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ParseProjection">
            <summary>
            Reads and parses the projection if a projection file exists
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.PopulateIndexes">
            <summary>
            If an index file is present (.shx) it reads the record offsets from the .shx index file and returns the information in an array.
            IfF an indexd array is not present it works out the indexes from the data file, by going through the record headers, finding the
            data lengths and workingout the offsets. Which ever method is used a array of index is popuated to be use by the other methods.
            This array is created when the open method is called, and removed when the close method called.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.SwapByteOrder(System.Int32)">
            <summary>
            Swaps the byte order of an int32
            </summary>
             <param name="i">Integer to swap</param>
             <returns>Byte Order swapped int32</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndexFromFile(System.String)">
            <summary>
            Loads a spatial index from a file. If it doesn't exist, one is created and saved
            </summary>
            <param name="filename"></param>
            <returns>QuadTree index</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndexLinear(System.String)">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.CreateSpatialIndexRecursive(System.String)">
            <summary>
            Generates a spatial index for a specified shape file.
            </summary>
            <param name="filename">The filename</param>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.RebuildSpatialIndex">
            <summary>
            Forces a rebuild of the spatial index. If the instance of the ShapeFile provider
            uses a file-based index the file is rewritten to disk.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetAllFeatureBoundingBoxes">
            <summary>
            Reads all boundingboxes of features in the shapefile. This is used for spatial indexing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.ReadGeometry(System.UInt32)">
            <summary>
            Reads and parses the geometry with ID 'oid' from the ShapeFile
            </summary>
            <remarks><see cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate">Filtering</see> is not applied to this method</remarks>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.ShapeFile.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets a datarow from the datasource at the specified index belonging to the specified datatable
            </summary>
            <param name="rowId"></param>
            <param name="dt">Datatable to feature should belong to.</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.CoordinateSystem">
            <summary>
            Gets or sets the coordinate system of the ShapeFile. If a shapefile has 
            a corresponding [filename].prj file containing a Well-Known Text 
            description of the coordinate system this will automatically be read.
            If this is not the case, the coordinate system will default to null.
            </summary>
            <exception cref="T:System.ApplicationException">An exception is thrown if the coordinate system is read from file.</exception>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ShapeType">
            <summary>
            Gets the <see cref="T:SharpMap.Data.Providers.ShapeType">shape geometry type</see> in this shapefile.
            </summary>
            <remarks>
            The property isn't set until the first time the datasource has been opened,
            and will throw an exception if this property has been called since initialization. 
            <para>All the non-Null shapes in a shapefile are required to be of the same shape
            type.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Filename">
            <summary>
            Gets or sets the filename of the shapefile
            </summary>
            <remarks>If the filename changes, indexes will be rebuilt</remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.Encoding">
            <summary>
            Gets or sets the encoding used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            The DBase default encoding is <see cref="P:System.Text.Encoding.UTF7"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate">
            <summary>
            Filter Delegate Method for limiting the datasource
            </summary>
            <remarks>
            <example>
            Using an anonymous method for filtering all features where the NAME column starts with S:
            <code lang="C#">
            myShapeDataSource.FilterDelegate = new SharpMap.Data.Providers.ShapeFile.FilterMethod(delegate(SharpMap.Data.FeatureDataRow row) { return (!row["NAME"].ToString().StartsWith("S")); });
            </code>
            </example>
            <example>
            Declaring a delegate method for filtering (multi)polygon-features whose area is larger than 5.
            <code>
            myShapeDataSource.FilterDelegate = CountryFilter;
            [...]
            public static bool CountryFilter(SharpMap.Data.FeatureDataRow row)
            {
            	if(row.Geometry.GetType()==typeof(SharpMap.Geometries.Polygon))
            		return ((row.Geometry as SharpMap.Geometries.Polygon).Area&gt;5);
            	if (row.Geometry.GetType() == typeof(SharpMap.Geometries.MultiPolygon))
            		return ((row.Geometry as SharpMap.Geometries.MultiPolygon).Area &gt; 5);
            	else return true;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Data.Providers.ShapeFile.FilterMethod"/>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>		
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
            <remarks>
            The connection ID of a shapefile is its filename
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SRID">
            <summary>
            Gets or sets the spatial reference ID (CRS)
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreationOption">
            <summary>
            The Spatial index create
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile.FilterMethod">
            <summary>
            Filter Delegate Method
            </summary>
            <remarks>
            The FilterMethod delegate is used for applying a method that filters data from the dataset.
            The method should return 'true' if the feature should be included and false if not.
            <para>See the <see cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate"/> property for more info</para>
            </remarks>
            <seealso cref="P:SharpMap.Data.Providers.ShapeFile.FilterDelegate"/>
            <param name="dr"><see cref="T:SharpMap.Data.FeatureDataRow"/> to test on</param>
            <returns>true if this feature should be included, false if it should be filtered</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation">
            <summary>
            Options to create the <see cref="T:SharpMap.Utilities.SpatialIndexing.QuadTree"/> spatial index
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation.Recursive">
            <summary>
            Loads all the bounding boxes in builds the QuadTree from the list of nodes.
            This is memory expensive!
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.ShapeFile.SpatialIndexCreation.Linear">
            <summary>
            Creates a root node by the bounds of the ShapeFile and adds each node one-by-one-
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileExtents.GetTileExtents(SharpMap.Web.Wms.Tiling.TileSet,SharpMap.Geometries.BoundingBox,System.Double)">
            <summary>
            Returns a List of the tile BoundingBoxes which cover the complete area of the map BoundingBox 
            </summary>
            <param name="tileSet">The TileSet that provides the tiles</param>
            <param name="extent">The BoundingBox of the map</param>
            <param name="mapResolution">The resolution of the map</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileExtents.CheckForBounds(SharpMap.Geometries.BoundingBox,SharpMap.Geometries.BoundingBox)">
            <summary>
            Checks if the tile with given extent is within the bounds given by
            the TileSet BoundingBox. It is not a normal Within operation however
            because the extent can be partially outside to the top right but not 
            outside of the bottom left. That is how it is defined in WMS-C.
            </summary>
            <returns>Returns true if the tile with this extent is part of the tile collection on the server</returns>
        </member>
        <member name="T:SharpMap.Web.HttpHandler">
            <summary>
            HttpHandler class for web applications
            </summary>
        </member>
        <member name="M:SharpMap.Web.HttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Returns the requested image in an http imagestream
            </summary>
            <param name="context">HttpContext</param>
        </member>
        <member name="P:SharpMap.Web.HttpHandler.IsReusable">
            <summary>
            Enable Http pooling
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IFilter">
            <summary>
            Filter interface
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterCollection">
            <summary>
            This class hosts a collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.OGCFilterCollection"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.AddFilter(SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method adds an instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.AddFilterCollection(SharpMap.Utilities.Wfs.OGCFilterCollection)">
            <summary>
            This method adds an instance of <see cref="T:SharpMap.Utilities.Wfs.OGCFilterCollection"/>.
            </summary>
            <param name="filterCollection"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterCollection.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.OGCFilterCollection.Filters">
            <summary>
            Gets and sets a collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.OGCFilterCollection.Junctor">
            <summary>
            Gets and sets the operator for combining the filters.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterCollection.JunctorEnum">
            <summary>
            This enumeration consists of expressions denoting FE logical operators.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.OGCFilterBase">
            <summary>
            This class is the base class of all filters.
            It stores the filter arguments.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.OGCFilterBase.#ctor(System.String[])">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="args">An array of arguments for the filter</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsNotEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNotEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLessThanFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsGreaterThanFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLessThanOrEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLessThanOrEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsGreaterThanOrEqualToFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsGreaterThanOrEqualToFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsBetweenFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsBetweenFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsLikeFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsLikeFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC FeatureIdFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.FeatureIdFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0">
            <summary>
            This class provides an interface for creating an OGC PropertyIsNullFilter Version 1.1.0.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PropertyIsNullFilter_FE1_1_0.Encode">
            <summary>
            This method encodes the filter in XML.
            </summary>
            <returns>An XML string</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.IWFS_TextResources">
            <summary>
            Text resources interface
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor(System.String,System.String,System.String,System.String,System.String,SharpMap.Utilities.Wfs.GeometryTypeEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="geometryName">
            The geometry name is the property of the featuretype from which geometry information can be obtained from.
            Usually this property is called something like 'Shape' or 'geom'. It is absolutely necessary to give this parameter. 
            </param>
            <param name="geometryType">
            Specifying the geometry type helps to accelerate the rendering process.   
            </param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
            <param name="nsPrefix">
            Use an empty string or 'null', if there is no prefix for the featuretype.
            </param>
            <param name="featureTypeNamespace">
            Use an empty string or 'null', if there is no namespace for the featuretype.
            You don't need to know the namespace of the feature type, if you use the quick geometries option.
            </param>
            <param name="geometryName">
            The geometry name is the property of the featuretype from which geometry information can be obtained from.
            Usually this property is called something like 'Shape' or 'geom'. It is absolutely necessary to give this parameter. 
            </param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> class.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Name">
            <summary>
            Gets or sets the name of the featuretype.
            This argument is obligatory for data retrieving.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Prefix">
            <summary>
            Gets or sets the prefix of the featuretype and it's nested elements.
            This argument is obligatory for data retrieving, if the featuretype is declared with a 
            prefix in 'GetCapabilities'.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.FeatureTypeNamespace">
            <summary>
            Gets or sets the featuretype namespace.
            This argument is obligatory for data retrieving, except when using the quick geometries option.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.QualifiedName">
            <summary>
            Gets the qualified name of the featuretype (with namespace URI).
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.ServiceURI">
            <summary>
            Gets or sets the service URI for WFS 'GetFeature' request.
            This argument is obligatory for data retrieving.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Geometry">
            <summary>
            Gets or sets information about the geometry of the featuretype.
            Setting at least the geometry name is obligatory for data retrieving.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BBox">
            <summary>
            Gets or sets the spatial extent of the featuretype - defined as minimum bounding rectangle. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.SRID">
            <summary>
            Gets or sets the spatial reference ID
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.DecimalDel">
            <summary>
            Decimal separator (for gml:coordinates)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Cs">
            <summary>
            Separator for coordinate values (for gml:coordinates)
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.Ts">
            <summary>
            Tuple separator (for gml:coordinates)
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.BoundingBox">
            <summary>
            The bounding box defines the spatial extent of a featuretype.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo.GeometryInfo">
            <summary>
            The geometry info comprises the name of the geometry attribute (e.g. 'Shape" or 'geom')
            and the type of the featuretype's geometry.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer">
            <summary>
             Symbolizer class that renders custom symbols made up of custom paths
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateCircle(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders circles.
            </summary>
            <param name="line">The pen to outline the circle</param>
            <param name="fill">the brush to fill the circle</param>
            <param name="size">The size of the circle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateEllipse(System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders ellipses.
            </summary>
            <param name="line">The pen to outline the ellipse</param>
            <param name="fill">the brush to fill the ellipse</param>
            <param name="a">The x-axis radius of the ellipse</param>
            <param name="b">The x-axis radius of the ellipse</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateRectangle(System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders rectangles.
            </summary>
            <param name="line">The pen to outline the rectangle</param>
            <param name="fill">the brush to fill the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateSquare(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders squares.
            </summary>
            <param name="line">The pen to outline the square</param>
            <param name="fill">the brush to fill the square</param>
            <param name="size">The size of the square</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.CreateTriangle(System.Drawing.Pen,System.Drawing.Brush,System.Single)">
            <summary>
             Creates a <see cref="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer"/> that renders bottom-down-triangless.
            </summary>
            <param name="line">The pen to outline the triangle</param>
            <param name="fill">the brush to fill the triangle</param>
            <param name="size">The size of the triangle</param>
            <returns>The PathPointSymbolizer object</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.#ctor(SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition[])">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="paths"></param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition">
            <summary>
            Path definition class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to draw the path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> to fill the path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PathPointSymbolizer.PathDefinition.Path">
            <summary>
            The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to be drawn and/or filled
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ILineSymbolizeHandler">
            <summary>
            Interface for all classes providing Line symbolization handling routine
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ILineSymbolizeHandler.SymbolizePaths(System.Drawing.Graphics,System.Collections.Generic.IEnumerable{System.Drawing.Drawing2D.GraphicsPath})">
            <summary>
            Function to symbolize the graphics path to the graphics object
            </summary>
            <param name="g">The graphics object</param>
            <param name="path">The Path</param>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler">
            <summary>
            Line symbolize helper class that plainly draws a line.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PlainLineSymbolizeHandler.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to use
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander">
            <summary>
            Class that symbolizes a path by warping a <see cref="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Pattern"/> to the provided graphics path.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Line">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> to draw the graphics path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> to fill the graphics path
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizeHander.Pattern">
            <summary>
            The pattern to warp.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer">
            <summary>
            A Line symbolizer that creates <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>objects in the <see cref="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.OnRenderInternal(SharpMap.Map,SharpMap.Geometries.LineString,System.Drawing.Graphics)"/> function.
            These graphic paths are symbolized in subsequent symbolize calls.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.OnRenderInternal(SharpMap.Map,SharpMap.Geometries.LineString,System.Drawing.Graphics)">
            <summary>
            Function that actually renders the linestring
            </summary>
            <param name="map"></param>
            <param name="lineString"></param>
            <param name="g"></param>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Begin(System.Drawing.Graphics,SharpMap.Map,System.Int32)">
            <summary>
            Method to indicate that the symbolizer has to be prepared.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Symbolize(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Method to indicate that the symbolizer should do its symbolizer work.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.End(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Method to indicate that the symbolizers work is done and it can clean up.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CachedLineSymbolizer.Paths">
            <summary>
            The cached path
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer">
            <summary>
            Basic polygon symbolizer
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PolygonSymbolizer">
            <summary>
            Base class for all geometry symbolizers
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.IPolygonSymbolizer">
            <summary>
            Interface for classes that can symbolize polygons
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.Fill">
            <summary>
            Gets or sets the brush to fill the polygon
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.RenderOrigin">
            <summary>
            The render origin for brushes (Texture, Gradient, ...)
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizer.UseClipping">
            <summary>
            Gets or sets if polygons should be clipped or not.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.BasicPolygonSymbolizer.Outline">
            <summary>
            Gets or sets the pen to render the outline of the polygon
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer">
            <summary>
            Polygon symbolizer class that uses <see cref="T:SharpMap.Rendering.Symbolizer.LineSymbolizer"/> to symbolize the outline
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.PolygonSymbolizerUsingLineSymbolizer.Outline">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Symbolizer.LineSymbolizer"/> to draw the outline of the polygon
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme">
            <summary>
            The CustomTheme class is used for defining your own thematic rendering by using a custom get-style-delegate.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.#ctor(SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Rendering.Thematics.CustomTheme"/> class
            </summary>
            <param name="getStyleMethod"></param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the <see cref="T:System.Drawing.Color">color</see> based on an attribute value
            </summary>
            <param name="row">DataRow</param>
            <returns>Style generated by GetStyle-Delegate</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.DefaultStyle">
            <summary>
            Gets or sets the default style when an attribute isn't found in any bucket
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate">
            <summary>
            Gets or sets the style delegate used for determining the style of a feature
            </summary>
            <remarks>
            The delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <example>
            The example below creates a delegate that can be used for assigning the rendering of a road theme. If the road-class
            is larger than '3', it will be rendered using a thick red line.
            <code lang="C#">
            private static SharpMap.Styles.VectorStyle GetRoadStyle(SharpMap.Data.FeatureDataRow row)
            {
            	SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            	if(((int)row["RoadClass"])&gt;3)
            		style.Line = new Pen(Color.Red,5f);
            	else
            		style.Line = new Pen(Color.Black,1f);
            	return style;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod"/>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod">
            <summary>
            Custom Style Delegate method
            </summary>
            <remarks>
            The GetStyle delegate is used for determining the style of a feature using the <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate"/> property.
            The method must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <para>
            <example>
            The following example can used for highlighting all features where the attribute "NAME" starts with "S".
            <code lang="C#">
            SharpMap.Rendering.Thematics.CustomTheme iTheme = new SharpMap.Rendering.Thematics.CustomTheme(GetCustomStyle);
            SharpMap.Styles.VectorStyle defaultstyle = new SharpMap.Styles.VectorStyle(); //Create default renderstyle
            defaultstyle.Fill = Brushes.Gray;
            iTheme.DefaultStyle = defaultstyle;
            
            [...]
            
            //Set up delegate for determining fill-color.
            //Delegate will fill all objects with a yellow color where the attribute "NAME" starts with "S".
            private static SharpMap.Styles.VectorStyle GetCustomStyle(SharpMap.Data.FeatureDataRow row)
            {
            
            	if (row["NAME"].ToString().StartsWith("S"))
            	{
            		SharpMap.Styles.VectorStyle style = new SharpMap.Styles.VectorStyle();
            		style.Fill = Brushes.Yellow;
            		return style;
            	}
            	else
            		return null; //Return null which will render the default style
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="dr">Feature</param>
            <returns>Style to be applied to feature</returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ColorBlend">
            <summary>
            Defines arrays of colors and positions used for interpolating color blending in a multicolor gradient.
            </summary>
            <seealso cref="T:SharpMap.Rendering.Thematics.GradientTheme"/>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.#ctor(System.Drawing.Color[],System.Single[])">
            <summary>
            Initializes a new instance of the ColorBlend class.
            </summary>
            <param name="colors">An array of Color structures that represents the colors to use at corresponding positions along a gradient.</param>
            <param name="positions">An array of values that specify percentages of distance along the gradient line.</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.GetColor(System.Single)">
            <summary>
            Gets the color from the scale at position 'pos'.
            </summary>
            <remarks>If the position is outside the scale [0..1] only the fractional part
            is used (in other words the scale restarts for each integer-part).</remarks>
            <param name="pos">Position on scale between 0.0f and 1.0f</param>
            <returns>Color on scale</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ToBrush(System.Drawing.Rectangle,System.Single)">
            <summary>
            Converts the color blend to a gradient brush
            </summary>
            <param name="rectangle"></param>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.TwoColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from two colors
            </summary>
            <param name="fromColor"></param>
            <param name="toColor"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ColorBlend.ThreeColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a linear gradient scale from three colors
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Colors">
            <summary>
            Gets or sets an array of colors that represents the colors to use at corresponding positions along a gradient.
            </summary>
            <value>An array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions along a gradient.</value>
            <remarks>
            This property is an array of <see cref="T:System.Drawing.Color"/> structures that represents the colors to use at corresponding positions
            along a gradient. Along with the Positions property, this property defines a multicolor gradient.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Positions">
            <summary>
            Gets or sets the positions along a gradient line.
            </summary>
            <value>An array of values that specify percentages of distance along the gradient line.</value>
            <remarks>
            <para>The elements of this array specify percentages of distance along the gradient line.
            For example, an element value of 0.2f specifies that this point is 20 percent of the total
            distance from the starting point. The elements in this array are represented by float
            values between 0.0f and 1.0f, and the first element of the array must be 0.0f and the
            last element must be 1.0f.</para>
            <pre>Along with the Colors property, this property defines a multicolor gradient.</pre>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow7">
            <summary>
            Gets a linear gradient scale with seven colours making a rainbow from red to violet.
            </summary>
            <remarks>
            Colors span the following with an interval of 1/6:
            { Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Blue, Color.Indigo, Color.Violet }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.Rainbow5">
            <summary>
            Gets a linear gradient scale with five colours making a rainbow from red to blue.
            </summary>
            <remarks>
            Colors span the following with an interval of 0.25:
            { Color.Red, Color.Yellow, Color.Green, Color.Cyan, Color.Blue }
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlackToWhite">
            <summary>
            Gets a linear gradient scale from black to white
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.WhiteToBlack">
            <summary>
            Gets a linear gradient scale from white to black
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToGreen">
            <summary>
            Gets a linear gradient scale from red to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToRed">
            <summary>
            Gets a linear gradient scale from green to red
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToGreen">
            <summary>
            Gets a linear gradient scale from blue to green
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.GreenToBlue">
            <summary>
            Gets a linear gradient scale from green to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.RedToBlue">
            <summary>
            Gets a linear gradient scale from red to blue
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.ColorBlend.BlueToRed">
            <summary>
            Gets a linear gradient scale from blue to red
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.CGAlgorithms">
            <summary>
            Specifies and implements various fundamental Computational Geometric algorithms.
            The algorithms supplied in this class are robust for double-precision floating point.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.Clockwise">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.Right">
            <summary> 
            A value that indicates an orientation of clockwise, or a right turn.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.CounterClockwise">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.Left">
            <summary>
            A value that indicates an orientation of counterclockwise, or a left turn.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.Collinear">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.CGAlgorithms.Straight">
            <summary>
            A value that indicates an orientation of collinear, or no turn (straight).
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.ClosestPoint(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary> 
            Computes the closest point on this line segment to another point.
            </summary>
            <param name="p">The point to find the closest point to.</param>
            <returns>
            A Coordinate which is the closest point on the line segment to the point p.
            </returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.Project(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary> 
            Compute the projection of a point onto the line determined
            by this line segment.
            Note that the projected point  may lie outside the line segment.  
            If this is the case,  the projection factor will lie outside the range [0.0, 1.0].
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.ProjectionFactor(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Compute the projection factor for the projection of the point p
            onto this <c>LineSegment</c>. The projection factor is the constant k
            by which the vector for this segment must be multiplied to
            equal the vector for the projection of p.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.DistancePointLine(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary> 
            Computes the distance from a point p to a line segment AB.
            Note: NON-ROBUST!
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns> The distance from p to line segment AB.</returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.DistancePointLinePerpendicular(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary> 
            Computes the perpendicular distance from a point p
            to the (infinite) line containing the points AB
            </summary>
            <param name="p">The point to compute the distance for.</param>
            <param name="A">One point of the line.</param>
            <param name="B">Another point of the line (must be different to A).</param>
            <returns>The perpendicular distance from p to line AB.</returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.DistanceLineLine(SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary> 
            Computes the distance from a line segment AB to a line segment CD.
            Note: NON-ROBUST!
            </summary>
            <param name="A">A point of one line.</param>
            <param name="B">The second point of the line (must be different to A).</param>
            <param name="C">One point of the line.</param>
            <param name="D">Another point of the line (must be different to A).</param>
            <returns>The distance from line segment AB to line segment CD.</returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.SignedArea(SharpMap.Geometries.Point[])">
            <summary>
            Returns the signed area for a ring.  The area is positive ifthe ring is oriented CW.
            </summary>
            <param name="ring"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.CGAlgorithms.Length(System.Collections.Generic.IList{SharpMap.Geometries.Point})">
            <summary> 
            Computes the length of a linestring specified by a sequence of points.
            </summary>
            <param name="pts">The points specifying the linestring.</param>
            <returns>The length of the linestring.</returns>
        </member>
        <member name="T:SharpMap.Styles.VectorStyle">
            <summary>
            Defines a style used for rendering vector data
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VectorStyle.DefaultSymbol">
            <summary>
            Default Symbol
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SharpMap.Styles.VectorStyle.#ctor">
            <summary>
            Initializes a new VectorStyle and sets the default values
            </summary>
            <remarks>
            Default style values when initialized:<br/>
            *LineStyle: 1px solid black<br/>
            *FillStyle: Solid black<br/>
            *Outline: No Outline
            *Symbol: null-reference
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Line">
            <summary>
            Linestyle for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Outline">
            <summary>
            Outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.EnableOutline">
            <summary>
            Specified whether the objects are rendered with or without outlining
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Fill">
            <summary>
            Fillstyle for Polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointColor">
            <summary>
            Fillstyle for Point geometries (will be used if no Symbol is set)
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointSize">
            <summary>
            Size for Point geometries (if drawn with PointColor), will not have affect for Points drawn with Symbol
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.Symbol">
            <summary>
            Symbol used for rendering points
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolScale">
            <summary>
            Scale of the symbol (defaults to 1)
            </summary>
            <remarks>
            Setting the symbolscale to '2.0' doubles the size of the symbol, where a scale of 0.5 makes the scale half the size of the original image
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolOffset">
            <summary>
            Gets or sets the offset in pixels of the symbol.
            </summary>
            <remarks>
            The symbol offset is scaled with the <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/> property and refers to the offset af <see cref="P:SharpMap.Styles.VectorStyle.SymbolScale"/>=1.0.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.SymbolRotation">
            <summary>
            Gets or sets the rotation of the symbol in degrees (clockwise is positive)
            </summary>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.LineOffset">
            <summary>
            Gets or sets the offset (in pixel units) by which line will be offset from its original posision (perpendicular).
            </summary>
            <remarks>
            A positive value offsets the line to the right
            A negative value offsets to the left
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PointSymbolizer">
            <summary>
            Gets or sets the symbolizer for puntal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:SharpMap.Geometries.IPuntal"/> related style settings</remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.LineSymbolizer">
            <summary>
            Gets or sets the symbolizer for lineal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:SharpMap.Geometries.ILineal"/> related style settings</remarks>
        </member>
        <member name="P:SharpMap.Styles.VectorStyle.PolygonSymbolizer">
            <summary>
            Gets or sets the symbolizer for polygonal geometries
            </summary>
            <remarks>Setting this property will lead to ignorance towards all <see cref="T:SharpMap.Geometries.IPolygonal"/> related style settings</remarks>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer">
            <summary>
            Text Point Style
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.#ctor">
            <summary>
            Initializes a new TextPointStyle
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Font">
            <summary>
            Gets or sets the font to symbolize
            </summary>
            <remarks>The default value is <c>Wingdings</c></remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Foreground">
            <summary>
            Gets or sets the brush to symbolize
            </summary>
            <remarks>
            The default value is <c>Brushes.Firebrick</c>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Halo">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.HaloBrush">
            <summary>
            Gets or sets the brush to render the halo
            </summary>
            <remarks>
            The default value is <c>Brushes.Transparent</c>
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.CharacterIndex">
            <summary>
            The index of the character, -1 if the <see cref="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Text"/> is longer than 1 character.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.Text">
            <summary>
            The text for the symbol
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.CharacterPointSymbolizer.StringFormat">
            <summary>
            The format for symbolization
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetCapabilitiesRequest">
            <summary>
            This method returns the query string for 'GetCapabilities'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.DescribeFeatureTypeRequest(System.String)">
            <summary>
            This method returns the query string for 'DescribeFeatureType'.
            </summary>
            <param name="featureTypeName">The name of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetFeatureGETRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Geometries.BoundingBox,SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method returns the query string for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="!:WFS.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_1_0_TextResources.GetFeaturePOSTRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,SharpMap.Geometries.BoundingBox,SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method returns the POST request for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="!:WFS.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelProperty">A property necessary for label rendering</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
        </member>
        <member name="T:SharpMap.Utilities.LineOffset">
            <summary>
            Methods for calculationg line offsets
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LineOffset.OffsetPolyline(System.Drawing.PointF[],System.Single)">
             <summary>
             Offset a Linestring the given amount perpendicular to the line
             For example if a line should be drawn 10px to the right of its orgiginal position
            
             Positive offset offsets right
             Negative offset offsets left
             </summary>
             <param name="lineCoordinates">LineString</param>
             <param name="offset">offset amount</param>
             <returns>Array of coordinates for the offseted line</returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.GeometrySymbolizer">
            <summary>
            Multi geometry symbolizer class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.Render(SharpMap.Map,SharpMap.Geometries.Geometry,System.Drawing.Graphics)">
            <summary>
            Function to render the geometry
            </summary>
            <param name="map">The map object, mainly needed for transformation purposes.</param>
            <param name="geometry">The geometry to symbolize.</param>
            <param name="graphics">The graphics object to use.</param>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.PointSymbolizer">
            <summary>
            Gets or sets the point symbolizer
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.LineSymbolizer">
            <summary>
            Gets or sets the line symbolizer
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.GeometrySymbolizer.PolygonSymbolizer">
            <summary>
            Gets or sets the polygon symbolizer
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientThemeBase">
            <summary>
            Gradinent theme base class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientThemeBase.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a numeric DataColumn, where style
            properties are linearly interpolated between max and min values.
            </summary>
            <param name="row">Feature</param>
            <returns><see cref="T:SharpMap.Styles.IStyle">Style</see> calculated by a linear interpolation between the min/max styles</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.Min">
            <summary>
            Gets or sets the minimum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.Max">
            <summary>
            Gets or sets the maximum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.MinStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the minimum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.MaxStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.IStyle">style</see> for the maximum value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.TextColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on labels
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.LineColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used on lines
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientThemeBase.FillColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/> used as Fill
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientTheme">
            <summary>
            The GradientTheme class defines a gradient color thematic rendering of features based by a numeric attribute.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme.#ctor(System.String,System.Double,System.Double,SharpMap.Styles.IStyle,SharpMap.Styles.IStyle)">
            <summary>
            Initializes a new instance of the GradientTheme class
            </summary>
            <remarks>
            <para>The gradient theme interpolates linearly between two styles based on a numerical attribute in the datasource.
            This is useful for scaling symbols, line widths, line and fill colors from numerical attributes.</para>
            <para>Colors are interpolated between two colors, but if you want to interpolate through more colors (fx. a rainbow),
            set the <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.TextColorBlend"/>, <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.LineColorBlend"/> and <see cref="P:SharpMap.Rendering.Thematics.GradientThemeBase.FillColorBlend"/> properties
            to a custom <see cref="T:SharpMap.Rendering.Thematics.ColorBlend"/>.
            </para>
            <para>The following properties are scaled (properties not mentioned here are not interpolated):
            <list type="table">
            	<listheader><term>Property</term><description>Remarks</description></listheader>
            	<item><term><see cref="T:System.Drawing.Color"/></term><description>Red, Green, Blue and Alpha values are linearly interpolated.</description></item>
            	<item><term><see cref="T:System.Drawing.Pen"/></term><description>The color, width, color of pens are interpolated. MiterLimit,StartCap,EndCap,LineJoin,DashStyle,DashPattern,DashOffset,DashCap,CompoundArray, and Alignment are switched in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:System.Drawing.SolidBrush"/></term><description>SolidBrush color are interpolated. Other brushes are not supported.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.VectorStyle"/></term><description>MaxVisible, MinVisible, Line, Outline, Fill and SymbolScale are scaled linearly. Symbol, EnableOutline and Enabled switch in the middle of the min/max values.</description></item>
            	<item><term><see cref="T:SharpMap.Styles.LabelStyle"/></term><description>FontSize, BackColor, ForeColor, MaxVisible, MinVisible, Offset are scaled linearly. All other properties use min-style.</description></item>
            </list>
            </para>
            <example>
            Creating a rainbow colorblend showing colors from red, through yellow, green and blue depicting 
            the population density of a country.
            <code lang="C#">
            //Create two vector styles to interpolate between
            SharpMap.Styles.VectorStyle min = new SharpMap.Styles.VectorStyle();
            SharpMap.Styles.VectorStyle max = new SharpMap.Styles.VectorStyle();
            min.Outline.Width = 1f; //Outline width of the minimum value
            max.Outline.Width = 3f; //Outline width of the maximum value
            //Create a theme interpolating population density between 0 and 400
            SharpMap.Rendering.Thematics.GradientTheme popdens = new SharpMap.Rendering.Thematics.GradientTheme("PopDens", 0, 400, min, max);
            //Set the fill-style colors to be a rainbow blend from red to blue.
            popdens.FillColorBlend = SharpMap.Rendering.Thematics.ColorBlend.Rainbow5;
            myVectorLayer.Theme = popdens;
            </code>
            </example>
            </remarks>
            <param name="columnName">Name of column to extract the attribute</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="minStyle">Color for minimum value</param>
            <param name="maxStyle">Color for maximum value</param>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Static">
            <summary>
            Layer collection for layers with datasources that are more or less static (e.g ShapeFiles)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Variable">
            <summary>
            Layer collection for layers with datasources that update frequently (e.g. moving vehicle)
            </summary>
        </member>
        <member name="F:SharpMap.Layers.LayerCollectionType.Background">
            <summary>
            Layer collection for layers are completely opaque and use as Background (e.g. WMS, OSM)
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VariableLayerCollectionRequeryHandler">
            <summary>
            Signature of function to handle VariableLayerCollectionRequery event
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The argments, <c>EventArgs.Empty</c> in all cases</param>
        </member>
        <member name="T:SharpMap.Layers.VariableLayerCollection">
            <summary>
            Layer collection 
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LayerCollection">
            <summary>
            A collection of <see cref="T:SharpMap.Layers.ILayer"/> instances.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.Insert(System.Int32,SharpMap.Layers.ILayer)">
            <summary>
            Inserts the layer at the given <paramref name="index"/>.
            </summary>
            <param name="index">The index at which to add the layer.</param>
            <param name="layer">The layer to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index"/> is less than 0 or is 
            greater or equal to <see cref="P:System.Collections.CollectionBase.Count"/>.
            </exception>
        </member>
        <member name="P:SharpMap.Layers.LayerCollection.Item(System.String)">
            <summary>
            Gets or sets the layer with the given <paramref name="layerName"/>.
            </summary>
            <param name="layerName">
            Name of the layer to replace, if it exists.
            </param>
        </member>
        <member name="M:SharpMap.Layers.VariableLayerCollection.#ctor(SharpMap.Layers.LayerCollection)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="staticLayers">Layer collection that holds static layers</param>
        </member>
        <member name="E:SharpMap.Layers.VariableLayerCollection.VariableLayerCollectionRequery">
            <summary>
            Event fired every <see cref="P:SharpMap.Layers.VariableLayerCollection.Interval"/> to force requery;
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VariableLayerCollection.Interval">
            <summary>
            Gets/sets the interval in which to update layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VariableLayerCollection.Pause">
            <summary>
            Gets/Sets whether this collection should currently be updated or not
            </summary>
        </member>
        <member name="T:SharpMap.Layers.Symbolizer.PuntalVectorLayer">
            <summary>
            A vector layer class that can symbolize puntal geometries
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's data source</param>
        </member>
        <member name="M:SharpMap.Layers.Symbolizer.PuntalVectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider,SharpMap.Rendering.Symbolizer.ISymbolizer{SharpMap.Geometries.IPuntal})">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="layerName">The layer's name</param>
            <param name="dataSource">The layer's data source</param>
            <param name="symbolizer">The layer's symbolizer</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.HttpClientUtil">
            <summary>
            This class provides an easy to use interface for HTTP-GET and HTTP-POST requests.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.AddHeader(System.String,System.String)">
            <summary>
            Adds a HTTP header.
            </summary>
            <param name="name">The name of the header</param>
            <param name="value">The value of the header</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.GetDataStream">
            <summary>
            Performs a HTTP-GET or HTTP-POST request and returns a datastream for reading.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.Reset">
            <summary>
            This method resets all configurations.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.HttpClientUtil.Close">
            <summary>
            This method closes the WebResponse object.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.Url">
            <summary>
            Gets ans sets the Url of the request.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.ProxyUrl">
            <summary>
            Gets and sets the proxy Url of the request. 
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.PostData">
            <summary>
            Sets the data of a HTTP POST request as byte array.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.HttpClientUtil.Credentials">
            <summary>
            Gets or sets the network credentials used for authenticating the request with the Internet resource
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer">
            <summary>
            Warps a Pattern to a linestrings
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetGreaterSeries(System.Single,System.Single)">
            <summary>
            Creates a pattern symbolizing a linestring like this <c>&gt;&gt;&gt;&gt;&gt;</c>
            </summary>
            <param name="x">The length of the peak</param>
            <param name="y">the offset left and right from the original line</param>
            <returns>The pattern</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetZigZag(System.Single,System.Single)">
            <summary>
            Create a "zigzag" pattern, sort of like a rotated by 90 degree Z
            </summary>
            <param name="x">The width of a step op the linstring axis.</param>
            <param name="y">The offset left and right from the axis.</param>
            <returns>The pattern</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.GetTriangleSeries(System.Single,System.Single)">
            <summary>
            Creates a triangle pattern
            </summary>
            <param name="x">The base length of the triangle</param>
            <param name="y">The location of the next triangle</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Pattern">
            <summary>
            Pattern to warp to
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Interval">
            <summary>
            The interval between each pattern object
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.WarpedLineSymbolizer.Fill">
            <summary>
            Gets or sets the brush used to fill closed objects
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.Utility">
            <summary>
            Utility class to Symbolizers, mainly used for pleasant setup;
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.Utility.RandomKnownColor">
            <summary>
            Method to <see cref="T:System.Drawing.Color"/> to get a random known color
            </summary>
            <returns>A random color form the <see cref="T:System.Drawing.KnownColor"/> enumeration</returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.Utility.ScaleSizeToDeviceUnits(System.Single,System.Drawing.GraphicsUnit,System.Drawing.Graphics)">
            <summary>
            Scales sizes to device units
            </summary>
            <param name="size"></param>
            <param name="unit"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.EyeOfSight">
            <summary>
            Eye of sight class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.EyeOfSight.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleOutlineColor">
            <summary>
            Gets or sets the outline color 
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleOutlineWidth">
            <summary>
            The width of the needle outline
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.EyeOfSight.NeedleFillColor">
            <summary>
            The color to
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.Disclaimer">
            <summary>
            Disclaimer map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.Disclaimer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Text">
            <summary>
            Gets or sets the disclaimer text
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Font">
            <summary>
            Gets or sets the disclaimer font
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.ForeColor">
            <summary>
            Gets or sets the font color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Halo">
            <summary>
            Gets or sets the halo width. A width of 0 disables rendering halo
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.HaloColor">
            <summary>
            Gets or sets the halo color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.Disclaimer.Format">
            <summary>
            Gets or sets the Format
            </summary>
        </member>
        <member name="T:SharpMap.Layers.DuplicateLayerException">
            <summary>
            Exception thrown when a layer with a name which is the same
            as an existing layer is added to a <see cref="T:SharpMap.Layers.LayerCollection"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">Additional information about the exception.</param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">
            Additional information about the exception.
            </param>
            <param name="inner">
            An exception which caused this exception, if any.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of DuplicateLayerException from serialized data,
            <paramref name="info"/>.
            </summary>
            <param name="info">The serialization data.</param>
            <param name="context">Serialzation context.</param>
        </member>
        <member name="P:SharpMap.Layers.DuplicateLayerException.DuplicateLayerName">
            <summary>
            Gets the existing layer name which was duplicated.
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities">
            <summary>
            Class for generating the WmsCapabilities Xml
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.GetCapabilities(SharpMap.Map,SharpMap.Web.Wms.Capabilities.WmsServiceDescription)">
            <summary>
            Generates a capabilities file from a map object for use in WMS services
            </summary>
            <remarks>The capabilities document uses the v1.3.0 OpenGIS WMS specification</remarks>
            <param name="map">The map to create capabilities for</param>
            <param name="serviceDescription">Additional description of WMS</param>
            <returns>Returns XmlDocument describing capabilities</returns>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation">
            <summary>
            Stores contact metadata about WMS service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ElectronicMailAddress">
            <summary>
            Email address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.FacsimileTelephone">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.PersonPrimary">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.Position">
            <summary>
            Position of contact person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.VoiceTelephone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress">
            <summary>
            Information about a contact address for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Address">
            <summary>
            Contact address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.AddressType">
            <summary>
            Type of address (usually "postal").
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.City">
            <summary>
            Contact City
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.Country">
            <summary>
            Country of contact address
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.PostCode">
            <summary>
            Zipcode of contact
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactAddress.StateOrProvince">
            <summary>
            State or province of contact
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson">
            <summary>
            Information about a contact person for the service.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Organisation">
            <summary>
            Organisation of primary person
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsContactInformation.ContactPerson.Person">
            <summary>
            Primary contact person
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.Capabilities.WmsServiceDescription">
            <summary>
            The Wms Service Description stores metadata parameters for a WMS service
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Abstract">
            <summary>
            Optional narrative description providing additional information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.AccessConstraints">
            <summary>
            <para>The optional element "AccessConstraints" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            access constraints, as follows: "none".</para>
            <para>When constraints are imposed, no precise syntax has been defined for the text content of these elements, but
            client applications may display the content for user information and action.</para>
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.ContactInformation">
            <summary>
            Optional WMS contact information
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Fees">
            <summary>
            The optional element "Fees" may be omitted if it do not apply to the server. If
            the element is present, the reserved word "none" (case-insensitive) shall be used if there are no
            fees, as follows: "none".
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Keywords">
            <summary>
            Optional list of keywords or keyword phrases describing the server as a whole to help catalog searching
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.LayerLimit">
            <summary>
            Maximum number of layers allowed (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxHeight">
            <summary>
            Maximum height allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.MaxWidth">
            <summary>
            Maximum width allowed in pixels (0=no restrictions)
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.OnlineResource">
            <summary>
            Mandatory Top-level web address of service or service provider.
            </summary>
        </member>
        <member name="F:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.Title">
            <summary>
            Mandatory Human-readable title for pick lists
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Capabilities.WmsServiceDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a WmsServiceDescription object
            </summary>
            <param name="title">Mandatory Human-readable title for pick lists</param>
            <param name="onlineResource">Top-level web address of service or service provider.</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources">
            <summary>
            This class provides text resources specific for WFS 1.0.0 XML schema (for precompiling).
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_SRS">
            <summary>
            Gets an XPath string addressing the SRID of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BBOX">
            <summary>
            Gets an XPath string addressing the bounding box of a featuretype in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_GETFEATURERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'GetFeature'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_DESCRIBEFEATURETYPERESOURCE">
            <summary>
            Gets an XPath string addressing the URI of 'DescribeFeatureType'in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMINX">
            <summary>
            Gets an XPath string addressing the 'minx'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMAXX">
            <summary>
            Gets an XPath string addressing the 'maxx'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMINY">
            <summary>
            Gets an XPath string addressing the 'miny'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.WFS_1_0_0_XPathTextResources.XPATH_BOUNDINGBOXMAXY">
            <summary>
            Gets an XPath string addressing the 'maxy'-attribute of a featuretype's bounding box in 'GetCapabilities'.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PathNode">
            <summary>
            This class represents an element-node in an XML document 
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PathNode.#ctor(System.String,System.String,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PathNode"/> class.
            </summary>
            <param name="elementNsUri">The namespace URI of the element-node</param>
            <param name="elementNodeName">The local name of the element-node</param>
            <param name="nameTable">A NameTable for storing namespace URI and local name</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PathNode.Matches(System.Xml.XmlReader)">
            <summary>
            This method evaluates, if the position of an XmlReader is at the element-node represented by the instance of this class.
            It compares pointers instead of literal values due to performance reasons.
            Therefore the name table of the XmlReader given as argument must be the one handed over to the constructor.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.XmlElementNsUri">
            <summary>
            Gets the namespace URI of the element-node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.XmlElementNodeName">
            <summary>
            Gets the local name of the element-node
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.PathNode.IsActive">
            <summary>
            Determines whether this PathNode shall be active.
            If it is not active, all match operations return true.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.AlternativePathNodesCollection">
            <summary>
            This class represents a collection of path nodes that can be used alternatively.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.#ctor(SharpMap.Utilities.Wfs.IPathNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.AlternativePathNodesCollection"/> class.
            </summary>
            <param name="pathNodes">A collection of instances implementing <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.Matches(System.Xml.XmlReader)">
            <summary>
            This method evaluates all inherent instances of <see cref="T:SharpMap.Utilities.Wfs.IPathNode"/>.
            </summary>
            <param name="reader">An XmlReader instance</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.AlternativePathNodesCollection.IsActive">
            <summary>
            Determines whether the inherent PathNodes shall be active.
            If a PathNode is not active, all match operations return true.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle">
            <summary>
            Scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Standard">
            <summary>
            Standard scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian">
            <summary>
            Meridian scale bar style
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian1">
            <summary>
            Modified
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags">
            <summary>
            Anchor flag values
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.None">
            <summary>
            No anchor specified
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Left">
            <summary>
            Left anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Top">
            <summary>
            Top anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Right">
            <summary>
            Right anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Bottom">
            <summary>
            Bottom anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.VerticalCenter">
            <summary>
            Vertical center anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.HorizontalCenter">
            <summary>
            Horizontal center anchor
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Vertical">
            <summary>
            
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Decoration.MapDecorationAnchorFlags.Horizontal">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric collection. The elements of a MultiPoint are
            restricted to Points. The points are not connected or ordered.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.#ctor">
            <summary>
            Initializes a new MultiPoint collection
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.#ctor(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Initializes a new MultiPoint collection
            </summary>		
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Boundary">
            <summary>
            The boundary of a MultiPoint is the empty set (null).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPoint.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Item(System.Int32)">
            <summary>
            Gets the n'th point in the MultiPoint collection
            </summary>
            <param name="n">Index in collection</param>
            <returns>Point</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Points">
            <summary>
            Gets or sets the MultiPoint collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPoint.Dimension">
            <summary>
             The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.ISpatialReference">
            <summary>
            The ISpatialRelation interface defines a set of named spatial relationship operators for geometric shape
            objects. The behavior of these operators is described in detail in the geometry object model sub-section of
            the Architecture section of the OpenGIS Simple Features specification. [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryFromWKT">
            <summary>
             Converts a Well-known Text representation to a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.String)">
            <summary>
            Converts a Well-known text representation to a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="wellKnownText">A <see cref="T:SharpMap.Geometries.Geometry"/> tagged text string ( see the OpenGIS Simple Features Specification.</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> specified by wellKnownText.  Throws an exception if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.Parse(System.IO.TextReader)">
            <summary>
            Converts a Well-known Text representation to a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="reader">A Reader which will return a Geometry Tagged Text
            string (see the OpenGIS Simple Features Specification)</param>
            <returns>Returns a <see cref="T:SharpMap.Geometries.Geometry"/> read from StreamReader. 
            An exception will be thrown if there is a parsing problem.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetCoordinates(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next array of Coordinates in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The
            next element returned by the stream should be "(" (the beginning of "(x1 y1, x2 y2, ..., xn yn)" or
            "EMPTY".</param>
            <returns>The next array of Coordinates in the stream, or an empty array of "EMPTY" is the
            next element returned by the stream.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextNumber(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next number in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known text format.  The next token
            must be a number.</param>
            <returns>Returns the next number in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not a number.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextEmptyOrOpener(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next "EMPTY" or "(" in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be "EMPTY" or "(".</param>
            <returns>the next "EMPTY" or "(" in the stream as uppercase
            text.</returns>
            <remarks>
            ParseException is thrown if the next token is not "EMPTY" or "(".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloserOrComma(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" or "," in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next token must be ")" or ",".</param>
            <returns>Returns the next ")" or "," in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")" or ",".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextCloser(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next ")" in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be ")".</param>
            <returns>Returns the next ")" in the stream.</returns>
            <remarks>
            ParseException is thrown if the next token is not ")".
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.GetNextWord(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Returns the next word in the stream as uppercase text.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next token must be a word.</param>
            <returns>Returns the next word in the stream as uppercase text.</returns>
            <remarks>
            Exception is thrown if the next token is not a word.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryTaggedText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Geometry using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Geometry Tagged Text&gt;.</param>
            <returns>Returns a Geometry specified by the next token in the stream.</returns>
            <remarks>
            Exception is thrown if the coordinates used to create a Polygon
            shell and holes do not form closed linestrings, or if an unexpected
            token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.MultiPolygon"/> using the next token in the stream.
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a MultiPolygon.</param>
            <returns>a <code>MultiPolygon</code> specified by the next token in the 
            stream, or if if the coordinates used to create the <see cref="T:SharpMap.Geometries.Polygon"/>
            shells and holes do not form closed linestrings.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPolygonText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Polygon using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
             format. The next tokens must form a &lt;Polygon Text&gt;.</param>
            <returns>Returns a Polygon specified by the next token
             in the stream</returns>
             <remarks>
             ParseException is thown if the coordinates used to create the Polygon
             shell and holes do not form closed linestrings, or if an unexpected
             token is encountered.
             </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiPointText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a Point using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a &lt;Point Text&gt;.</param>
            <returns>Returns a Point specified by the next token in
            the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadMultiLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.MultiLineString"/> using the next token in the stream. 
            </summary>
            <param name="tokenizer">tokenizer over a stream of text in Well-known Text format. The next tokens must form a MultiLineString Text</param>
            <returns>a <see cref="T:SharpMap.Geometries.MultiLineString"/> specified by the next token in the stream</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadLineStringText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a LineString using the next token in the stream.
            </summary>
            <param name="tokenizer">Tokenizer over a stream of text in Well-known Text format.  The next
            tokens must form a LineString Text.</param>
            <returns>Returns a LineString specified by the next token in the stream.</returns>
            <remarks>
            ParseException is thrown if an unexpected token is encountered.
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryFromWKT.ReadGeometryCollectionText(SharpMap.Converters.WellKnownText.WktStreamTokenizer)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.GeometryCollection"/> using the next token in the stream.
            </summary>
            <param name="tokenizer"> Tokenizer over a stream of text in Well-known Text
            format. The next tokens must form a GeometryCollection Text.</param>
            <returns>
            A <see cref="T:SharpMap.Geometries.GeometryCollection"/> specified by the next token in the stream.</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.WkbByteOrder">
            <summary>
            Specifies the specific binary encoding (NDR or XDR) used for a geometry byte stream
            </summary>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Xdr">
            <summary>
            XDR (Big Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The XDR representation of an Unsigned Integer is Big Endian (most significant byte first).</para>
            <para>The XDR representation of a Double is Big Endian (sign bit is first byte).</para>
            </remarks>
        </member>
        <member name="F:SharpMap.Converters.WellKnownBinary.WkbByteOrder.Ndr">
            <summary>
            NDR (Little Endian) Encoding of Numeric Types
            </summary>
            <remarks>
            <para>The NDR representation of an Unsigned Integer is Little Endian (least significant byte first).</para>
            <para>The NDR representation of a Double is Little Endian (sign bit is last byte).</para>
            </remarks>
        </member>
        <member name="T:SharpMap.Utilities.GeoSpatialMath">
            <summary>
            A
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.DegToRad">
            <summary>
            Conversion factor degrees to radians
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerInch">
            <summary>
            Meters per inch
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerMile">
            <summary>
            Meters per mile
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MilesPerDegreeAtEquator">
            <summary>
            Miles per degree at equator
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.GeoSpatialMath.MetersPerDegreeAtEquator">
            <summary>
            Meters per degree at equator
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.GreatCircleDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calcualte the distance between 2 points on the great circle
            </summary>
            <param name="lon1">The first longitue value</param>
            <param name="lat1">The latitude value for <paramref name="lon1"/></param>
            <param name="lon2">The second longitue value</param>
            <param name="lat2">The latitude value for <paramref name="lon2"/></param>
            <returns>The distance in meters</returns>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.GreatCircleDistance(System.Double,System.Double,System.Double)">
            <summary>
            Calcualte the distance between 2 points on the great circle
            </summary>
            <param name="lon1">The first longitue value</param>
            <param name="lon2">The second longitue value</param>
            <param name="lat">The common latitued value for <paramref name="lon1"/> and <paramref name="lon2"/></param>
            <returns>The distance in meters</returns>
        </member>
        <member name="M:SharpMap.Utilities.GeoSpatialMath.DiffLongitude(System.Double,System.Double)">
            <summary>
            Calculate the difference between two longitudal values
            </summary>
            <param name="lon1">The first longitue value in degrees</param>
            <param name="lon2">The second longitue value in degrees</param>
            <returns>The distance in degrees</returns>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection">
            <summary>
            Class defining delegate for label collision detection and static predefined methods
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.SimpleCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})">
            <summary>
            Simple and fast label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelCollisionDetection.ThoroughCollisionDetection(System.Collections.Generic.List{SharpMap.Rendering.BaseLabel})">
            <summary>
            Thorough label collision detection.
            </summary>
            <param name="labels"></param>
        </member>
        <member name="T:SharpMap.Rendering.LabelCollisionDetection.LabelFilterMethod">
            <summary>
            Delegate method for filtering labels. Useful for performing custom collision detection on labels
            </summary>
            <param name="labels"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.CreateDbfIndex``1(System.Int32)">
            <summary>
            Indexes a DBF column in a binary tree [NOT COMPLETE]
            </summary>
            <typeparam name="T">datatype to be indexed</typeparam>
            <param name="ColumnId">Column to index</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the DBase file.
            </summary>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.DbaseReader.GetFeature(System.UInt32,SharpMap.Data.FeatureDataTable)">
            <summary>
            Gets the feature at the specified Object ID
            </summary>
            <param name="oid">the object Id</param>
            <param name="table">the table to add the feature to</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.LastUpdate">
            <summary>
            Gets the date this file was last updated.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.DbaseReader.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding"/> used for parsing strings from the DBase DBF file.
            </summary>
            <remarks>
            If the encoding type isn't set, the dbase driver will try to determine the correct <see cref="T:System.Text.Encoding"/>.
            </remarks>
        </member>
        <member name="T:SharpMap.Data.FeatureDataSet">
            <summary>
            Represents an in-memory cache of spatial data. The FeatureDataSet is an extension of System.Data.DataSet
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            nitializes a new instance of the FeatureDataSet class.
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.Clone">
            <summary>
            Copies the structure of the FeatureDataSet, including all FeatureDataTable schemas, relations, and constraints. Does not copy any data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeTables">
            <summary>
            Gets a value indicating whether Tables property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeRelations">
            <summary>
            Gets a value indicating whether Relations property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ReadXmlSerializable(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.GetSchemaSerializable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.FeatureDataSet.Tables">
            <summary>
            Gets the collection of tables contained in the FeatureDataSet
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventHandler">
            <summary>
            Represents the method that will handle the RowChanging, RowChanged, RowDeleting, and RowDeleted events of a FeatureDataTable. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTable">
            <summary>
            Represents one feature table of in-memory spatial data. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor">
            <summary>
            Initializes a new instance of the FeatureDataTable class with no arguments.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Intitalizes a new instance of the FeatureDataTable class with the specified table name.
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetEnumerator">
            <summary>
            Returns an enumerator for enumering the rows of the FeatureDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.AddRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Adds a row to the FeatureDataTable
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Clone">
            <summary>
            Clones the structure of the FeatureDataTable, including all FeatureDataTable schemas and constraints. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.CreateInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRow">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table, based on a datarow builder
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetRowType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanged event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanging event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleting event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.RemoveRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Removes the row from the table
            </summary>
            <param name="row">Row to remove</param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Count">
            <summary>
            Gets the number of rows in the table
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Item(System.Int32)">
            <summary>
            Gets the feature data row at the specified index
            </summary>
            <param name="index">row index</param>
            <returns>FeatureDataRow</returns>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanged">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanging">
            <summary>
            Occurs when a FeatureDataRow is changing. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleted">
            <summary>
            Occurs after a row in the table has been deleted.
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleting">
            <summary>
            Occurs before a row in the table is about to be deleted.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureTableCollection">
            <summary>
            Represents the collection of tables for the FeatureDataSet.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRow">
            <summary>
            Represents a row of data in a FeatureDataTable.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.IsFeatureGeometryNull">
            <summary>
            Returns true of the geometry is null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.SetFeatureGeometryNull">
            <summary>
            Sets the geometry column to null
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Geometry">
            <summary>
            The geometry of the current feature
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventArgs">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRowChangeEventArgs.#ctor(SharpMap.Data.FeatureDataRow,System.Data.DataRowAction)">
            <summary>
            Initializes a new instance of the FeatureDataRowChangeEventArgs class.
            </summary>
            <param name="row"></param>
            <param name="action"></param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Row">
            <summary>
            Gets the row upon which an action has occurred.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Action">
            <summary>
            Gets the action that has occurred on a FeatureDataRow.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.GeometryFactory">
            <summary>
            This class is the base class for geometry production.
            It provides some parsing routines for XML compliant to GML2/GML3.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createGeometries">
            <summary>
            Abstract method - overwritten by derived classes for producing instances
            derived from <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createQuickGeometries(System.String)">
            <summary>
            This method parses quickly without paying attention to
            context validation, polygon boundaries and multi-geometries.
            This accelerates the geometry parsing process, 
            but in scarce cases can lead to errors. 
            </summary>
            <param name="geometryType">The geometry type (Point, LineString, Polygon, MultiPoint, MultiCurve, 
            MultiLineString (deprecated), MultiSurface, MultiPolygon (deprecated)</param>
            <returns>The created geometries</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.ParseCoordinates(System.Xml.XmlReader)">
            <summary>
            This method parses a coordinates or posList(from 'GetFeature' response). 
            </summary>
            <param name="reader">An XmlReader instance at the position of the coordinates to read</param>
            <returns>A point collection (the collected coordinates)</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.GetSubReaderOf(System.Xml.XmlReader,System.String[],SharpMap.Utilities.Wfs.IPathNode[])">
            <summary>
            This method retrieves an XmlReader within a specified context.
            </summary>
            <param name="reader">An XmlReader instance that is the origin of a created sub-reader</param>
            <param name="labelValue">A string array for recording a found label value. Pass 'null' to ignore searching for label values</param>
            <param name="pathNodes">A list of <see cref="!:PathNodeDepr"/> instances defining the context of the retrieved reader</param>
            <returns>A sub-reader of the XmlReader given as argument</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.GetSubReaderOf(System.Xml.XmlReader,System.String[],System.Collections.Generic.List{SharpMap.Utilities.Wfs.IPathNode})">
            <summary>
            This method retrieves an XmlReader within a specified context.
            Moreover it collects label values before or after a geometry could be found.
            </summary>
            <param name="reader">An XmlReader instance that is the origin of a created sub-reader</param>
            <param name="labelValue">A string array for recording a found label value. Pass 'null' to ignore searching for label values</param>
            <param name="pathNodes">A list of <see cref="!:PathNodeDepr"/> instances defining the context of the retrieved reader</param>
            <returns>A sub-reader of the XmlReader given as argument</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.AddLabel(System.String,SharpMap.Geometries.Geometry)">
            <summary>
            This method adds a label to the collection.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.createReader(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            This method initializes the XmlReader member.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.initializePathNodes">
            <summary>
            This method initializes path nodes needed by the derived classes.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.initializeSeparators">
            <summary>
            This method initializes separator variables for parsing coordinates.
            From GML specification: Coordinates can be included in a single string, but there is no 
            facility for validating string content. The value of the 'cs' attribute 
            is the separator for coordinate values, and the value of the 'ts' 
            attribute gives the tuple separator (a single space by default); the 
            default values may be changed to reflect local usage.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.GeometryFactory.Dispose">
            <summary>
            This method closes the XmlReader member and the used <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PointFactory">
            <summary>
            This class produces instances of type <see cref="T:SharpMap.Geometries.Point"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PointFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PointFactory"/> class.
            This constructor shall just be called from the MultiPoint factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PointFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.Point"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.LineStringFactory">
            <summary>
            This class produces instances of type <see cref="T:SharpMap.Geometries.LineString"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.LineStringFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.LineStringFactory"/> class.
            This constructor shall just be called from the MultiLineString factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.LineStringFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.LineString"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.PolygonFactory">
            <summary>
            This class produces instances of type <see cref="T:SharpMap.Geometries.Polygon"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PolygonFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.PolygonFactory"/> class.
            This constructor shall just be called from the MultiPolygon factory. The feature node therefore is deactivated.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.PolygonFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.Polygon"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiPointFactory">
            <summary>
            This class produces instances of type <see cref="T:SharpMap.Geometries.MultiPoint"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPointFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPointFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPointFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.MultiPoint"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiLineStringFactory">
            <summary>
            This class produces objects of type <see cref="T:SharpMap.Geometries.MultiLineString"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiLineStringFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiLineStringFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiLineStringFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.MultiLineString"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.MultiPolygonFactory">
            <summary>
            This class produces instances of type <see cref="T:SharpMap.Geometries.MultiPolygon"/>.
            The base class is <see cref="T:SharpMap.Utilities.Wfs.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPolygonFactory"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.#ctor(System.Xml.XmlReader,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.MultiPolygonFactory"/> class.
            </summary>
            <param name="xmlReader">An XmlReader instance</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.MultiPolygonFactory.createGeometries">
            <summary>
            This method produces instances of type <see cref="T:SharpMap.Geometries.MultiPolygon"/>.
            </summary>
            <returns>The created geometries</returns>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2">
            <summary>
            This class must detect the geometry type of the queried layer.
            Therefore it works a bit slower than the other factories. Specify the geometry type manually,
            if it isn't specified in 'DescribeFeatureType'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil,SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.Boolean,System.Boolean,SharpMap.Data.FeatureDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2"/> class.
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
            <param name="featureTypeInfo">A <see cref="T:SharpMap.Utilities.Wfs.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="multiGeometries">A boolean value specifying whether multi-geometries should be created</param>
            <param name="quickGeometries">A boolean value specifying whether the factory should create geometries quickly, but without validation</param>
            <param name="labelInfo">A FeatureDataTable for labels</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.UnspecifiedGeometryFactory_WFS1_0_0_GML2.createGeometries">
            <summary>
            This method detects the geometry type from 'GetFeature' response and uses a geometry factory to create the 
            appropriate geometries.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Utilities.LeastSquaresTransform">
            <summary>
            Calculates Affine and Helmert transformation using Least-Squares Regression of input and output points
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.#ctor">
            <summary>
            Initialize Least Squares transformations
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.AddInputOutputPoint(SharpMap.Geometries.Point,SharpMap.Geometries.Point)">
            <summary>
            Adds an input and output value pair to the collection
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.RemoveInputOutputPointAt(System.Int32)">
            <summary>
            Removes input and output value pair at the specified index
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetInputPoint(System.Int32)">
            <summary>
            Gets the input point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Input point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetInputPointAt(SharpMap.Geometries.Point,System.Int32)">
            <summary>
            Sets the input point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetOutputPoint(System.Int32)">
            <summary>
            Gets the output point value at the specified index
            </summary>
            <param name="i">index</param>
            <returns>Output point value a index 'i'</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.SetOutputPointAt(SharpMap.Geometries.Point,System.Int32)">
            <summary>
            Sets the output point value at the specified index
            </summary>
            <param name="p">Point value</param>
            <param name="i">index</param>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetAffineTransformation">
            <summary>
            Return an array with the six affine transformation parameters {a,b,c,d,e,f} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2. c,f defines offset.
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = d*X + e*Y + f
            </para>
            <para>
            Transformation based on Mikhail "Introduction to Modern Photogrammetry" p. 399-300.
            Extended to arbitrary number of measurements by M. Nielsen
            </para>
            </remarks>
            <returns>Array with the six transformation parameters and sum of squared residuals:  a,b,c,d,e,f,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.GetHelmertTransformation">
            <summary>
            Calculates the four helmert transformation parameters {a,b,c,d} and the sum of the squares of the residuals (s0)
            </summary>
            <remarks>
            <para>
            a,b defines scale vector 1 of coordinate system, d,e scale vector 2.
            c,f defines offset.
            </para>
            <para>
            Converting from input (X,Y) to output coordinate system (X',Y') is done by:
            X' = a*X + b*Y + c, Y' = -b*X + a*Y + d
            </para>
            <para>This is a transformation initially based on the affine transformation but slightly simpler.</para>
            </remarks>
            <returns>Array with the four transformation parameters, and sum of squared residuals: a,b,c,d,s0</returns>
        </member>
        <member name="M:SharpMap.Utilities.LeastSquaresTransform.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates an n x m matrix of doubles
            </summary>
            <param name="n">width of matrix</param>
            <param name="m">height of matrix</param>
            <returns>n*m matrix</returns>
        </member>
        <member name="T:SharpMap.Rendering.Symbolizer.ListPointSymbolizer">
            <summary>
            ListPointSymbolizer class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Render(SharpMap.Map,SharpMap.Geometries.IPuntal,System.Drawing.Graphics)">
            <summary>
            Method to render the Point to the <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="map">The map object</param>
            <param name="points">Location where to render the Symbol</param>
            <param name="g">The graphics object to use.</param>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Offset">
            <summary>
            Offset of the point from the point
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbolizer.ListPointSymbolizer.Rotation">
            <summary>
            Rotation of the symbol
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer">
            <summary>
            This class renders individual geometry features to a graphics object using the settings of a map object.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiLineString(System.Drawing.Graphics,SharpMap.Geometries.MultiLineString,System.Drawing.Pen,SharpMap.Map,System.Single)">
            <summary>
            Renders a MultiLineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="lines">MultiLineString to be rendered</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.OffsetRight(System.Drawing.PointF[],System.Single)">
            <summary>
            Offset drawn linestring by given pixel width
            </summary>
            <param name="points"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,SharpMap.Geometries.LineString,System.Drawing.Pen,SharpMap.Map)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLineString(System.Drawing.Graphics,SharpMap.Geometries.LineString,System.Drawing.Pen,SharpMap.Map,System.Single)">
            <summary>
            Renders a LineString to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="line">LineString to render</param>
            <param name="pen">Pen style used for rendering</param>
            <param name="map">Map reference</param>
            <param name="offset">Offset by which line will be moved to right</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPolygon(System.Drawing.Graphics,SharpMap.Geometries.MultiPolygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.Map)">
            <summary>
            Renders a multipolygon byt rendering each polygon in the collection by calling DrawPolygon.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pols">MultiPolygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPolygon(System.Drawing.Graphics,SharpMap.Geometries.Polygon,System.Drawing.Brush,System.Drawing.Pen,System.Boolean,SharpMap.Map)">
            <summary>
            Renders a polygon to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="pol">Polygon to render</param>
            <param name="brush">Brush used for filling (null or transparent for no filling)</param>
            <param name="pen">Outline pen style (null if no outline)</param>
            <param name="clip">Specifies whether polygon clipping should be applied</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.LimitValues(System.Drawing.PointF[],System.Single)">
            <summary>
            Purpose of this method is to prevent the 'overflow error' exception in the FillPath method. 
            This Exception is thrown when the coordinate values become too big (values over -2E+9f always 
            throw an exception, values under 1E+8f seem to be okay). This method limits the coordinates to 
            the values given by the second parameter (plus an minus). Theoretically the lines to and from 
            these limited points are not correct but GDI+ paints incorrect even before that limit is reached. 
            </summary>
            <param name="vertices">The vertices that need to be limited</param>
            <param name="limit">The limit at which coordinate values will be cutoff</param>
            <returns>The limited vertices</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.SizeOfStringBase(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Function to get the <see cref="T:System.Drawing.SizeF"/> of a string when rendered with the given font.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.SizeOfStringCeiling(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Function to get the <see cref="T:System.Drawing.SizeF"/> of a string when rendered with the given font.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawLabel(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Font,System.Drawing.Color,System.Drawing.Brush,System.Drawing.Pen,System.Single,System.String,SharpMap.Map)">
            <summary>
            Renders a label to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="labelPoint">Label placement</param>
            <param name="offset">Offset of label in screen coordinates</param>
            <param name="font">Font used for rendering</param>
            <param name="forecolor">Font forecolor</param>
            <param name="backcolor">Background color</param>
            <param name="halo">Color of halo</param>
            <param name="rotation">Text rotation in degrees</param>
            <param name="text">Text to render</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.ClipPolygon(System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Clips a polygon to the view.
            Based on UMN Mapserver renderer 
            </summary>
            <param name="vertices">vertices in image coordinates</param>
            <param name="width">Width of map in image coordinates</param>
            <param name="height">Height of map in image coordinates</param>
            <returns>Clipped polygon</returns>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,SharpMap.Geometries.Point,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="b">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,SharpMap.Geometries.Point,SharpMap.Map)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawPoint(System.Drawing.Graphics,SharpMap.Geometries.Point,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.Map)">
            <summary>
            Renders a point to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="point">Point to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolscale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(System.Drawing.Graphics,SharpMap.Geometries.MultiPoint,System.Drawing.Image,System.Single,System.Drawing.PointF,System.Single,SharpMap.Map)">
            <summary>
            Renders a <see cref="T:SharpMap.Geometries.MultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbol">Symbol to place over point</param>
            <param name="symbolscale">The amount that the symbol should be scaled. A scale of '1' equals to no scaling</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="rotation">Symbol rotation in degrees</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(SharpMap.Rendering.Symbolizer.IPointSymbolizer,System.Drawing.Graphics,SharpMap.Geometries.MultiPoint,SharpMap.Map)">
            <summary>
            Renders a <see cref="T:SharpMap.Geometries.MultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="symbolizer">Symbolizer to decorate point</param>
            <param name="map">Map reference</param>
        </member>
        <member name="M:SharpMap.Rendering.VectorRenderer.DrawMultiPoint(System.Drawing.Graphics,SharpMap.Geometries.MultiPoint,System.Drawing.Brush,System.Single,System.Drawing.PointF,SharpMap.Map)">
            <summary>
            Renders a <see cref="T:SharpMap.Geometries.MultiPoint"/> to the map.
            </summary>
            <param name="g">Graphics reference</param>
            <param name="points">MultiPoint to render</param>
            <param name="brush">Brush reference</param>
            <param name="size">Size of drawn Point</param>
            <param name="offset">Symbol offset af scale=1</param>
            <param name="map">Map reference</param>
        </member>
        <member name="P:SharpMap.Rendering.VectorRenderer.SizeOfString">
            <summary>
            Delegate used to determine the <see cref="T:System.Drawing.SizeF"/> of a given string.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.VectorRenderer.SizeOfStringDelegate">
            <summary>
            Signature for a function that evaluates the length of a string when rendered on a Graphics object with a given font
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object</param>
            <param name="text">the text to render</param>
            <param name="font">the font to use</param>
            <returns>the size</returns>
        </member>
        <member name="T:SharpMap.Rendering.LabelBox">
            <summary>
            Defines an axis-aligned box around a label, used for collision detection
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new LabelBox instance
            </summary>
            <param name="left">Left side of box</param>
            <param name="top">Top of box</param>
            <param name="width">Width of the box</param>
            <param name="height">Height of the box</param>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new LabelBox instance based on a rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.CompareTo(SharpMap.Rendering.LabelBox)">
            <summary>
            Returns 0 if the boxes intersects each other
            </summary>
            <param name="other">labelbox to perform intersectiontest with</param>
            <returns>0 if the intersect</returns>
        </member>
        <member name="M:SharpMap.Rendering.LabelBox.Intersects(SharpMap.Rendering.LabelBox)">
            <summary>
            Determines whether the boundingbox intersects another boundingbox
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Left">
            <summary>
            The Left tie-point for the Label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Top">
            <summary>
            The Top tie-point for the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Width">
            <summary>
            Width of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Height">
            <summary>
            Height of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Right">
            <summary>
            Right side of the box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.LabelBox.Bottom">
            <summary>
            Bottom of th ebox
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.BaseLabel">
            <summary>
            Class for storing a label instance
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.#ctor(System.String,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance
            </summary>
            <param name="text">Text to write</param>
            <param name="rotation">Rotation</param>
            <param name="priority">Label priority used for collision detection</param>
            <param name="collisionbox">Box around label for collision detection</param>
            <param name="style">The style of the label</param>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.CompareTo(SharpMap.Rendering.BaseLabel)">
            <summary>
            Tests if two label boxes intersects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel.Compare(SharpMap.Rendering.BaseLabel,SharpMap.Rendering.BaseLabel)">
            <summary>
            Checks if two labels intersect
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Show">
            <summary>
            Show this label or don't
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Text">
            <summary>
            The text of the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Font">
            <summary>
            Label font
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Rotation">
            <summary>
            Label rotation
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Priority">
            <summary>
            Value indicating rendering priority
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Box">
            <summary>
            Label box
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel.Style">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.LabelStyle"/> of this label
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.BaseLabel`1">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the location</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.BaseLabel`1.#ctor(System.String,`0,System.Single,System.Int32,SharpMap.Rendering.LabelBox,SharpMap.Styles.LabelStyle)">
            <param name="text">The label's text</param>
            <param name="location">Position of label</param>
        </member>
        <member name="P:SharpMap.Rendering.BaseLabel`1.Location">
            <summary>
            Gets or sets the location of the label
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Label.LabelPoint">
            <summary>
            Label position
            </summary>
        </member>
        <member name="T:SharpMap.Layers.WmsLayer">
            <summary>
            Web Map Service layer
            </summary>
            <remarks>
            The WmsLayer is currently very basic and doesn't support automatic fetching of the WMS Service Description.
            Instead you would have to add the nessesary parameters to the URL,
            and the WmsLayer will set the remaining BoundingBox property and proper requests that changes between the requests.
            See the example below.
            </remarks>
            <example>
            The following example creates a map with a WMS layer the Demis WMS Server
            <code lang="C#">
            myMap = new SharpMap.Map(new System.Drawing.Size(500,250);
            string wmsUrl = "http://www2.demis.nl/mapserver/request.asp";
            SharpMap.Layers.WmsLayer myLayer = new SharpMap.Layers.WmsLayer("Demis WMS", myLayer);
            myLayer.AddLayer("Bathymetry");
            myLayer.AddLayer("Countries");
            myLayer.AddLayer("Topography");
            myLayer.AddLayer("Hillshading");
            myLayer.SetImageFormat(layWms.OutputFormats[0]);
            myLayer.SRID = 4326;	
            myMap.Layers.Add(myLayer);
            myMap.Center = new SharpMap.Geometries.Point(0, 0);
            myMap.Zoom = 360;
            myMap.MaximumZoom = 360;
            myMap.MinimumZoom = 0.1;
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.Net.IWebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <remarks>In and ASP.NET application the service description is automatically cached for 24 hours when not specified</remarks>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.IWebProxy)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.#ctor(System.String,System.String,System.TimeSpan,System.Net.IWebProxy,System.Net.ICredentials)">
            <summary>
            Initializes a new layer, and downloads and parses the service description
            </summary>
            <param name="layername">Layername</param>
            <param name="url">Url of WMS server</param>
            <param name="cachetime">Time for caching Service Description (ASP.NET only)</param>
            <param name="proxy">Proxy</param>
            <param name="credentials"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.ForceOnlineResourceUrl(System.String)">
            <summary>
            Can be used to force the OnlineResourceUrl for services that return incorrect (often internal) onlineresources
            </summary>
            <param name="url">Url without any OGC specific parameters</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddLayer(System.String)">
            <summary>
            Adds a layer to WMS request
            </summary>
            <remarks>Layer names are case sensitive.</remarks>
            <param name="name">Name of layer</param>
            <exception cref="T:System.ArgumentException">Throws an exception is an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.LayerExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="layer"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayer(System.String)">
            <summary>
            Removes a layer from the layer list
            </summary>
            <param name="name">Name of layer to remove</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveLayerAt(System.Int32)">
            <summary>
            Removes the layer at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllLayers">
            <summary>
            Removes all layers
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddStyle(System.String)">
            <summary>
            Adds a style to the style collection
            </summary>
            <param name="name">Name of style</param>
            <exception cref="T:System.ArgumentException">Throws an exception is an unknown layer is added</exception>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.StyleExists(SharpMap.Web.Wms.Client.WmsServerLayer,System.String)">
            <summary>
            Recursive method for checking whether a layername exists
            </summary>
            <param name="layer">layer</param>
            <param name="name">name of style</param>
            <returns>True of style exists</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyle(System.String)">
            <summary>
            Removes a style from the collection
            </summary>
            <param name="name">Name of style</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveStyleAt(System.Int32)">
            <summary>
            Removes a style at specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.RemoveAllStyles">
            <summary>
            Removes all styles from the list
            </summary>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.SetImageFormat(System.String)">
            <summary>
            Sets the image type to use when requesting images from the WMS server
            </summary>
            <remarks>
            <para>See the <see cref="P:SharpMap.Layers.WmsLayer.OutputFormats"/> property for a list of available mime types supported by the WMS server</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Throws an exception if either the mime type isn't offered by the WMS
            or GDI+ doesn't support this mime type.</exception>
            <param name="mimeType">Mime type of image format</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.GetRequestUrl(SharpMap.Geometries.BoundingBox,System.Drawing.Size)">
            <summary>
            Gets the URL for a map request base on current settings, the image size and boundingbox
            </summary>
            <param name="box">Area the WMS request should cover</param>
            <param name="size">Size of image</param>
            <returns>URL for WMS request</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.getBoundingBoxes(SharpMap.Web.Wms.Client.WmsServerLayer)">
            <summary>
            Gets all the boundingboxes from the Client.WmsServerLayer
            </summary>
            <returns>List of all spatial referenced boundingboxes</returns>
        </member>
        <member name="M:SharpMap.Layers.WmsLayer.AddChildLayers(SharpMap.Web.Wms.Client.WmsServerLayer,System.Boolean)">
            <summary>
            Recursive method for adding all WMS layers to layer list
            Skips "top level" layer if addFirstLayer is false
            </summary>
            <param name="layer"></param>
            <param name="addFirstLayer"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.LayerList">
            <summary>
            Gets the list of enabled layers
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.StylesList">
            <summary>
            Gets the list of enabled styles
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.RootLayer">
            <summary>
            Gets the hiarchial list of available WMS layers from this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.OutputFormats">
            <summary>
            Gets the list of available formats
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Transparancy">
            <summary>
            Sets the optional transparancy. The WMS server might ignore this when not implemented and will ignore if the imageformat is jpg
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.BgColor">
            <summary>
            Sets the optional backgroundcolor. 
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ServiceDescription">
            <summary>
            Gets the service description from this server
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Version">
            <summary>
            Gets or sets the WMS Server version of this service
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ImageAttributes">
            <summary>
            When specified, applies image attributes at image (fx. make WMS layer semi-transparent)
            </summary>
            <remarks>
            <para>You can make the WMS layer semi-transparent by settings a up a ColorMatrix,
            or scale/translate the colors in any other way you like.</para>
            <example>
            Setting the WMS layer to be semi-transparent.
            <code lang="C#">
            float[][] colorMatrixElements = { 
            			new float[] {1,  0,  0,  0, 0},
            			new float[] {0,  1,  0,  0, 0},
            			new float[] {0,  0,  1,  0, 0},
            			new float[] {0,  0,  0,  0.5, 0},
            			new float[] {0, 0, 0, 0, 1}};
            ColorMatrix colorMatrix = new ColorMatrix(colorMatrixElements);
            ImageAttributes imageAttributes = new ImageAttributes();
            imageAttributes.SetColorMatrix(
            	   colorMatrix,
            	   ColorMatrixFlag.Default,
            	   ColorAdjustType.Bitmap);
            myWmsLayer.ImageAttributes = imageAttributes;
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.ContinueOnError">
            <summary>
            Specifies whether to throw an exception if the Wms request failed, or to just skip rendering the layer
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Credentials">
            <summary>
            Provides the base authentication interface for retrieving credentials for Web client authentication.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.Proxy">
            <summary>
            Gets or sets the proxy used for requesting a webresource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.WmsLayer.TimeOut">
            <summary>
            Timeout of webrequest in milliseconds. Defaults to 10 seconds
            </summary>
        </member>
        <member name="T:SharpMap.Layers.VectorLayer">
            <summary>
            Class for vector layer properties
            </summary>
            <example>
            Adding a VectorLayer to a map:
            <code lang="C#">
            //Initialize a new map
            SharpMap.Map myMap = new SharpMap.Map(new System.Drawing.Size(300,600));
            //Create a layer
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            //Add datasource
            myLayer.DataSource = new SharpMap.Data.Providers.ShapeFile(@"C:\data\MyShapeData.shp");
            //Set up styles
            myLayer.Style.Outline = new Pen(Color.Magenta, 3f);
            myLayer.Style.EnableOutline = true;
            myMap.Layers.Add(myLayer);
            //Zoom to fit the data in the view
            myMap.ZoomToExtents();
            //Render the map:
            System.Drawing.Image mapImage = myMap.GetMap();
            </code>
            </example>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String)">
            <summary>
            Initializes a new layer
            </summary>
            <param name="layername">Name of layer</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.#ctor(System.String,SharpMap.Data.Providers.IProvider)">
            <summary>
            Initializes a new layer with a specified datasource
            </summary>
            <param name="layername">Name of layer</param>
            <param name="dataSource">Data source</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.Render(System.Drawing.Graphics,SharpMap.Map)">
            <summary>
            Renders the layer to a graphics object
            </summary>
            <param name="g">Graphics object reference</param>
            <param name="map">Map which is rendered</param>
            
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="box">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Layers.VectorLayer.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the data associated with all the geometries that are intersected by 'geom'
            </summary>
            <param name="geometry">Geometry to intersect with</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Themes">
            <summary>
            Gets or sets a Dictionary with themes suitable for this layer. A theme in the dictionary can be used for rendering be setting the Theme Property using a delegate function
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Theme">
            <summary>
            Gets or sets thematic settings for the layer. Set to null to ignore thematics
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.ClippingEnabled">
            <summary>
            Specifies whether polygons should be clipped prior to rendering
            </summary>
            <remarks>
            <para>Clipping will clip <see cref="T:SharpMap.Geometries.Polygon"/> and
            <see cref="T:SharpMap.Geometries.MultiPolygon"/> to the current view prior
            to rendering the object.</para>
            <para>Enabling clipping might improve rendering speed if you are rendering 
            only small portions of very large objects.</para>
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SmoothingMode">
            <summary>
            Render whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.DataSource">
            <summary>
            Gets or sets the datasource
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Style">
            <summary>
            Gets or sets the rendering style of the vector layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.Envelope">
            <summary>
            Returns the extent of the layer
            </summary>
            <returns>Bounding box corresponding to the extent of the features in the layer</returns>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.SRID">
            <summary>
            Gets or sets the SRID of this VectorLayer's data source
            </summary>
        </member>
        <member name="P:SharpMap.Layers.VectorLayer.IsQueryEnabled">
            <summary>
            Whether the layer is queryable when used in a SharpMap.Web.Wms.WmsServer, ExecuteIntersectionQuery() will be possible in all other situations when set to FALSE
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose elements are LineStrings.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.#ctor">
            <summary>
            Initializes an instance of a MultiLineString
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.GetBoundingBox">
            <summary>
            The minimum bounding box for this Geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiLineString.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.LineStrings">
            <summary>
            Collection of <see cref="T:SharpMap.Geometries.LineString">LineStrings</see> in the <see cref="T:SharpMap.Geometries.MultiLineString"/>
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.IsClosed">
            <summary>
            Returns true if all LineStrings in this MultiLineString is closed (StartPoint=EndPoint for each LineString in this MultiLineString)
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.Length">
            <summary>
            The length of this MultiLineString which is equal to the sum of the lengths of the element LineStrings.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiLineString.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
        <member name="T:ProjNet.CoordinateSystems.Transformations.GeometryTransform">
            <summary>
            Helper class for transforming <see cref="T:SharpMap.Geometries.Geometry"/>
            </summary>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformBox(SharpMap.Geometries.BoundingBox,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.BoundingBox"/>.
            </summary>
            <param name="box">BoundingBox to transform</param>
            <param name="transform">Math Transform</param>
            <returns>Transformed object</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformGeometry(SharpMap.Geometries.Geometry,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Geometry"/>.
            </summary>
            <param name="g">Geometry to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Geometry</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformPoint(SharpMap.Geometries.Point,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Point"/>.
            </summary>
            <param name="p">Point to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Point</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformLineString(SharpMap.Geometries.LineString,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.LineString"/>.
            </summary>
            <param name="l">LineString to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed LineString</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformLinearRing(SharpMap.Geometries.LinearRing,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.LinearRing"/>.
            </summary>
            <param name="r">LinearRing to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed LinearRing</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformPolygon(SharpMap.Geometries.Polygon,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.Polygon"/>.
            </summary>
            <param name="p">Polygon to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed Polygon</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPoint(SharpMap.Geometries.MultiPoint,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiPoint"/>.
            </summary>
            <param name="points">MultiPoint to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiPoint</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformMultiLineString(SharpMap.Geometries.MultiLineString,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiLineString"/>.
            </summary>
            <param name="lines">MultiLineString to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiLineString</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformMultiPolygon(SharpMap.Geometries.MultiPolygon,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.MultiPolygon"/>.
            </summary>
            <param name="polys">MultiPolygon to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed MultiPolygon</returns>
        </member>
        <member name="M:ProjNet.CoordinateSystems.Transformations.GeometryTransform.TransformGeometryCollection(SharpMap.Geometries.GeometryCollection,ProjNet.CoordinateSystems.Transformations.IMathTransform)">
            <summary>
            Transforms a <see cref="T:SharpMap.Geometries.GeometryCollection"/>.
            </summary>
            <param name="geoms">GeometryCollection to transform</param>
            <param name="transform">MathTransform</param>
            <returns>Transformed GeometryCollection</returns>
        </member>
        <member name="T:SharpMap.Converters.WellKnownText.GeometryToWKT">
            <summary>
            Outputs the textual representation of a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-Known Text (WKT) representation of Geometry is designed to exchange geometry data in ASCII form.</para>
            Examples of WKT representations of geometry objects are:
            <list type="table">
            <listheader><term>Geometry </term><description>WKT Representation</description></listheader>
            <item><term>A Point</term>
            <description>POINT(15 20)<br/> Note that point coordinates are specified with no separating comma.</description></item>
            <item><term>A LineString with four points:</term>
            <description>LINESTRING(0 0, 10 10, 20 25, 50 60)</description></item>
            <item><term>A Polygon with one exterior ring and one interior ring:</term>
            <description>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</description></item>
            <item><term>A MultiPoint with three Point values:</term>
            <description>MULTIPOINT(0 0, 20 20, 60 60)</description></item>
            <item><term>A MultiLineString with two LineString values:</term>
            <description>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</description></item>
            <item><term>A MultiPolygon with two Polygon values:</term>
            <description>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</description></item>
            <item><term>A GeometryCollection consisting of two Point values and one LineString:</term>
            <description>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A Geometry to write.</param>
            <returns>A &lt;Geometry Tagged Text&gt; string (see the OpenGIS Simple
             Features Specification)</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.Write(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to its Well-known Text representation.
            </summary>
            <param name="geometry">A geometry to process.</param>
            <param name="writer">Stream to write out the geometry's text representation.</param>
            <remarks>
            Geometry is written to the output stream as &lt;Gemoetry Tagged Text&gt; string (see the OpenGIS
            Simple Features Specification).
            </remarks>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryTaggedText(SharpMap.Geometries.IGeometry,System.IO.StringWriter)">
            <summary>
            Converts a Geometry to &lt;Geometry Tagged Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometry">The Geometry to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointTaggedText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point Tagged Text&gt; format,
            then Appends it to the writer.
            </summary>
            <param name="coordinate">the <code>Coordinate</code> to process</param>
            <param name="writer">the output writer to Append to</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringTaggedText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to LineString tagged text format, 
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonTaggedText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
             Converts a Polygon to &lt;Polygon Tagged Text&gt; format,
             then Appends it to the writer.
            </summary>
            <param name="polygon">Th Polygon to process.</param>
            <param name="writer">The stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointTaggedText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Tagged Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multipoint">The MultiPoint to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringTaggedText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonTaggedText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionTaggedText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Tagged
            Text&gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPointText(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to Point Text format then Appends it to the writer.
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendCoordinate(SharpMap.Geometries.Point,System.IO.StringWriter)">
            <summary>
            Converts a Coordinate to &lt;Point&gt; format, then Appends
            it to the writer. 
            </summary>
            <param name="coordinate">The Coordinate to process.</param>
            <param name="writer">The output writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.WriteNumber(System.Double)">
            <summary>
            Converts a double to a string, not in scientific notation.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>The double as a string, not in scientific notation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendLineStringText(SharpMap.Geometries.LineString,System.IO.StringWriter)">
            <summary>
            Converts a LineString to &lt;LineString Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="lineString">The LineString to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendPolygonText(SharpMap.Geometries.Polygon,System.IO.StringWriter)">
            <summary>
            Converts a Polygon to &lt;Polygon Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="polygon">The Polygon to process.</param>
            <param name="writer"></param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPointText(SharpMap.Geometries.MultiPoint,System.IO.StringWriter)">
            <summary>
            Converts a MultiPoint to &lt;MultiPoint Text&gt; format, then
            Appends it to the writer.
            </summary>
            <param name="multiPoint">The MultiPoint to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiLineStringText(SharpMap.Geometries.MultiLineString,System.IO.StringWriter)">
            <summary>
            Converts a MultiLineString to &lt;MultiLineString Text&gt;
            format, then Appends it to the writer.
            </summary>
            <param name="multiLineString">The MultiLineString to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendMultiPolygonText(SharpMap.Geometries.MultiPolygon,System.IO.StringWriter)">
            <summary>
            Converts a MultiPolygon to &lt;MultiPolygon Text&gt; format, then Appends to it to the writer.
            </summary>
            <param name="multiPolygon">The MultiPolygon to process.</param>
            <param name="writer">The output stream to Append to.</param>
        </member>
        <member name="M:SharpMap.Converters.WellKnownText.GeometryToWKT.AppendGeometryCollectionText(SharpMap.Geometries.GeometryCollection,System.IO.StringWriter)">
            <summary>
            Converts a GeometryCollection to &lt;GeometryCollection Text &gt; format, then Appends it to the writer.
            </summary>
            <param name="geometryCollection">The GeometryCollection to process.</param>
            <param name="writer">The output stream writer to Append to.</param>
        </member>
        <member name="T:SharpMap.Converters.WellKnownBinary.GeometryFromWKB">
            <summary>
             Converts Well-known Binary representations to a <see cref="T:SharpMap.Geometries.Geometry"/> instance.
            </summary>
            <remarks>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> (WKBGeometry) provides a portable 
            representation of a <see cref="T:SharpMap.Geometries.Geometry"/> value as a contiguous stream of bytes. It permits <see cref="T:SharpMap.Geometries.Geometry"/> 
            values to be exchanged between an ODBC client and an SQL database in binary form.</para>
            <para>The Well-known Binary Representation for <see cref="T:SharpMap.Geometries.Geometry"/> is obtained by serializing a <see cref="T:SharpMap.Geometries.Geometry"/>
            instance as a sequence of numeric types drawn from the set {Unsigned Integer, Double} and
            then serializing each numeric type as a sequence of bytes using one of two well defined,
            standard, binary representations for numeric types (NDR, XDR). The specific binary encoding
            (NDR or XDR) used for a geometry byte stream is described by a one byte tag that precedes
            the serialized bytes. The only difference between the two encodings of geometry is one of
            byte order, the XDR encoding is Big Endian, the NDR encoding is Little Endian.</para>
            </remarks> 
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.Byte[])">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> from the supplied byte[] containing the Well-known Binary representation.
            </summary>
            <param name="bytes">byte[] containing the Well-known Binary representation.</param>
            <returns>A <see cref="T:SharpMap.Geometries.Geometry"/> bases on the supplied Well-known Binary representation.</returns>
        </member>
        <member name="M:SharpMap.Converters.WellKnownBinary.GeometryFromWKB.Parse(System.IO.BinaryReader)">
            <summary>
            Creates a <see cref="T:SharpMap.Geometries.Geometry"/> based on the Well-known binary representation.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader">BinaryReader</see> used to read the Well-known binary representation.</param>
            <returns>A <see cref="T:SharpMap.Geometries.Geometry"/> based on the Well-known binary representation.</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.Verify">
            <summary>
            Checks if the TileSet is initialized and throws an exception if not
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.Tiling.TileSet.ParseVendorSpecificCapabilitiesNode(System.Xml.XmlNode)">
            <summary>
            Parses the TileSets from the VendorSpecificCapabilities node of the WMS Capabilties 
            and adds them to the TileSets member
            </summary>
            <param name="xnlVendorSpecificCapabilities">The VendorSpecificCapabilities node of the Capabilties</param>
            <param name="nsmgr"></param>
        </member>
        <member name="P:SharpMap.Web.Wms.Tiling.TileSet.TileCache">
            <summary>
            Gets or sets the local tile cache. Use a local tile cache if you also want to store the tiles on 
            the local machine. 
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager">
            <summary>
            This class provides an easy-to-use interface for complex (parameterized) XPath queries.  
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="xPathDoc">An XmlDocument instance</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class. 
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class. 
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument,System.Xml.XPath.XPathNavigator,SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> class.
            </summary>
            <param name="xPathDoc">An XmlDocument instance</param>
            <param name="paramContext">A <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> instance for parameterized XPath expressions</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpMap.Utilities.Wfs.XPathQueryManager.#ctor(System.Xml.XPath.XPathDocument,System.Xml.XPath.XPathNodeIterator,SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext)" -->
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.AddNamespace(System.String,System.String)">
            <summary>
            This method adds a namespace for XPath queries.
            </summary>
            <param name="prefix">The namespace prefix</param>
            <param name="ns">The namespace URI</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.Compile(System.String)">
            <summary>
            This method compiles an XPath string.
            </summary>
            <param name="xPath">The XPath string</param>
            <returns>A compiled XPath expression</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.Clone">
            <summary>
            This method returns a clone of the current instance.
            The cloned instance operates on the same (read-only) XmlDocument instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an XPathNodeIterator instance positioned at the nodes 
            the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetIterator(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an XPathNodeIterator instance positioned at the nodes 
            the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns the value of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValueFromNode(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns the value of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns a collection of the values of all nodes the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetValuesFromNodes(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns a collection of the values of all nodes the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression)">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetXPathQueryManagerInContext(System.Xml.XPath.XPathExpression,System.Collections.DictionaryEntry[])">
            <summary>
            This method returns an instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            in the context of the first node the XPath expression addresses.
            </summary>
            <param name="xPath">The compiled XPath expression</param>
            <param name="queryParameters">Parameters for the compiled XPath expression</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetContextOfNextNode">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of the next node a previously handed over XPath expression addresses.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.GetContextOfNode(System.UInt32)">
            <summary>
            This method moves the current instance of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager"/> 
            to the context of node[index] of current position.
            </summary>
            <param name="index">The index of the node to search</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ResetNamespaces">
            <summary>
            This method deletes the current namespace context.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ResetNavigator">
            <summary>
            This method resets the inherent XPathNavigator instance.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.IO.Stream)">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="documentStream">A Stream with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.Byte[])">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="document">A byte array with XML data</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(SharpMap.Utilities.Wfs.HttpClientUtil)">
            <summary>
            Sets a new XML document. 
            </summary>
            <param name="httpClientUtil">A configured <see cref="T:SharpMap.Utilities.Wfs.HttpClientUtil"/> instance for performing web requests</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.String)">
            <summary>
            Sets a new XmlDocument
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.SetDocumentToParse(System.Xml.XPath.XPathDocument)">
            <summary>
            Sets a new XML document.
            </summary>
            <param name="xPathDoc">An XPathDocument instance</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.initializeXPathObjects(System.IO.Stream)">
            <summary>
            This method does some XPath specific initializations.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.findXPath(System.Xml.XPath.XPathExpression)">
            <summary>
            This method sets the inherent XPathNodeIterator instance.
            </summary>
            <param name="xPath">A compiled XPath expression</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext">
            <summary>
            This class represents a custom context for XPath queries.
            It is derived from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> class.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext"/> class.
            </summary>
            <param name="table">A NameTable instance</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddNamespace(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method adds a list of namespaces to use in the custom context.
            </summary>
            <param name="namespaces">A list of namespaces</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.CompareDocument(System.String,System.String)">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            This method resolves a function appearing in an XPath expression.
            </summary>
            <param name="prefix">The prefix of the function</param>
            <param name="name">The name of the function</param>
            <param name="ArgTypes">A list of argument types of the function</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResolveVariable(System.String,System.String)">
            <summary>
            This method resolves a variable appearing in an XPath expression.
            </summary>
            <param name="prefix">The prefix of the variable</param>
            <param name="name">The name of the variable</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddParam(System.String,System.Object)">
            <summary>
            This method adds a parameter to the custom context.
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameter">The value of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.AddParam(System.Collections.DictionaryEntry[])">
            <summary>
            This method adds a list of parameters to the custom context.
            </summary>
            <param name="parameters">A list of parameters</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.GetParam(System.String)">
            <summary>
            This method gets a parameter by name.
            </summary>
            <param name="name">The name of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.RemoveParam(System.String)">
            <summary>
            This method removes a parameter from the inherent parameter list.
            </summary>
            <param name="name">The name of the parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.ResetParams">
            <summary>
            This methods clears the inherent parameter list.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.CustomQueryContext.Whitespace">
            <summary>
            Method from XsltContext.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase">
            <summary>
            This class is the base class of <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare"/> and <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.#ctor(System.Xml.XPath.XPathResultType[],System.Xml.XPath.XPathResultType,System.Int32,System.Int32)">
            <summary>
            Protected constructor for the abstract class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="returnType">The return type of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.ArgTypes">
            <summary>
            Gets the argument types.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.Minargs">
            <summary>
            Gets the minimum number of arguments allowed.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamBase.Maxargs">
            <summary>
            Gets the maximum number of arguments allowed.
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare">
            <summary>
            This class performs a string comparison in an XPath expression.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.FunctionName">
            <summary>
            The name to use when embedding the function in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.#ctor(System.Xml.XPath.XPathResultType[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare"/> class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This method performs a string comparison.
            </summary>
            <param name="xsltContext">The Xslt context</param>
            <param name="args">The arguments of the function</param>
            <param name="docContext">The document context</param>
            <returns>A boolean value indicating whether the argument strings are identical</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.ResolveArgument(System.Object)">
            <summary>
            This method creates a string from an object argument.
            In many cases the argument is an XPathNodeIterator that must be resolved.
            </summary>
            <param name="arg">An argument of the function to be resolved</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompare.resolveNsPrefix(System.String,System.Xml.Xsl.XsltContext)">
            <summary>
            This method resolves the prefix of an argument.
            If a prefix is found, the corresponding namespace URI is looked up 
            and substituted.
            </summary>
            <param name="args">An argument of the function to be resolved</param>
            <param name="xsltContext">The Xslt context for namespace resolving</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs">
            <summary>
            This class performs a string comparison in an XPath expression.
            It is specifically created for using in XML schema documents.
            </summary>
        </member>
        <member name="F:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.FunctionName">
            <summary>
            The name to use when embedding the function in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.#ctor(System.Xml.XPath.XPathResultType[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs"/> class.
            </summary>
            <param name="argTypes">The argument types of the function</param>
            <param name="minArgs">The minimum number of arguments allowed</param>
            <param name="maxArgs">The maximum number of arguments allowed</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This method performs a string comparison.
            </summary>
            <param name="xsltContext">The Xslt context</param>
            <param name="args">The arguments of the function</param>
            <param name="docContext">The document context</param>
            <returns>A boolean value indicating whether the argument strings are identical</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamCompareWithTargetNs.resolveNsPrefix(System.String,System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            This method resolves the prefix of an argument.
            If a prefix is found, the corresponding namespace URI (if existing) is looked up 
            and substituted. Otherwise the target namespace is placed first.
            </summary>
            <param name="args">An argument of the function to be resolved</param>
            <param name="xsltContext">The Xslt context for namespace resolving</param>
        </member>
        <member name="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar">
            <summary>
            This class represents a variable in an XPath expression.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar"/> class.
            </summary>
            <param name="name">The name of the variable</param>
            <param name="param">The parameter</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.Evaluate(System.Xml.Xsl.XsltContext)">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.IsLocal">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.IsParam">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.Wfs.XPathQueryManager.ParamFunctionVar.VariableType">
            <summary>
            Method implementing IXsltContextVariable
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.MsSql">
            <summary>
            Microsoft SQL data provider
            </summary>
            <remarks>
            <para>
            The SQL data table MUST contain five data columns: A binary or image column (a Geometry Column) for storing WKB formatted geometries, 
            and four real values holding the boundingbox of the geometry. These must be named: Envelope_MinX, Envelope_MinY, Envelope_MaxX and Envelope_MaxY.
            Any extra columns will be returns as feature data.
            </para>
            <para>For creating a valid MS SQL datatable for SharpMap, see <see cref="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)"/> 
            for creating and uploading a datasource to MS SQL Server.</para>
            <example>
            Adding a datasource to a layer:
            <code lang="C#">
            SharpMap.Layers.VectorLayer myLayer = new SharpMap.Layers.VectorLayer("My layer");
            string ConnStr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            myLayer.DataSource = new SharpMap.Data.Providers.MsSql(ConnStr, "myTable");
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new connection to MS Sql Server
            </summary>
            <param name="ConnectionStr">Connectionstring</param>
            <param name="tablename">Name of data table</param>
            <param name="geometryColumnName">Name of geometry column</param>
            /// <param name="OID_ColumnName">Name of column with unique identifier</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Open">
            <summary>
            Opens the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Close">
            <summary>
            Closes the datasource
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometriesInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometries within the specified bounding box
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetGeometryByID(System.UInt32)">
            <summary>
            Returns the geometry corresponding to the Object ID
            </summary>
            <param name="oid">Object ID</param>
            <returns>geometry</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetObjectIDsInView(SharpMap.Geometries.BoundingBox)">
            <summary>
            Returns geometry Object IDs whose bounding box intersects 'bbox'
            </summary>
            <param name="bbox"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(SharpMap.Geometries.Geometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns the features that intersects with 'geom' [NOT IMPLEMENTED]
            </summary>
            <param name="geom"></param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeatureCount">
            <summary>
            Returns the number of features in the dataset
            </summary>
            <returns>number of features</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetFeature(System.UInt32)">
            <summary>
            Returns a datarow based on a RowID
            </summary>
            <param name="rowId"></param>
            <returns>datarow</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.GetExtents">
            <summary>
            Boundingbox of dataset
            </summary>
            <returns>boundingbox</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.ExecuteIntersectionQuery(SharpMap.Geometries.BoundingBox,SharpMap.Data.FeatureDataSet)">
            <summary>
            Returns all features with the view box
            </summary>
            <param name="bbox">view box</param>
            <param name="ds">FeatureDataSet to fill data into</param>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.CreateDataTable(SharpMap.Data.Providers.IProvider,System.String,System.String)">
            <summary>
            Creates a new table in a Microsoft SQL Server database and copies rows from an existing datasource.
            </summary>
            <remarks>
            <para>The datatable created will contain six extra columns besides the attribute data: "OID" (Object ID row), 
            "WKB_Geometry" (Geometry stored as WKB), and Envelope_MinX, Envelope_MinY, Envelope_MaxX, Envelope_MaxY
            for geometry bounding box.</para>
            <para>
            <example>
            Upload a ShapeFile to a database:
            <code>
            public void CreateDatabase(string shapeFile)
            {
            	if (!System.IO.File.Exists(shapeFile))
            	{
            		MessageBox.Show("File not found");
            		return;
            	}
            	ShapeFile shp = new ShapeFile(shapeFile, false);
            	//Create tablename from filename
            	string tablename = shapeFile.Substring(shapeFile.LastIndexOf('\\') + 1,
            		shapeFile.LastIndexOf('.') - shapeFile.LastIndexOf('\\') - 1);
            	//Create connectionstring
            	string connstr = @"Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|GeoDatabase.mdf;Integrated Security=True;User Instance=True";
            	int count = SharpMap.Data.Providers.MsSql.CreateDataTable(shp, tablename, connstr);
            	MessageBox.Show("Uploaded " + count.ToString() + " features to datatable '" + tablename + "'");
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="datasource">Datasource to upload</param>
            <param name="tablename">Name of table to create (existing table will be overwritten!)</param>
            <param name="connstr">Connection string to database</param>
            <returns>Number or rows inserted, -1 if failed and 0 if table created but no rows inserted.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.MsSql.Type2SqlType(System.Type)">
            <summary>
            Returns the name of the SqlServer datatype based on a .NET datatype
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionString">
            <summary>
            Connectionstring
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Table">
            <summary>
            Data table name
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.GeometryColumn">
            <summary>
            Name of geometry column
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ObjectIdColumn">
            <summary>
            Name of column that contains the Object ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.DefinitionQuery">
            <summary>
            Definition query used for limiting dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.Columns">
            <summary>
            Gets a collection of columns in the dataset
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.IsOpen">
            <summary>
            Returns true if the datasource is currently open
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.SRID">
            <summary>
            Spacial Reference ID
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.MsSql.ConnectionID">
            <summary>
            Gets the connection ID of the datasource
            </summary>
        </member>
        <member name="T:SharpMap.Web.Wms.WmsServer">
            <summary>
            This is a helper class designed to make it easy to create a WMS Service
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.ParseQueryString(SharpMap.Map,SharpMap.Web.Wms.Capabilities.WmsServiceDescription,System.Int32,SharpMap.Web.Wms.WmsServer.InterSectDelegate)">
            <summary>
            Generates a WMS 1.3.0 compliant response based on a <see cref="T:SharpMap.Map"/> and the current HttpRequest.
            </summary>
            <remarks>
            <para>
            The Web Map Server implementation in SharpMap requires v1.3.0 compatible clients,
            and support the basic operations "GetCapabilities" and "GetMap"
            as required by the WMS v1.3.0 specification. SharpMap does not support the optional
            GetFeatureInfo operation for querying.
            </para>
            <example>
            Creating a WMS server in ASP.NET is very simple using the classes in the SharpMap.Web.Wms namespace.
            <code lang="C#">
            void page_load(object o, EventArgs e)
            {
            	//Get the path of this page
            	string url = (Request.Url.Query.Length&gt;0?Request.Url.AbsoluteUri.Replace(Request.Url.Query,""):Request.Url.AbsoluteUri);
            	SharpMap.Web.Wms.Capabilities.WmsServiceDescription description =
            		new SharpMap.Web.Wms.Capabilities.WmsServiceDescription("Acme Corp. Map Server", url);
            	
            	// The following service descriptions below are not strictly required by the WMS specification.
            	
            	// Narrative description and keywords providing additional information 
            	description.Abstract = "Map Server maintained by Acme Corporation. Contact: webmaster@wmt.acme.com. High-quality maps showing roadrunner nests and possible ambush locations.";
            	description.Keywords.Add("bird");
            	description.Keywords.Add("roadrunner");
            	description.Keywords.Add("ambush");
            	
            	//Contact information 
            	description.ContactInformation.PersonPrimary.Person = "John Doe";
            	description.ContactInformation.PersonPrimary.Organisation = "Acme Inc";
            	description.ContactInformation.Address.AddressType = "postal";
            	description.ContactInformation.Address.Country = "Neverland";
            	description.ContactInformation.VoiceTelephone = "1-800-WE DO MAPS";
            	//Impose WMS constraints
            	description.MaxWidth = 1000; //Set image request size width
            	description.MaxHeight = 500; //Set image request size height
            	
            	//Call method that sets up the map
            	//We just add a dummy-size, since the wms requests will set the image-size
            	SharpMap.Map myMap = MapHelper.InitializeMap(new System.Drawing.Size(1,1));
            	
            	//Parse the request and create a response
            	SharpMap.Web.Wms.WmsServer.ParseQueryString(myMap,description);
            }
            </code>
            </example>
            </remarks>
            <param name="map">Map to serve on WMS</param>
            <param name="description">Description of map service</param>
            <param name="intersectDelegate">Delegate for Getfeatureinfo intersecting, when null, the WMS will default to ICanQueryLayer implementation</param>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.ParseQueryString(SharpMap.Map,SharpMap.Web.Wms.Capabilities.WmsServiceDescription)">
            <summary>
            Generates a WMS 1.3.0 compliant response based on a <see cref="T:SharpMap.Map"/> and the current HttpRequest.
            </summary>
            <remarks>
            <para>
            The Web Map Server implementation in SharpMap requires v1.3.0 compatible clients,
            and support the basic operations "GetCapabilities" and "GetMap"
            as required by the WMS v1.3.0 specification. SharpMap does not support the optional
            GetFeatureInfo operation for querying.
            </para>
            <example>
            Creating a WMS server in ASP.NET is very simple using the classes in the SharpMap.Web.Wms namespace.
            <code lang="C#">
            void page_load(object o, EventArgs e)
            {
            	//Get the path of this page
            	string url = (Request.Url.Query.Length&gt;0?Request.Url.AbsoluteUri.Replace(Request.Url.Query,""):Request.Url.AbsoluteUri);
            	SharpMap.Web.Wms.Capabilities.WmsServiceDescription description =
            		new SharpMap.Web.Wms.Capabilities.WmsServiceDescription("Acme Corp. Map Server", url);
            	
            	// The following service descriptions below are not strictly required by the WMS specification.
            	
            	// Narrative description and keywords providing additional information 
            	description.Abstract = "Map Server maintained by Acme Corporation. Contact: webmaster@wmt.acme.com. High-quality maps showing roadrunner nests and possible ambush locations.";
            	description.Keywords.Add("bird");
            	description.Keywords.Add("roadrunner");
            	description.Keywords.Add("ambush");
            	
            	//Contact information 
            	description.ContactInformation.PersonPrimary.Person = "John Doe";
            	description.ContactInformation.PersonPrimary.Organisation = "Acme Inc";
            	description.ContactInformation.Address.AddressType = "postal";
            	description.ContactInformation.Address.Country = "Neverland";
            	description.ContactInformation.VoiceTelephone = "1-800-WE DO MAPS";
            	//Impose WMS constraints
            	description.MaxWidth = 1000; //Set image request size width
            	description.MaxHeight = 500; //Set image request size height
            	
            	//Call method that sets up the map
            	//We just add a dummy-size, since the wms requests will set the image-size
            	SharpMap.Map myMap = MapHelper.InitializeMap(new System.Drawing.Size(1,1));
            	
            	//Parse the request and create a response
            	SharpMap.Web.Wms.WmsServer.ParseQueryString(myMap,description);
            }
            </code>
            </example>
            </remarks>
            <param name="map">Map to serve on WMS</param>
            <param name="description">Description of map service</param>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.GetEncoderInfo(System.String)">
            <summary>
            Used for setting up output format of image file
            </summary>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.ParseBBOX(System.String)">
            <summary>
            Parses a boundingbox string to a boundingbox geometry from the format minx,miny,maxx,maxy. Returns null if the format is invalid
            </summary>
            <param name="strBBOX">string representation of a boundingbox</param>
            <returns>Boundingbox or null if invalid parameter</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.CreateFeatureInfoPlain(SharpMap.Map,System.String[],System.Single,System.Single,System.Int32)">
            <summary>
            Gets FeatureInfo as text/plain
            </summary>
            <param name="strBBOX">string representation of a boundingbox</param>
            <returns>Plain text string with featureinfo results</returns>
        </member>
        <member name="M:SharpMap.Web.Wms.WmsServer.CreateFeatureInfoGeoJSON(SharpMap.Map,System.String[],System.Single,System.Single,System.Int32)">
            <summary>
            Gets FeatureInfo as GeoJSON
            </summary>
            <param name="strBBOX">string representation of a boundingbox</param>
            <returns>GeoJSON string with featureinfo results</returns>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetCapabilitiesRequest">
            <summary>
            This method returns the query string for 'GetCapabilities'.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.DescribeFeatureTypeRequest(System.String)">
            <summary>
            This method returns the query string for 'DescribeFeatureType'.
            </summary>
            <param name="featureTypeName">The name of the featuretype to query</param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetFeatureGETRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,SharpMap.Geometries.BoundingBox,SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method returns the query string for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="!:WFS.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
        </member>
        <member name="M:SharpMap.Utilities.Wfs.WFS_1_0_0_TextResources.GetFeaturePOSTRequest(SharpMap.Utilities.Wfs.WfsFeatureTypeInfo,System.String,SharpMap.Geometries.BoundingBox,SharpMap.Utilities.Wfs.IFilter)">
            <summary>
            This method returns the POST request for 'GetFeature'.
            </summary>
            <param name="featureTypeInfo">A <see cref="!:WFS.WfsFeatureTypeInfo"/> instance providing metadata of the featuretype to query</param>
            <param name="labelProperty">A property necessary for label rendering</param>
            <param name="boundingBox">The bounding box of the query</param>
            <param name="filter">An instance implementing <see cref="T:SharpMap.Utilities.Wfs.IFilter"/></param>
        </member>
        <member name="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar">
            <summary>
            Scale Bar map decoration
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderBar(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Render the bar
            </summary>
            <param name="g">The graphics object</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nOffsetX">The x-offset</param>
            <param name="nOffsetY">The y-offset</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderBarWithStyle(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Drawing.Color,SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle)">
            <summary>
            Render the bar with <paramref name="style"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="nOffsetX">The x-offset</param>
            <param name="nOffsetY">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
            <param name="style">The <see cref="T:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle"/></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicLine(System.Drawing.Graphics,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Render just the tic line
            </summary>
            <param name="g">The graphics object</param>
            <param name="nNumTics">The number of tics</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="xOrigin">The x-origin</param>
            <param name="yOrigin">The y-origin</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarStandard(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see name="ScaleBarStyle.Standard"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarMeridian(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTicBarMeridian1(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Boolean,System.Drawing.Color)">
            <summary>
            Render the bar with <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBarStyle.Meridian1"/> Style.
            </summary>
            <param name="g">The graphics object</param>
            <param name="xOrigin">The x-offset</param>
            <param name="yOrigin">The y-offset</param>
            <param name="nNumTics">The number of tics</param>
            <param name="nTicLength">The length of each tic</param>
            <param name="nBarWidth">The width of the bar</param>
            <param name="crBar1">The first bar color</param>
            <param name="crBar2">The second bar color</param>
            <param name="bOutline">Value indicating whether the bar should be outlined</param>
            <param name="crOutline">The outline color</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderVerbalScale(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Renders the verbal text above the scale bar.
            </summary>
            <param name="g">The graphics object</param>
            <param name="x">x-ordinate of the refeernce point for the text, the center of the bar</param>
            <param name="y">y-ordinate of the reference point for the text, the top or the bar</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderSegmentText(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Renders the segment text below the scale bar
            </summary>
            <param name="g">The graphics object</param>
            <param name="x">The x-ordinate of the reference point for the segment text, the beginning of the bar</param>
            <param name="y">The y-ordinate of the reference point for the segment text, the bottom of the bar</param>
            <param name="tics">The number of tics</param>
            <param name="ticWidth">The width of each tic in pixels</param>
            <param name="scaleBarUnitsPerTic">The scale bar units per tic</param>
            <param name="strUnit">The abbreviated unit text</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.RenderTextWithFormat(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringFormat,System.Int32@)">
            <summary>
            Renders the text
            </summary>
            <param name="g">The graphics object</param>
            <param name="text">The text to render</param>
            <param name="x">The x-ordinate of the reference point</param>
            <param name="y">The y-ordinate of the reference point</param>
            <param name="format">The string format, mainly vertical an horizontal alignment are of interest.</param>
            <param name="lastX">The last horizontal position, to ensure that texts are not overlapping</param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.CalcScale(System.Int32)">
            <summary>
            Calculate the scale and store it in <see cref="F:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar._scale"/>.
            <para>
            It should be called to calculate the real map scale everytime the user change mapunit or set the scale
            </para>
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.SetCustomUnit(System.Double,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="factor"></param>
            <param name="name"></param>
            <param name="shortName"></param>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.CalcRepresentativeFractionScaleD(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Calculate the representative fraction scale for lat/long map.
            </summary>
            <param name="lon1">The first longitue value</param>
            <param name="lon2">The second longitue value</param>
            <param name="lat">The common latitued value for <paramref name="lon1"/> and <paramref name="lon2"/></param>
            <param name="widthPage">The width of the display area</param>
            <param name="dpi">The "dots per inch" of the display</param>
            <returns>The representative fraction</returns>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.FormatRealScale(System.Double)">
            <summary>
             Keep only 5 (ScalePrecisionDigits) digits of prcision for the scale and return the scale after formatted.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.PrecitionOfSegmentText(System.Double)">
            <summary>
             Return the precision for the segment text of the scale bar.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.ForeColor">
            <summary>
            Gets or sets the foreground color, used to render the labeling
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Font">
            <summary>
            Gets or sets the font to label the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarColor1">
            <summary>
            Gets or sets the first bar color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarColor2">
            <summary>
            Gets or sets the second bar color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarWidth">
            <summary>
            Gets or sets the bar width
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MapUnit">
            <summary>
            Map unit
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarUnit">
            <summary>
            Bar unit
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarOutline">
            <summary>
            Bar outline
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarOutlineColor">
            <summary>
            Bar outline color
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.NumTicks">
            <summary>
            Gets or sets the number of ticks
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.ScaleText">
            <summary>
            Gets or sets the labeling for the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Width">
            <summary>
            Gets or sets the width of the scale bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.BarStyle">
            <summary>
            Gets or sets the bar style
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MarginLeft">
            <summary>
            Gets or sets the minimum margin on the left of the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.MarginRight">
            <summary>
            Gets or sets the minimum margin on the right of the bar
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Decoration.ScaleBar.ScaleBar.Dirty">
            <summary>
            Gets or (private) sets whether the display settings for the scale bar have been changed
            </summary>
        </member>
        <member name="T:SharpMap.Geometries.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.#ctor">
            <summary>
            Instantiates a MultiPolygon
            </summary>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsEmpty">
            <summary>
            If true, then this Geometry represents the empty point set, Ø, for the coordinate space. 
            </summary>
            <returns>Returns 'true' if this Geometry is the empty geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.IsSimple">
            <summary>
             Returns 'true' if this Geometry has no anomalous geometric points, such as self
            intersection or self tangency. The description of each instantiable geometric class will include the specific
            conditions that cause an instance of that class to be classified as not simple.
            </summary>
            <returns>true if the geometry is simple</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Boundary">
            <summary>
            Returns the closure of the combinatorial boundary of this Geometry. The
            combinatorial boundary is defined as described in section 3.12.3.2 of [1]. Because the result of this function
            is a closure, and hence topologically closed, the resulting boundary can be represented using
            representational geometry primitives
            </summary>
            <returns>Closure of the combinatorial boundary of this Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Distance(SharpMap.Geometries.Geometry)">
            <summary>
            Returns the shortest distance between any two points in the two geometries
            as calculated in the spatial reference system of this Geometry.
            </summary>
            <param name="geom">Geometry to calculate distance to</param>
            <returns>Shortest distance between any two points in the two geometries</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Buffer(System.Double)">
            <summary>
            Returns a geometry that represents all points whose distance from this Geometry
            is less than or equal to distance. Calculations are in the Spatial Reference
            System of this Geometry.
            </summary>
            <param name="d">Buffer distance</param>
            <returns>Buffer around geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.ConvexHull">
            <summary>
            Geometry—Returns a geometry that represents the convex hull of this Geometry.
            </summary>
            <returns>The convex hull</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Intersection(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set intersection of this Geometry
            with anotherGeometry.
            </summary>
            <param name="geom">Geometry to intersect with</param>
            <returns>Returns a geometry that represents the point set intersection of this Geometry with anotherGeometry.</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Union(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set union of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to union with</param>
            <returns>Unioned geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Difference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.SymDifference(SharpMap.Geometries.Geometry)">
            <summary>
            Returns a geometry that represents the point set symmetric difference of this Geometry with anotherGeometry.
            </summary>
            <param name="geom">Geometry to compare to</param>
            <returns>Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Geometry(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="N">Geometry index</param>
            <returns>Geometry at index N</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.GetBoundingBox">
            <summary>
            Returns the bounding box of the object
            </summary>
            <returns>bounding box</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.Clone">
            <summary>
            Return a copy of this geometry
            </summary>
            <returns>Copy of Geometry</returns>
        </member>
        <member name="M:SharpMap.Geometries.MultiPolygon.GetEnumerator">
            <summary>
            Gets an enumerator for enumerating the geometries in the GeometryCollection
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Polygons">
            <summary>
            Collection of polygons in the multipolygon
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Item(System.Int32)">
            <summary>
            Returns an indexed geometry in the collection
            </summary>
            <param name="index">Geometry index</param>
            <returns>Geometry at index</returns>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Area">
            <summary>
            Returns summed area of the Polygons in the MultiPolygon collection
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.Centroid">
            <summary>
            The mathematical centroid for the surfaces as a Point.
            The result is not guaranteed to be on any of the surfaces.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.PointOnSurface">
            <summary>
            A point guaranteed to be on this Surface.
            </summary>
        </member>
        <member name="P:SharpMap.Geometries.MultiPolygon.NumGeometries">
            <summary>
            Returns the number of geometries in the collection.
            </summary>
        </member>
    </members>
</doc>

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OgcToolkit.WebSample.Models.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Csw202TestData")]
	public partial class RecordsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    #endregion
		
		public RecordsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RecordsSource"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RecordsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecordsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecordsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecordsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STDisjoint", IsComposable=true)]
		public System.Nullable<int> Geometry_STDisjoint([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STContains", IsComposable=true)]
		public System.Nullable<int> Geometry_STContains([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STWithin", IsComposable=true)]
		public System.Nullable<int> Geometry_STWithin([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STCrosses", IsComposable=true)]
		public System.Nullable<int> Geometry_STCrosses([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STEquals", IsComposable=true)]
		public System.Nullable<int> Geometry_STEquals([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STIntersects", IsComposable=true)]
		public System.Nullable<int> Geometry_STIntersects([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STOverlaps", IsComposable=true)]
		public System.Nullable<int> Geometry_STOverlaps([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STTouches", IsComposable=true)]
		public System.Nullable<int> Geometry_STTouches([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="[Ogc.Filter].Geometry_STDistance", IsComposable=true)]
		public System.Nullable<double> Geometry_STDistance([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom1, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary geom2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geom1, geom2).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="[Ogc.Csw].Records")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Identifier;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Type;
		
		private string _Format;
		
		private string _Relation;
		
		private string _Spatial;
		
		private System.Data.Linq.Binary _Coverage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnFormatChanging(string value);
    partial void OnFormatChanged();
    partial void OnRelationChanging(string value);
    partial void OnRelationChanged();
    partial void OnSpatialChanging(string value);
    partial void OnSpatialChanged();
    partial void OnCoverageChanging(System.Data.Linq.Binary value);
    partial void OnCoverageChanged();
    #endregion
		
		public Record()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="VarChar(45)", IsPrimaryKey=true)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(256)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Format", DbType="VarChar(50)")]
		public string Format
		{
			get
			{
				return this._Format;
			}
			set
			{
				if ((this._Format != value))
				{
					this.OnFormatChanging(value);
					this.SendPropertyChanging();
					this._Format = value;
					this.SendPropertyChanged("Format");
					this.OnFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation", DbType="VarChar(45)")]
		public string Relation
		{
			get
			{
				return this._Relation;
			}
			set
			{
				if ((this._Relation != value))
				{
					this.OnRelationChanging(value);
					this.SendPropertyChanging();
					this._Relation = value;
					this.SendPropertyChanged("Relation");
					this.OnRelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spatial", DbType="VarChar(50)")]
		public string Spatial
		{
			get
			{
				return this._Spatial;
			}
			set
			{
				if ((this._Spatial != value))
				{
					this.OnSpatialChanging(value);
					this.SendPropertyChanging();
					this._Spatial = value;
					this.SendPropertyChanged("Spatial");
					this.OnSpatialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coverage", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Coverage
		{
			get
			{
				return this._Coverage;
			}
			set
			{
				if ((this._Coverage != value))
				{
					this.OnCoverageChanging(value);
					this.SendPropertyChanging();
					this._Coverage = value;
					this.SendPropertyChanged("Coverage");
					this.OnCoverageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
